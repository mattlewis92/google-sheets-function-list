[
  {
    "type": "Date",
    "name": "DATE",
    "syntax": "DATE(year, month, day)",
    "description": "Converts a provided year, month, and day into a date.",
    "link": "https://support.google.com/docs/answer/3092969",
    "notes": [
      "Inputs to DATE must be numbers - if a string or a reference to a cell containing a string is provided, the #VALUE! error will be returned.",
      "DATE will silently recalculate numeric dates which fall outside of valid month or day ranges. For example, DATE(1969,13,1), which specifies the illegal month 13, will create a date of 1/1/1970. Similarly, DATE(1969,1,32), which specifies the non-existent 32nd day of January, will create a date of 2/1/1969.",
      "DATE will silently truncate decimal values input into the function, e.g. a month of 12.75 will be interpreted as 12."
    ],
    "sampleUsage": ["DATE(1969,7,20)", "DATE(A2,B2,C2)"],
    "related": ["TO_DATE", "TIME", "N", "DATEVALUE"],
    "syntaxVariables": [
      { "name": "year", "description": "The year component of the date." },
      { "name": "month", "description": "The month component of the date." },
      { "name": "day", "description": "The day component of the date." }
    ]
  },
  {
    "type": "Date",
    "name": "DATEDIF",
    "syntax": "DATEDIF(start_date, end_date, unit)",
    "description": "Calculates the number of days, months, or years between two dates.",
    "link": "https://support.google.com/docs/answer/6055612",
    "notes": [
      "Months and years are only counted if they are equal to or go past the \"day.\" For example, the function returns \"4 months\" between the dates 9/30/15 and 2/28/16 (even though the 28th is the last day of the month).",
      "If DATEDIF produces a result in an unexpected format, ensure that no pre-existing format has been applied to the cell. For example, if DATEDIF(DATE(1969,7,16),DATE(1969,7,24),\"D\") returns 1/4/1900, the Date format has been applied to the cell. Change the format of the cell to Number in order to view the expected result of 8.",
      "Use unit \"MD\" to answer questions such as, \"After subtracting whole years and whole months from my age, how many days old am I?\"",
      "Use unit \"YM\" to answer questions such as, \"After subtracting whole years from my age, how many whole months old am I?\"",
      "Use unit \"YD\" to answer questions such as, \"How many days has it been since my last birthday, given my birthdate and today's date?\""
    ],
    "sampleUsage": [
      "DATEDIF(DATE(1969, 7, 16), DATE(1969, 7, 24), \"D\")",
      "DATEDIF(A1, A2, \"YM\")",
      "DATEDIF(\"7/16/1969\", \"7/24/1969\", \"Y\")",
      "DATEDIF(start_date, end_date, unit)",
      "DATEDIF"
    ],
    "related": ["DATE", "DATEVALUE"],
    "syntaxVariables": [
      {
        "name": "start_date",
        "description": "The start date to consider in the calculation. Must be a reference to a cell containing a DATE, a function returning a DATE type, or a number."
      },
      {
        "name": "end_date",
        "description": "The end date to consider in the calculation. Must be a reference to a cell containing a DATE, a function returning a DATE type, or a number."
      },
      {
        "name": "unit",
        "description": "A text abbreviation for unit of time. For example,\"M\"  for month. Accepted values are \"Y\",\"M\",\"D\" ,\"MD\",\"YM\",\"YD\".\n\n    \n      \n        \"Y\": the number of whole years between  start_date and end_date.\n      \n      \n        \"M\": the number of whole months between  start_date and end_date.\n      \n      \n        \"D\": the number of days between start_date  and end_date.\n      \n      \n        \"MD\": the number of days between start_date  and end_date after subtracting whole months.\n      \n      \n        \"YM\": the number of whole months between  start_date and end_date after subtracting whole years.\n      \n      \n        \"YD\": the number of days between start_date  and end_date, assuming start_date and end_date were no more than one year apart."
      }
    ]
  },
  {
    "type": "Date",
    "name": "DATEVALUE",
    "syntax": "DATEVALUE(date_string)",
    "description": "Converts a provided date string in a known format to a date value.",
    "link": "https://support.google.com/docs/answer/3093039",
    "notes": [
      "The input to DATEVALUE must be a string - if a number or cell reference to a cell containing a number is provided, the #VALUE! error will be returned.",
      "DATEVALUE returns integers that can be used in formulas. To get dates, change the cell format to Date.",
      "If providing an explicit string input to DATEVALUE rather than a cell reference, surrounding quotation marks are required.",
      "Some date formats are not understood by Google Sheets. To quickly ensure that the desired date format is understood, type an example of it into an empty cell, without quotation marks."
    ],
    "sampleUsage": [
      "DATEVALUE",
      "DATEVALUE(\"1969-7-20\")",
      "DATEVALUE(\"7/20/1969\")",
      "DATEVALUE(A2)"
    ],
    "related": ["TO_DATE", "N", "DATE"],
    "syntaxVariables": [
      {
        "name": "date_string",
        "description": "The string representing the date.\n\n    \n      Understood formats include any date format which is normally autoconverted when entered, without quotation marks, directly into a cell. Understood formats may depend on region and language settings."
      }
    ]
  },
  {
    "type": "Date",
    "name": "DAY",
    "syntax": "DAY(date)",
    "description": "Returns the day of the month that a specific date falls on, in numeric format.",
    "link": "https://support.google.com/docs/answer/3093040",
    "notes": [
      "Ensure that the input to the function is either a reference to a cell containing a date, a function which returns a date object such as DATE, DATEVALUE or TO_DATE, or a date serial number of the type returned by the N function. Google Sheets represents dates and times as numbers; while conversion is automatic when a human-readable date is entered into a cell, functions only accept literal dates in numeric format.",
      "DAY does not autoconvert number formats in the same way that Google Sheets does upon direct entry into cells. Therefore, DAY(10/10/2000) is interpreted as DAY(0.005), the quotient of 10 divided by 10 divided by 2000.",
      "DAY returns the intuitive understanding of the day of the month, and is useful primarily in other calculations rather than to extract the day of month from a known date, as that value is easily known from reading the entire date."
    ],
    "sampleUsage": [
      "DAY(DATE(1969,7,20))",
      "DAY(A2)",
      "DAY(40909)",
      "DAY(\"7/20/1969\")",
      "DAY(date)"
    ],
    "related": [
      "YEAR",
      "WEEKDAY",
      "TO_DATE",
      "SECOND",
      "N",
      "MONTH",
      "MINUTE",
      "HOUR",
      "DATEVALUE",
      "DATE"
    ],
    "syntaxVariables": [
      {
        "name": "date",
        "description": "The date from which to extract the day. Must be a reference to a cell containing a date, a function returning a date type, or a number."
      }
    ]
  },
  {
    "type": "Date",
    "name": "DAYS",
    "syntax": "DAYS(end_date, start_date)",
    "description": "Returns the number of days between two dates.",
    "link": "https://support.google.com/docs/answer/9061296",
    "notes": [],
    "sampleUsage": ["DAYS(end_date,start_date)"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "DAY: Returns the day of the month that a specific date falls on, in numeric format."
      },
      {
        "name": "",
        "description": "DAYS360: Returns the difference between two days based on the 360-day year used in some financial interest calculations."
      },
      {
        "name": "",
        "description": "NETWORKDAYS: Returns the number of net working days between two provided days."
      }
    ]
  },
  {
    "type": "Date",
    "name": "DAYS360",
    "syntax": "DAYS360(start_date, end_date, [method])",
    "description": "Returns the difference between two days based on the 360 day year used in some financial interest calculations.",
    "link": "https://support.google.com/docs/answer/3093042",
    "notes": [
      "This function is mostly used in a financial setting, for calculation involving fixed-income securities. Other usage is likely incorrect.",
      "Ensure that the inputs to the function are either references to cells containing dates, functions which return date objects such as DATE, DATEVALUE or TO_DATE, or date serial numbers of the type returned by the N function. Google Sheets represents dates and times as numbers; while conversion is automatic when a human-readable date is entered into a cell, functions only accept literal dates in numeric format.",
      "DAYS360 does not auto-convert number formats in the same way that Google Sheets does upon direct entry into cells. Therefore, DAYS360(10/10/2000,10/10/2001) is interpreted as DAYS360(0.005,0.00499750124938), the quotients of 10 divided by 10 divided by 2000 and 2001, respectively."
    ],
    "sampleUsage": [
      "DAYS360(DATE(1969,7,16),DATE(1969,7,24),1)",
      "DAYS360(A2,A3)",
      "DAYS360(1,270,1)"
    ],
    "related": ["YEARFRAC", "TO_DATE", "N", "DATEVALUE", "DATE"],
    "syntaxVariables": [
      {
        "name": "start_date",
        "description": "The start date to consider in the calculation. Must be a reference to a cell containing a date, a function returning a date type, or a number."
      },
      {
        "name": "end_date",
        "description": "The end date to consider in the calculation. Must be a reference to a cell containing a date, a function returning a date type, or a number."
      },
      {
        "name": "method",
        "description": "[ OPTIONAL - 0 by default ] - An indicator of what day count method to use.\n\n    \n      \n        0 indicates the US method - Under the US method, if start_date is the last day of a month, the day of month of start_date is changed to 30 for the purposes of the calculation. Furthermore if end_date is the last day of a month and the day of the month of start_date is earlier than the 30th, end_date is changed to the first day of the month following end_date, otherwise the day of month of end_date is changed to 30.\n      \n      \n        Any other value indicates the European method - Under the European method, any start_date or end_date that falls on the 31st of a month has its day of month changed to 30."
      }
    ]
  },
  {
    "type": "Date",
    "name": "EDATE",
    "syntax": "EDATE(start_date, months)",
    "description": "Returns a date a specified number of months before or after another date.",
    "link": "https://support.google.com/docs/answer/3092974",
    "notes": [
      "Ensure that the start_date input to the function is either a reference to a cell containing a date, a function which returns a date object such as DATE, DATEVALUE or TO_DATE, or a date serial number of the type returned by the N function. Google Sheets represents dates and times as numbers; while conversion is automatic when a human-readable date is entered into a cell, functions only accept literal dates in numeric format.",
      "EDATE does not autoconvert number formats in the same way that Google Sheets does upon direct entry into cells. Therefore, EDATE(10/10/2000,1) is interpreted as EDATE(0.005,1), the quotient of 10 divided by 10 divided by 2000.",
      "Non-integer arguments to months will have their decimal components truncated. Therefore, EDATE(A2,2.6) is equivalent to EDATE(A2,2)."
    ],
    "sampleUsage": [
      "EDATE(DATE(1969,7,20), 1)",
      "EDATE(A2, 1)",
      "EDATE(40909, -2)",
      "EDATE(start_date, months)",
      "months"
    ],
    "related": ["TO_DATE", "N", "EOMONTH", "DATEVALUE", "DATE"],
    "syntaxVariables": [
      {
        "name": "start_date",
        "description": "The date from which to calculate the result."
      },
      {
        "name": "months",
        "description": "The number of months before (negative) or after (positive) start_date to calculate."
      }
    ]
  },
  {
    "type": "Date",
    "name": "EOMONTH",
    "syntax": "EOMONTH(start_date, months)",
    "description": "Returns a date representing the last day of a month which falls a specified number of months before or after another date.",
    "link": "https://support.google.com/docs/answer/3093044",
    "notes": [
      "Ensure that the start_date input to the function is either a reference to a cell containing a date, a function which returns a date object such as DATE, DATEVALUE or TO_DATE, or a date serial number of the type returned by the N function. Google Sheets represents dates and times as numbers; while conversion is automatic when a human-readable date is entered into a cell, functions only accept literal dates in numeric format.",
      "EOMONTH does not autoconvert number formats in the same way that Google Sheets does upon direct entry into cells. Therefore, EOMONTH(10/10/2000,1) is interpreted as EOMONTH(0.0005,1), the quotient of 10 divided by 10 divided by 2000.",
      "Non-integer arguments to months will have their decimal components truncated. Therefore, EOMONTH(A2,2.6) is equivalent to EOMONTH(A2,2)."
    ],
    "sampleUsage": [
      "EOMONTH(DATE(1969, 7, 20), 1)",
      "EOMONTH(A2, 1)",
      "EOMONTH(40909, -2)",
      "EOMONTH(start_date, months)",
      "months"
    ],
    "related": ["TO_DATE", "N", "EDATE", "DATEVALUE", "DATE"],
    "syntaxVariables": [
      {
        "name": "start_date",
        "description": "The date from which to calculate the the result."
      },
      {
        "name": "months",
        "description": "The number of months before (negative) or after (positive) start_date to consider. The last calendar day of the calculated month is returned."
      }
    ]
  },
  {
    "type": "Date",
    "name": "HOUR",
    "syntax": "HOUR(time)",
    "description": "Returns the hour component of a specific time, in numeric format.",
    "link": "https://support.google.com/docs/answer/3093045",
    "notes": [
      "Ensure that the input to the function is either a reference to a cell containing a date/time, a function which returns a date/time object such as TIME, or a date serial number of the type returned by the N function. Google Sheets represents dates and times as numbers; while conversion is automatic when a human-readable date is entered into a cell, functions only accept literal dates in numeric format.",
      "HOUR does not autoconvert number formats in the same way that Google Sheets does upon direct entry into cells. Therefore, HOUR(12:00:00) will return an error.",
      "HOUR returns the intuitive understanding of hours, and is useful primarily in other calculations rather than to extract the hour component of a known time, as that value is easily known from a plain reading of the entire time.",
      "Note that date objects that are created with the DATE function or by entry of a date without a time component will have a time of 0:00:00."
    ],
    "sampleUsage": [
      "HOUR(TIME(11,40,59))",
      "HOUR(A2)",
      "HOUR(40909.0004)",
      "HOUR(\"20:49:59\")"
    ],
    "related": [
      "YEAR",
      "WEEKDAY",
      "TO_DATE",
      "TIME",
      "SECOND",
      "N",
      "MONTH",
      "MINUTE",
      "DAY",
      "DATEVALUE",
      "DATE"
    ],
    "syntaxVariables": [
      {
        "name": "time",
        "description": "The time from which to calculate the hour component. Must be a reference to a cell containing a date/time, a function returning a date/time type, or a number."
      }
    ]
  },
  {
    "type": "Date",
    "name": "ISOWEEKNUM",
    "syntax": "ISOWEEKNUM(date)",
    "description": "Returns the number of the ISO week of the year where the provided date falls.",
    "link": "https://support.google.com/docs/answer/7368793",
    "notes": [
      "When entering the date, use the DATE function, as text values might return errors.",
      "Per the European system for numbering weeks (also known as ISO 8601):\n    \n      Weeks begin on Monday and end on Sunday.\n      Week 1 of the year is the week containing the first Thursday of the year.\n        \n          As a result, if the first Thursday is after January 4, at least one of the following days, January 1-3, will have an ISOWEEKNUM of 52 or 53.\n          Similarly, if the first Thursday is before January 4, at least one of the following days, December 29-31, will have an ISOWEEKNUM of 1. \n          If the first Thursday is January 4, December 29-31 of the previous year will have ISOWEEKNUM of 52 and January 1-7 of the current year will have ISOWEEKNUM of 1.",
      "Weeks begin on Monday and end on Sunday.",
      "Week 1 of the year is the week containing the first Thursday of the year.\n        \n          As a result, if the first Thursday is after January 4, at least one of the following days, January 1-3, will have an ISOWEEKNUM of 52 or 53.\n          Similarly, if the first Thursday is before January 4, at least one of the following days, December 29-31, will have an ISOWEEKNUM of 1. \n          If the first Thursday is January 4, December 29-31 of the previous year will have ISOWEEKNUM of 52 and January 1-7 of the current year will have ISOWEEKNUM of 1.",
      "As a result, if the first Thursday is after January 4, at least one of the following days, January 1-3, will have an ISOWEEKNUM of 52 or 53.",
      "Similarly, if the first Thursday is before January 4, at least one of the following days, December 29-31, will have an ISOWEEKNUM of 1.",
      "If the first Thursday is January 4, December 29-31 of the previous year will have ISOWEEKNUM of 52 and January 1-7 of the current year will have ISOWEEKNUM of 1."
    ],
    "sampleUsage": [
      "ISOWEEKNUM(DATE(1969, 7, 20))",
      "ISOWEEKNUM(\"6/14/2002\")"
    ],
    "related": ["WEEKNUM", "WEEKDAY", "DAYS360", "DATE", "DATEVALUE:"],
    "syntaxVariables": [
      {
        "name": "date",
        "description": "The date for which to determine the ISO week number. Must refer to a cell containing a date, number, or function returning a date type."
      }
    ]
  },
  {
    "type": "Date",
    "name": "MINUTE",
    "syntax": "MINUTE(time)",
    "description": "Returns the minute component of a specific time, in numeric format.",
    "link": "https://support.google.com/docs/answer/3093048",
    "notes": [
      "Ensure that the input to the function is either a reference to a cell containing a date/time, a function which returns a date/time object such as TIME, or a date serial number of the type returned by the N function. Google Sheets represents dates and times as numbers; while conversion is automatic when a human-readable date is entered into a cell, functions only accept literal dates in numeric format.",
      "MINUTE does not autoconvert number formats in the same way that Google Sheets does upon direct entry into cells. Therefore, MINUTE(12:00:00) will return an error.",
      "MINUTE returns the intuitive understanding of minutes, and is useful primarily in other calculations rather than to extract the minute component of a known time, as that value is easily known from a plain reading of the entire time.",
      "Note that date objects that are created with the DATE function or by entry of a date without a time component will have a time of 0:00:00."
    ],
    "sampleUsage": [
      "MINUTE(TIME(11,40,59))",
      "MINUTE(A2)",
      "MINUTE(40909.0004)",
      "MINUTE(\"20:49:59\")"
    ],
    "related": [
      "YEAR",
      "WEEKDAY",
      "TO_DATE",
      "TIME",
      "SECOND",
      "N",
      "MONTH",
      "HOUR",
      "DAY",
      "DATEVALUE",
      "DATE"
    ],
    "syntaxVariables": [
      {
        "name": "time",
        "description": "The time from which to calculate the minute component. Must be a reference to a cell containing a date/time, a function returning a date/time type, or a number."
      }
    ]
  },
  {
    "type": "Date",
    "name": "MONTH",
    "syntax": "MONTH(date)",
    "description": "Returns the month of the year a specific date falls in, in numeric format.",
    "link": "https://support.google.com/docs/answer/3093052",
    "notes": [
      "Ensure that the input to the function is either a reference to a cell containing a date, a function which returns a date object such as DATE, DATEVALUE or TO_DATE, or a date serial number of the type returned by the N function. Google Sheets represents dates as numbers; while conversion is automatic when a human-readable date is entered into a cell, functions only accept literal dates in numeric format.",
      "MONTH does not autoconvert number formats in the same way that Google Sheets does upon direct entry into cells. Therefore, MONTH(10/10/2000) is interpreted as MONTH(0.005), the quotient of 10 divided by 10 divided by 2000.",
      "MONTH returns the intuitive understanding of the month of the year, and is useful primarily in other calculations rather than to extract the month from a known date, as that value is easily known from a plain reading of the entire date."
    ],
    "sampleUsage": [
      "MONTH(DATE(1969, 7, 20))",
      "MONTH(A2)",
      "MONTH(40909)",
      "MONTH(\"7/20/1969\")"
    ],
    "related": ["YEAR", "WEEKDAY", "TO_DATE", "N", "DAY", "DATEVALUE", "DATE"],
    "syntaxVariables": [
      {
        "name": "date",
        "description": "The date from which to extract the month. Must be a reference to a cell containing a date, a function returning a date type, or a number."
      }
    ]
  },
  {
    "type": "Date",
    "name": "NETWORKDAYS",
    "syntax": "NETWORKDAYS(start_date, end_date, [holidays])",
    "description": "Returns the number of net working days between two provided days.",
    "link": "https://support.google.com/docs/answer/3092979",
    "notes": [
      "NETWORKDAYS does not autoconvert number formats in the same way that Google Sheets does upon direct entry into cells. Therefore, NETWORKDAYS(10/10/2000,10/10/2001) is interpreted as NETWORKDAYS(0.005,0.00499750124938), the quotients of 10 divided by 10 divided by 2000 and 2001, respectively.",
      "NETWORKDAYS calculates the number of work days between two dates. To calculate the working day a specific number of days ahead of a date, use WORKDAY.",
      "NETWORKDAYS works similarly to NETWORKDAYS.INTL but only treats Saturday and Sunday as the weekend. Use NETWORKDAYS.INTL to use other days of the week as the weekend."
    ],
    "sampleUsage": [
      "NETWORKDAYS(DATE(1969,7,16),DATE(1969,7,24))",
      "NETWORKDAYS(A2,B2)",
      "NETWORKDAYS(40909,40924)",
      "NETWORKDAYS(40900,40950,{40909,40924})",
      "NETWORKDAYS(start_date, end_date, [holidays])",
      "start_date"
    ],
    "related": [
      "NETWORKDAYS.INTL",
      "WORKDAY",
      "TO_DATE",
      "N",
      "DATEVALUE",
      "DATE"
    ],
    "syntaxVariables": [
      {
        "name": "start_date",
        "description": "The start date of the period from which to calculate the number of net working days."
      },
      {
        "name": "end_date",
        "description": "The end date of the period from which to calculate the number of net working days."
      },
      {
        "name": "holidays",
        "description": "[ OPTIONAL ] - A range or array constant containing the date serial numbers to consider holidays.\n\n    \n      The values provided within an array for holidays must be date serial number values, as returned by N or date values, as returned by DATE, DATEVALUE or TO_DATE. Values specified by a range should be standard date values or date serial numbers."
      }
    ]
  },
  {
    "type": "Date",
    "name": "NETWORKDAYS.INTL",
    "syntax": "NETWORKDAYS.INTL(start_date, end_date, [weekend], [holidays])",
    "description": "Returns the number of net working days between two provided days excluding specified weekend days and holidays.",
    "link": "https://support.google.com/docs/answer/3295902",
    "notes": [
      "NETWORKDAYS.INTL does not autoconvert number formats in the same way that Google Sheets does upon direct entry into cells. Therefore, NETWORKDAYS.INTL(10/10/2000,10/10/2001) is interpreted as NETWORKDAYS.INTL(0.005,0.00499750124938), the quotients of 10 divided by 10 divided by 2000 and 2001, respectively.",
      "NETWORKDAYS.INTL calculates the number of work days between two dates. To calculate the working days a specific number of days ahead of a date, use WORKDAY.INTL.",
      "NETWORKDAYS.INTL works similarly to NETWORKDAYS but also allows weekend days to be specified (for areas where Saturday and Sunday are not considered the weekend)."
    ],
    "sampleUsage": [
      "NETWORKDAYS.INTL(DATE(1969, 7, 16), DATE(1969, 7, 24), 1, A1:A10)",
      "NETWORKDAYS.INTL(DATE(1969, 7, 16), DATE(1969, 7, 24))",
      "NETWORKDAYS.INTL(\"12/04/1995\", \"12/22/1995\", 3)",
      "NETWORKDAYS.INTL(\"12/04/1995\", \"12/22/1995\", “0000011”)"
    ],
    "related": ["NETWORKDAYS", "WORKDAY.INTL", "EDATE", "EOMONTH", "NOW"],
    "syntaxVariables": [
      {
        "name": "start_date",
        "description": "The start date of the period from which to calculate the number of net working days."
      },
      {
        "name": "end_date",
        "description": "The end date of the period from which to calculate the number of net working days."
      },
      {
        "name": "weekend",
        "description": "[ OPTIONAL - 1 by default ] - A number or string representing which days of the week are considered weekends.\n    \n      String method: weekends can be specified using seven 0’s and 1’s, where the first number in the set represents Monday and the last number is for Sunday. A zero means that the day is a work day, a 1 means that the day is a weekend. For example, “0000011” would mean Saturday and Sunday are weekends.\n      Number method: instead of using the string method above, a single number can be used. 1 = Saturday/Sunday are weekends, 2 = Sunday/Monday, and this pattern repeats until 7 = Friday/Saturday. 11 = Sunday is the only weekend, 12 = Monday is the only weekend, and this pattern repeats until 17 = Saturday is the only weekend."
      },
      {
        "name": "holidays",
        "description": "[ OPTIONAL ] - A range or array constant containing the dates to consider as holidays.\n    \n      The values provided within an array for holidays must be date serial number values, as returned by N or date values, as returned by DATE, DATEVALUE or TO_DATE. Values specified by a range should be standard date values or date serial numbers."
      }
    ]
  },
  {
    "type": "Date",
    "name": "NOW",
    "syntax": "NOW()",
    "description": "Returns the current date and time as a date value.",
    "link": "https://support.google.com/docs/answer/3092981",
    "notes": [],
    "sampleUsage": ["NOW()"],
    "related": ["TODAY", "DATEVALUE", "DATE"],
    "syntaxVariables": [
      {
        "name": "NOW",
        "description": "Note that  is a volatile function, updating on every edit made to the spreadsheet, and can hurt spreadsheet performance."
      },
      {
        "name": "NOW",
        "description": " provides the current date and time. To create a date without the current time, use TODAY."
      },
      {
        "name": "NOW",
        "description": " will always represent the current date and time the last time the spreadsheet was recalculated, rather than remaining at the date and time when it was first entered."
      },
      {
        "name": "",
        "description": "The time or date component of NOW may be hidden by changing the number formatting on the cell. If either the date or time is not appearing, change the number formatting."
      }
    ]
  },
  {
    "type": "Date",
    "name": "SECOND",
    "syntax": "SECOND(time)",
    "description": "Returns the second component of a specific time, in numeric format.",
    "link": "https://support.google.com/docs/answer/3093054",
    "notes": [
      "Ensure that the input to the function is either a reference to a cell containing a date/time, a function which returns a date/time object such as TIME, or a date serial number of the type returned by the N function. Google Sheets represents dates and times as numbers; while conversion is automatic when a human-readable date is entered into a cell, functions only accept literal dates in numeric format.",
      "SECOND does not autoconvert number formats in the same way that Google Sheets does upon direct entry into cells. Therefore, SECOND(12:00:00) will return an error.",
      "SECOND returns the intuitive understanding of seconds, and is useful primarily in other calculations rather than to extract the second component of a known time, as that value is easily known from a plain reading of the entire time.",
      "Note that date objects that are created with the DATE function or by entry of a date without a time component will have a time of 0:00:00."
    ],
    "sampleUsage": [
      "SECOND(TIME(11,40,59))",
      "SECOND(A2)",
      "SECOND(40909.0004)",
      "SECOND(\"20:49:59\")"
    ],
    "related": [
      "YEAR",
      "WEEKDAY",
      "TO_DATE",
      "TIME",
      "SECOND",
      "N",
      "MONTH",
      "MINUTE",
      "HOUR",
      "DATEVALUE",
      "DATE"
    ],
    "syntaxVariables": [
      {
        "name": "time",
        "description": "The time from which to calculate the second component. Must be a reference to a cell containing a date/time, a function returning a date/time type, or a number."
      }
    ]
  },
  {
    "type": "Date",
    "name": "TIME",
    "syntax": "TIME(hour, minute, second)",
    "description": "Converts a provided hour, minute, and second into a time.",
    "link": "https://support.google.com/docs/answer/3093056",
    "notes": [
      "Inputs to TIME must be numbers - if a string or a reference to a cell containing a string is provided, the #VALUE! error will be returned.",
      "TIME will silently recalculate numeric time values which fall outside of valid ranges. For example, TIME(25,0,0), which specifies the illegal hour 25, will create a time of 1:00 AM. Similarly, TIME(12,0,60), which specifies the illegal 61st second of a minute (:00 being the first second), will create a time of 12:01:00.",
      "TIME will silently truncate decimal values input into the function, e.g. an hour of 12.75 will be interpreted as 12."
    ],
    "sampleUsage": ["TIME(11,40,59)", "TIME(A2,B2,C2)"],
    "related": ["DATE"],
    "syntaxVariables": [
      { "name": "hour", "description": "The hour component of the time." },
      { "name": "minute", "description": "The minute component of the time." },
      { "name": "second", "description": "The second component of the time." }
    ]
  },
  {
    "type": "Date",
    "name": "TIMEVALUE",
    "syntax": "TIMEVALUE(time_string)",
    "description": "Returns the fraction of a 24-hour day the time represents.",
    "link": "https://support.google.com/docs/answer/3267350",
    "notes": [
      "The string of text used in time_string should be within quotations and represent time using either the 12-hour or 24-hour time format, for example \"2:15 PM\" or \"14:15\".",
      "Returns a number between 0 (inclusive) and 1 (exclusive). Zero corresponds to 12:00:00 AM and 0.9999884259 corresponds to 11:59:59 PM. To get closer to 1.0, use fractions of seconds after 11:59:59 PM (e.g., 11:59:59.50 PM).",
      "Dates, for example the day of the week, are ignored in time_string."
    ],
    "sampleUsage": [
      "TIMEVALUE(\"2:15 PM\")",
      "TIMEVALUE(\"14:15:30\")",
      "TIMEVALUE(\"11:59:59.50 PM\")"
    ],
    "related": ["DATEVALUE", "MINUTE", "HOUR", "TIME", "NOW"],
    "syntaxVariables": [
      {
        "name": "time_string",
        "description": "The string that holds the time representation."
      }
    ]
  },
  {
    "type": "Date",
    "name": "TODAY",
    "syntax": "TODAY()",
    "description": "Returns the current date as a date value.",
    "link": "https://support.google.com/docs/answer/3092984",
    "notes": [],
    "sampleUsage": ["TODAY()"],
    "related": ["NOW", "DATEVALUE", "DATE"],
    "syntaxVariables": [
      {
        "name": "TODAY",
        "description": "Note that  is a volatile function and can hurt spreadsheet performance."
      },
      {
        "name": "TODAY",
        "description": " provides the current date with no time component. To create a date with the current time, use NOW."
      },
      {
        "name": "TODAY",
        "description": " will always represent the current date the last time the spreadsheet was recalculated, rather than remaining at the date when it was first entered."
      }
    ]
  },
  {
    "type": "Date",
    "name": "WEEKDAY",
    "syntax": "WEEKDAY(date, [type])",
    "description": "Returns a number representing the day of the week of the date provided.",
    "link": "https://support.google.com/docs/answer/3092985",
    "notes": [
      "Ensure that the input to the function is either a reference to a cell containing a date, a function which returns a date object such as DATE, DATEVALUE or TO_DATE, or a date serial number of the type returned by the N function. Google Sheets represents dates internally as numbers for ease of use in calculation, and while this conversion is done automatically when a date in the form of a string is input into a cell, this function does not perform this conversion.",
      "WEEKDAY does not autoconvert number formats in the same way that Google Sheets does upon direct entry into cells. Therefore, WEEKDAY(10/10/2000) is interpreted as WEEKDAY(0.0005), the quotient of 10 divided by 10 divided by 2000.",
      "WEEKDAY returns the day of week in numeric form, not as a letter (e.g. 'M' or 'F') an abbreviation (e.g. 'Tue' or 'Thu') nor as a full day name (e.g. 'Wednesday'). To get the name of the weekday, use the TEXT function or change the number formatting on the cell."
    ],
    "sampleUsage": [
      "WEEKDAY(DATE(1969,7,20))",
      "WEEKDAY(A2)",
      "WEEKDAY(40909)",
      "WEEKDAY(40909,3)"
    ],
    "related": [
      "YEAR",
      "TO_DATE",
      "N",
      "MONTH",
      "DAY",
      "DATEVALUE",
      "DATE",
      "TEXT"
    ],
    "syntaxVariables": [
      {
        "name": "date",
        "description": "The date for which to determine the day of the week. Must be a reference to a cell containing a date, a function returning a date type, or a number."
      },
      {
        "name": "type",
        "description": "[ OPTIONAL - 1 by default ] - A number indicating which numbering system to use to represent weekdays. By default counts starting with Sunday = 1.\n\n    \n      \n        If type is 1, days are counted from Sunday and the value of Sunday is 1, therefore the value of Saturday is 7.\n      \n      \n        If type is 2, days are counted from Monday and the value of Monday is 1, therefore the value of Sunday is 7.\n      \n      \n        If type is 3, days are counted from Monday and the value of Monday is 0, therefore the value of Sunday is 6."
      }
    ]
  },
  {
    "type": "Date",
    "name": "WEEKNUM",
    "syntax": "WEEKNUM(date, [type])",
    "description": "Returns a number representing the week of the year where the provided date falls.",
    "link": "https://support.google.com/docs/answer/3294949",
    "notes": [
      "When inputting the date, it is best to use the DATE function, as text values may return errors.",
      "Behind the scenes, there are two week numbering \"systems\" used for this function:\n    \n      System 1 - The first week of the year is considered to be the week containing January 1, which is numbered week 1.\n      System 2 - The first week of the year is considered to be the week containing the first Thursday of the year, which is numbered as week 1. System 2 is the approach specified in ISO 8601, also known as the European system for numbering weeks.",
      "System 1 - The first week of the year is considered to be the week containing January 1, which is numbered week 1.",
      "System 2 - The first week of the year is considered to be the week containing the first Thursday of the year, which is numbered as week 1. System 2 is the approach specified in ISO 8601, also known as the European system for numbering weeks.",
      "For each type, the start day and end day of a week are defined as follows when counting week numbers:\n    \n      \n        \n          type\n          Day week begins on\n          Day week ends on\n          System\n        \n        \n          1 or omitted\n          Sunday\n          Saturday\n          1\n        \n        \n          2\n          Monday\n          Sunday\n          1\n        \n        \n          11\n          Monday\n          Sunday\n          1\n        \n        \n          12\n          Tuesday\n          Monday\n          1\n        \n        \n          13\n          Wednesday\n          Tuesday\n          1\n        \n        \n          14\n          Thursday\n          Wednesday\n          1\n        \n        \n          15\n          Friday\n          Thursday\n          1\n        \n        \n          16\n          Saturday\n          Friday\n          1\n        \n        \n          17\n          Sunday\n          Saturday\n          1\n        \n        \n          21\n          Monday\n          Sunday\n          2"
    ],
    "sampleUsage": [
      "WEEKNUM(DATE(1969, 7, 20), 1)",
      "WEEKNUM(\"12/09/1948\", 2)",
      "WEEKNUM(\"6/14/2002\")"
    ],
    "related": ["WEEKDAY", "DAYS360", "DATE", "DATEVALUE", "DATE"],
    "syntaxVariables": [
      {
        "name": "date",
        "description": "The date for which to determine the week number. Must be a reference to a cell containing a date, a function returning a date type, or a number."
      },
      {
        "name": "type",
        "description": "[ OPTIONAL - default is 1 ] - A number representing the day that a week starts on as well as the system used for determining the first week of the year (1=Sunday, 2=Monday)."
      }
    ]
  },
  {
    "type": "Date",
    "name": "WORKDAY",
    "syntax": "WORKDAY(start_date, num_days, [holidays])",
    "description": "Calculates the end date after a specified number of working days.",
    "link": "https://support.google.com/docs/answer/3093059",
    "notes": [
      "WORKDAY does not autoconvert number formats in the same way that Google Sheets does upon direct entry into cells. Therefore, WORKDAY(10/10/2000,4) is interpreted as WORKDAY(0.005,4), where the provided date is the quotient of 10 divided by 10 divided by 2000.",
      "WORKDAY calculates the end date after a specified number of working days. To calculate the number of working days between two dates, use NETWORKDAYS.",
      "WORKDAY works similarly to WORKDAY.INTL but only treats Saturday and Sunday as the weekend. Use WORKDAY.INTL to use other days of the week as the weekend."
    ],
    "sampleUsage": [
      "WORKDAY(DATE(1969,7,20), 4, A1:A10)",
      "WORKDAY(A2, 10)",
      "WORKDAY(40909, 4, B2:B17)",
      "WORKDAY(40909, 30, {40909,40924})"
    ],
    "related": [
      "WORKDAY.INTL",
      "TO_DATE",
      "NETWORKDAYS",
      "N",
      "DATEVALUE",
      "DATE"
    ],
    "syntaxVariables": [
      {
        "name": "start_date",
        "description": "The date from which to begin counting."
      },
      {
        "name": "num_days",
        "description": "The number of working days to advance from start_date. If negative, counts backwards.\n\n    \n      If num_days is not an integer, the decimal part is truncated. That is, WORKDAY(A2,1.9) is equivalent to WORKDAY(A2,1)."
      },
      {
        "name": "holidays",
        "description": "[ OPTIONAL ] - A range or array constant containing the dates to consider holidays.\n    \n      The values provided within an array for holidays must be date serial number values, as returned by N or date values, as returned by DATE, DATEVALUE or TO_DATE. Values specified by a range should be standard date values or date serial numbers."
      }
    ]
  },
  {
    "type": "Date",
    "name": "WORKDAY.INTL",
    "syntax": "WORKDAY.INTL(start_date, num_days, [weekend], [holidays])",
    "description": "Calculates the date after a specified number of workdays excluding specified weekend days and holidays.",
    "link": "https://support.google.com/docs/answer/3294972",
    "notes": [
      "WORKDAY.INTL does not autoconvert number formats in the same way that Google Sheets does upon direct entry into cells. Therefore, WORKDAY.INTL(10/10/2000,4) is interpreted as WORKDAY.INTL(0.005,4), where the provided date is the quotient of 10 divided by 10 divided by 2000.",
      "WORKDAY.INTL calculates a number of working days after a given date. To calculate the number of working days between two dates, use NETWORKDAYS.INTL.",
      "WORKDAY.INTL works similarly to WORKDAY but also allows weekend days to be specified (for areas where Saturday and Sunday are not considered the weekend)."
    ],
    "sampleUsage": [
      "WORKDAY.INTL(DATE(1969, 7, 21), 4, 1, A1:A10)",
      "WORKDAY.INTL(DATE(1995, 8, 13), -2, 2, B1:B10)",
      "WORKDAY.INTL(DATE(1969, 7, 21), 0)"
    ],
    "related": ["WORKDAY", "NETWORKDAYS.INTL", "EDATE", "EOMONTH", "NOW"],
    "syntaxVariables": [
      {
        "name": "start_date",
        "description": "The date from which to begin counting."
      },
      {
        "name": "num_days",
        "description": "The number of working days to advance from start_date. If negative, counts backwards."
      },
      {
        "name": "weekend",
        "description": "[ OPTIONAL - 1 by default ] - A number or string representing which days of the week are considered weekends.\n    \n      String method: weekends can be specified using seven 0’s and 1’s, where the first number in the set represents Monday and the last number is for Sunday. A zero means that the day is a work day, a 1 means that the day is a weekend. For example, “0000011” would mean Saturday and Sunday are weekends.\n      Number method: instead of using the string method above, a single number can be used. 1 = Saturday/Sunday are weekends, 2 = Sunday/Monday, and this pattern repeats until 7 = Friday/Saturday. 11 = Sunday is the only weekend, 12 = Monday is the only weekend, and this pattern repeats until 17 = Saturday is the only weekend."
      },
      {
        "name": "holidays",
        "description": "[ OPTIONAL ] - A range or array constant containing the dates to consider holidays."
      }
    ]
  },
  {
    "type": "Date",
    "name": "YEAR",
    "syntax": "YEAR(date)",
    "description": "Returns the year specified by a given date.",
    "link": "https://support.google.com/docs/answer/3093061",
    "notes": [
      "Ensure that the input to the function is either a reference to a cell containing a date, a function which returns a date object such as DATE, DATEVALUE or TO_DATE, or a date serial number of the type returned by the N function. Google Sheets represents dates and times as numbers; while conversion is automatic when a human-readable date is entered into a cell, functions only accept literal dates in numeric format.",
      "YEAR does not autoconvert number formats in the same way that Google Sheets does upon direct entry into cells. Therefore, YEAR(10/10/2000) is interpreted as YEAR(0.005), the quotient of 10 divided by 10 divided by 2000."
    ],
    "sampleUsage": ["YEAR(DATE(1969,7,20))", "YEAR(A2)", "YEAR(40909)"],
    "related": ["WEEKDAY", "TO_DATE", "N", "MONTH", "DAY", "DATEVALUE", "DATE"],
    "syntaxVariables": [
      {
        "name": "date",
        "description": "The date from which to calculate the year. Must be a cell reference to a cell containing a date, a function returning a date type, or a number."
      }
    ]
  },
  {
    "type": "Date",
    "name": "YEARFRAC",
    "syntax": "YEARFRAC(start_date, end_date, [day_count_convention])",
    "description": "Returns the number of years, including fractional years, between two dates using a specified day count convention.",
    "link": "https://support.google.com/docs/answer/3092989",
    "notes": [
      "This function is mostly used in a financial setting, for calculation involving fixed-income securities. Because the most common calculations performed use the NASD standard calendar, this is the default behavior. However, for use in non-financial settings, option 1, Actual/Actual, is most likely the correct choice.",
      "Ensure that the inputs to the function are either references to cells containing dates, functions which return date objects such as DATE, DATEVALUE or TO_DATE, or date serial numbers of the type returned by the N function.",
      "YEARFRAC does not autoconvert number formats in the same way that Google Sheets does upon direct entry into cells. Therefore, YEARFRAC(10/10/2000,10/10/2001) is interpreted as YEARFRAC(0.005,0.00499750124938), the quotients of 10 divided by 10 divided by 2000 and 2001, respectively."
    ],
    "sampleUsage": [
      "YEARFRAC(DATE(1969,7,16),DATE(1969,7,24),1)",
      "YEARFRAC(A2,A3)",
      "YEARFRAC(start_date, end_date, [day_count_convention])",
      "start_date",
      "end_date",
      "day_count_convention",
      "YEARFRAC",
      "TODAY"
    ],
    "related": ["TO_DATE", "N", "DAYS360", "DATEVALUE", "DATE"],
    "syntaxVariables": [
      {
        "name": "start_date",
        "description": "The start date to consider in the calculation. Must be a reference to a cell containing a date, a function returning a date type, or a number."
      },
      {
        "name": "end_date",
        "description": "The end date to consider in the calculation. Must be a reference to a cell containing a date, a function returning a date type, or a number."
      },
      {
        "name": "day_count_convention",
        "description": "[ OPTIONAL - 0 by default ] - An indicator of what day count method to use.\n\n    \n      \n        0 indicates US (NASD) 30/360 - This assumes 30 day months and 360 day years as per the National Association of Securities Dealers standard, and performs specific adjustments to entered dates which fall at the end of months.\n      \n      \n        1 indicates Actual/Actual - This calculates based upon the actual number of days between the specified dates, and the actual number of days in the intervening years. Used for US Treasury Bonds and Bills, but also the most relevant for non-financial use.\n      \n      \n        2 indicates Actual/360 - This calculates based on the actual number of days between the specified dates, but assumes a 360 day year.\n      \n      \n        3 indicates Actual/365 - This calculates based on the actual number of days between the specified dates, but assumes a 365 day year.\n      \n      \n        4 indicates European 30/360 - Similar to 0, this calculates based on a 30 day month and 360 day year, but adjusts end-of-month dates according to European financial conventions."
      }
    ]
  },
  {
    "type": "Engineering",
    "name": "BIN2DEC",
    "syntax": "BIN2DEC(signed_binary_number)",
    "description": "Converts a signed binary number to decimal format.",
    "link": "https://support.google.com/docs/answer/3092991",
    "notes": [
      "As with any binary value, only the digits 0 and 1 are valid. Digits other than these will cause BIN2DEC to return a #NUM! error."
    ],
    "sampleUsage": ["BIN2DEC(101)", "BIN2DEC(A2)"],
    "related": [
      "OCT2HEX",
      "OCT2DEC",
      "OCT2BIN",
      "HEX2OCT",
      "HEX2DEC",
      "HEX2BIN",
      "DEC2OCT",
      "DEC2HEX",
      "DEC2BIN",
      "BIN2OCT",
      "BIN2HEX"
    ],
    "syntaxVariables": [
      {
        "name": "signed_binary_number",
        "description": "The signed 10-bit binary value to be converted to decimal, provided as a string.\n\n    \n      \n        The most significant bit of signed_binary_number is the sign bit; that is, negative numbers are represented in two's complement format.\n      \n      \n        For this function, the input value has a maximum of 0111111111 if positive, and a minimum of 1000000000 if negative.\n      \n      \n        If signed_binary_number is provided as a valid binary number, it will automatically be converted to the appropriate string input. For example, BIN2DEC(100) and BIN2DEC(\"100\") yield the same result: 4."
      }
    ]
  },
  {
    "type": "Engineering",
    "name": "BIN2HEX",
    "syntax": "BIN2HEX(signed_binary_number, [significant_digits])",
    "description": "Converts a signed binary number to signed hexadecimal format.",
    "link": "https://support.google.com/docs/answer/3093133",
    "notes": [
      "As with any binary value, only the digits 0 and 1 are valid. Digits other than these will cause BIN2HEX to return a #NUM! error.",
      "If the number of digits required is greater than the specified significant_digits, the #NUM! error is returned.",
      "Ensure that any calculations using the result of BIN2HEX take into account that it is in hexadecimal. In particular, results which do not contain non-decimal digits (A-F) will be silently converted by Google Sheets; thus if cell A2 contains 111, the hexadecimal equivalent of binary 100010001, and B2 contains a formula such as =A2+9, the result will be 120, which is incorrect in hex calculation."
    ],
    "sampleUsage": ["BIN2HEX(101,8)", "BIN2HEX(A2)"],
    "related": [
      "OCT2HEX",
      "OCT2DEC",
      "OCT2BIN",
      "HEX2OCT",
      "HEX2DEC",
      "HEX2BIN",
      "DEC2OCT",
      "DEC2HEX",
      "DEC2BIN",
      "BIN2OCT",
      "BIN2DEC"
    ],
    "syntaxVariables": [
      {
        "name": "signed_binary_number",
        "description": "The signed 10-bit binary value to be converted to signed hexadecimal, provided as a string.\n\n    \n      \n        The most significant bit of signed_binary_number is the sign bit; that is, negative numbers are represented in two's complement format.\n      \n      \n        For this function, this value has a maximum of 0111111111 if positive, and a minimum of 1000000000 if negative.\n      \n      \n        If signed_binary_number is provided as a valid binary number, it will automatically be converted to the appropriate string input. For example, BIN2HEX(11111) and BIN2HEX(\"11111\") yield the same result: 1F."
      },
      {
        "name": "significant_digits",
        "description": "[ OPTIONAL ] - The number of significant digits to ensure in the result.\n\n    \n      \n        If this is greater than the number of significant digits in the result, the result is left-padded with zeros until the total number of digits reaches significant_digits. For example, BIN2HEX(\"11111\",8) yields the value 0000001F.\n      \n      \n        This value is ignored if the most significant bit of signed_binary_number is 1; that is, if the expressed signed_binary_number is greater than or equal to 1000000000."
      }
    ]
  },
  {
    "type": "Engineering",
    "name": "BIN2OCT",
    "syntax": "BIN2OCT(signed_binary_number, [significant_digits])",
    "description": "Converts a signed binary number to signed octal format.",
    "link": "https://support.google.com/docs/answer/3092993",
    "notes": [
      "As with any binary value, only the digits 0 and 1 are valid. Digits other than these will cause BIN2OCT to return a #NUM! error.",
      "If the number of digits required is greater than the specified significant_digits, the #NUM! error is returned.",
      "Ensure that any calculations using the result of BIN2OCT take into account that it is in octal. Results will be silently converted by Google Sheets; thus if cell A2 contains 111, the octal equivalent of binary 1001001, and B2 contains a formula such as =A2+9, the result will be 120, which is incorrect in octal calculation."
    ],
    "sampleUsage": ["BIN2OCT(101,8)", "BIN2OCT(A2)"],
    "related": [
      "OCT2HEX",
      "OCT2DEC",
      "OCT2BIN",
      "HEX2OCT",
      "HEX2DEC",
      "HEX2BIN",
      "DEC2OCT",
      "DEC2HEX",
      "DEC2BIN",
      "BIN2HEX",
      "BIN2DEC"
    ],
    "syntaxVariables": [
      {
        "name": "signed_binary_number",
        "description": "The signed 10-bit binary value to be converted to signed octal, provided as a string.\n\n    \n      \n        The most significant bit of signed_binary_number is the sign bit; that is, negative numbers are represented in two's complement format.\n      \n      \n        For this function, this value has a maximum of 0111111111 if positive, and a minimum of 1000000000 if negative.\n      \n      \n        If signed_binary_number is provided as a valid binary number, it will automatically be converted to the appropriate string input. For example, BIN2OCT(11111) and BIN2OCT(\"11111\") yield the same result: 37."
      },
      {
        "name": "significant_digits",
        "description": "[ OPTIONAL ] - The number of significant digits to ensure in the result.\n\n    \n      \n        If this is greater than the number of significant digits in the result, the result is left-padded with zeros until the total number of digits reaches significant_digits. For example, BIN2OCT(\"11111\") yields the value 00000037.\n      \n      \n        This value is ignored if the most significant bit of signed_binary_number is 1; that is, if the expressed signed_binary_number is greater than or equal to 1000000000."
      }
    ]
  },
  {
    "type": "Engineering",
    "name": "BITAND",
    "syntax": "BITAND(value1, value2)",
    "description": "Bitwise boolean AND of two numbers.",
    "link": "https://support.google.com/docs/answer/9061440",
    "notes": [
      "BITOR: The BITOR function returns the bitwise boolean OR of two numbers.",
      "BITXOR: The BITXOR function returns the bitwise boolean XOR (exclusive OR) of two numbers.",
      "BITLSHIFT: The BITLSHIFT function shifts the bits of the input a certain number of places to the left. Bits on the right are filled with zeroes (0s).",
      "BITRSHIFT: The BITRSHIFT function shifts the bits of the input a certain number of places to the right. Bits on the right are filled with zeroes (0s).",
      "BIN2DEC: The BIN2DEC function converts a signed binary number to decimal format.",
      "DEC2BIN: The DEC2BIN function converts a decimal number to signed binary format."
    ],
    "sampleUsage": [],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "BITAND(BIN2DEC(“1010”), BIN2DEC(“1001”)) which evaluates to “1000” in binary or 8 in decimal."
      }
    ]
  },
  {
    "type": "Engineering",
    "name": "BITLSHIFT",
    "syntax": "BITLSHIFT(value, shift_amount)",
    "description": "Shifts the bits of the input a certain number of places to the left.",
    "link": "https://support.google.com/docs/answer/9061443",
    "notes": [],
    "sampleUsage": ["BITLSHIFT(value,shift_amount)"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "Values don't necessarily have to be numbers."
      },
      {
        "name": "",
        "description": "Values may be coerced. For example, a string value of “3” can be coerced to be simply 3 and a boolean value of TRUE can be coerced to 1."
      }
    ]
  },
  {
    "type": "Engineering",
    "name": "BITOR",
    "syntax": "BITOR(value1, value2)",
    "description": "Bitwise boolean OR of 2 numbers.",
    "link": "https://support.google.com/docs/answer/9083934",
    "notes": [],
    "sampleUsage": ["BITOR(value1, value2)", "BITOR(9, 5)", "BITOR(A1, 10)"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "BITAND: The BITAND function returns the bitwise boolean AND of two numbers. Learn more."
      },
      {
        "name": "",
        "description": "BITXOR: The BITXOR function is a bitwise XOR (exclusive or) of 2 numbers that returns a bit of “1” if 2 bits are different, and a bit of “0” otherwise."
      },
      {
        "name": "",
        "description": "BITLSHIFT: The BITLSHIFT function shifts the bits of the input a certain number of places to the left. Bits on the right are filled with zeroes (0s)."
      },
      {
        "name": "",
        "description": "BITRSHIFT: The BITRSHIFT function shifts the bits of the input a certain number of places to the right."
      },
      {
        "name": "",
        "description": "BIN2DEC: The BIN2DEC function converts a signed binary number to decimal format."
      },
      {
        "name": "",
        "description": "DEC2BIN: The DEC2BIN function converts a decimal number to signed binary format."
      }
    ]
  },
  {
    "type": "Engineering",
    "name": "BITRSHIFT",
    "syntax": "BITRSHIFT(value, shift_amount)",
    "description": "Shifts the bits of the input a certain number of places to the right.",
    "link": "https://support.google.com/docs/answer/9084100",
    "notes": [],
    "sampleUsage": ["BITRSHIFT(value, shift_amount)", "BITRSHIFT(18, 2)"],
    "related": [],
    "syntaxVariables": []
  },
  {
    "type": "Engineering",
    "name": "BITXOR",
    "syntax": "BITXOR(value1, value2)",
    "description": "Bitwise XOR (exclusive OR) of 2 numbers.",
    "link": "https://support.google.com/docs/answer/9083935",
    "notes": [
      "BITOR: The BITOR function returns the bitwise Boolean OR of 2 numbers.",
      "XOR: The XOR function returns TRUE if an odd number of the provided arguments are logically true, and FALSE otherwise."
    ],
    "sampleUsage": ["BITXOR(value1, value2)", "BITXOR(9, 5)"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "Order doesn't matter for values. The result is the same regardless."
      },
      {
        "name": "",
        "description": "Values don't necessarily have to be numbers. Instead, they may be coerced. For example, a string value of \"3\" can be coerced to be simply 3, and a Boolean value of TRUE can be coerced to 1."
      }
    ]
  },
  {
    "type": "Engineering",
    "name": "COMPLEX",
    "syntax": "COMPLEX(real_part, imaginary_part, [suffix])",
    "description": "Creates a complex number given real and imaginary coefficients.",
    "link": "https://support.google.com/docs/answer/7407888",
    "notes": [
      "IMREAL: Returns the real coefficient of a complex number.",
      "IMAGINARY: Returns the imaginary coefficient of a complex number."
    ],
    "sampleUsage": ["COMPLEX(3, 4)", "COMPLEX(3, -1, \"j\")", "COMPLEX(3, 0)"],
    "related": ["IMREAL", "IMAGINARY"],
    "syntaxVariables": [
      { "name": "real_part", "description": "The real coefficient." },
      { "name": "imaginary_part", "description": "The imaginary coefficient." },
      {
        "name": "suffix",
        "description": "[ OPTIONAL \"i\" by default] The suffix for the imaginary coefficient."
      }
    ]
  },
  {
    "type": "Engineering",
    "name": "DEC2BIN",
    "syntax": "DEC2BIN(decimal_number, [significant_digits])",
    "description": "Converts a decimal number to signed binary format.",
    "link": "https://support.google.com/docs/answer/3092997",
    "notes": [
      "If the number of digits required is greater than the specified significant_digits, the #NUM! error is returned.",
      "Ensure that any calculations using the result of DEC2BIN take into account that it is in binary. Results will be silently converted by Google Sheets; thus if cell A2 contains 11111, the binary equivalent of the decimal value 31, and B2 contains a formula such as =A2+9, the result will be 11120, which is incorrect in binary calculation."
    ],
    "sampleUsage": ["DEC2BIN(\"100\",8)", "DEC2BIN(A2)"],
    "related": [
      "OCT2HEX",
      "OCT2DEC",
      "OCT2BIN",
      "HEX2OCT",
      "HEX2DEC",
      "HEX2BIN",
      "DEC2OCT",
      "DEC2HEX",
      "BIN2OCT",
      "BIN2HEX",
      "BIN2DEC"
    ],
    "syntaxVariables": [
      {
        "name": "decimal_number",
        "description": "The decimal value to be converted to signed binary, provided as a string.\n\n    \n      \n        For this function, this value has a maximum of 511 if positive, and a minimum of -512 if negative.\n      \n      \n        If decimal_number is provided as a valid decimal number, it will automatically be converted to the appropriate string input. For example, DEC2BIN(199) and DEC2BIN(\"199\") yield the same result: 11000111."
      },
      {
        "name": "significant_digits",
        "description": "[ OPTIONAL ] The number of significant digits to ensure in the result.\n\n    \n      \n        If this is greater than the number of significant digits in the result, the result is left-padded with zeros until the total number of digits reaches significant_digits.\n      \n      \n        This value is ignored if decimal_number is negative."
      }
    ]
  },
  {
    "type": "Engineering",
    "name": "DEC2HEX",
    "syntax": "DEC2HEX(decimal_number, [significant_digits])",
    "description": "Converts a decimal number to signed hexadecimal format.",
    "link": "https://support.google.com/docs/answer/3093137",
    "notes": [
      "If the number of digits required is greater than the specified significant_digits, the #NUM! error is returned."
    ],
    "sampleUsage": ["DEC2HEX(100,8)", "DEC2HEX(A2)"],
    "related": [
      "OCT2HEX",
      "OCT2DEC",
      "OCT2BIN",
      "HEX2OCT",
      "HEX2DEC",
      "HEX2BIN",
      "DEC2OCT",
      "DEC2BIN",
      "BIN2OCT",
      "BIN2HEX",
      "BIN2DEC"
    ],
    "syntaxVariables": [
      {
        "name": "decimal_number",
        "description": "The decimal value to be converted to signed hexadecimal, provided as a string.\n\n    \n      \n        For this function, this value has a maximum of 549755813887 if positive, and a minimum of -549755814888 if negative.\n      \n      \n        If decimal_number is provided as a valid decimal number, it will automatically be converted to the appropriate string input. For example, DEC2HEX(100) and DEC2HEX(\"100\") yield the same result: 64."
      },
      {
        "name": "significant_digits",
        "description": "[ OPTIONAL ] - The number of significant digits to ensure in the result.\n\n    \n      \n        If this is greater than the number of significant digits in the result, the result is left-padded with zeros until the total number of digits reaches significant_digits.\n      \n      \n        This value is ignored if decimal_number is negative."
      }
    ]
  },
  {
    "type": "Engineering",
    "name": "DEC2OCT",
    "syntax": "DEC2OCT(decimal_number, [significant_digits])",
    "description": "Converts a decimal number to signed octal format.",
    "link": "https://support.google.com/docs/answer/3093138",
    "notes": [
      "If the number of digits required is greater than the specified significant_digits, the #NUM! error is returned.",
      "Ensure that any calculations using the result of DEC2OCT take into account that it is in octal. Results will be silently converted by Google Sheets; thus if cell A2 contains 111, the octal equivalent of the decimal value 73, and B2 contains a formula such as =A2+9, the result will be 120, which is incorrect in octal calculation."
    ],
    "sampleUsage": ["DEC2OCT(\"100\",8)", "DEC2OCT(A2)"],
    "related": [
      "OCT2HEX",
      "OCT2DEC",
      "OCT2BIN",
      "HEX2OCT",
      "HEX2DEC",
      "HEX2BIN",
      "DEC2HEX",
      "DEC2BIN",
      "BIN2OCT",
      "BIN2HEX",
      "BIN2DEC"
    ],
    "syntaxVariables": [
      {
        "name": "decimal_number",
        "description": "The decimal value to be converted to signed octal, provided as a string.\n\n    \n      \n        For this function, this value has a maximum of 536870911 if positive, and a minimum of -53687092 if negative.\n      \n      \n        If decimal_number is provided as a valid decimal number, it will automatically be converted to the appropriate string input. For example, DEC2OCT(199) and DEC2OCT(\"199\") yield the same result: 307."
      },
      {
        "name": "significant_digits",
        "description": "[ OPTIONAL ] The number of significant digits to ensure in the result.\n\n    \n      \n        If this is greater than the number of significant digits in the result, the result is left-padded with zeros until the total number of digits reaches significant_digits.\n      \n      \n        This value is ignored if decimal_number is negative."
      }
    ]
  },
  {
    "type": "Engineering",
    "name": "DELTA",
    "syntax": "DELTA(number1, [number2])",
    "description": "Compare two numeric values, returning 1 if they're equal.",
    "link": "https://support.google.com/docs/answer/3401147",
    "notes": [
      "If the second argument is not provided then number1 will be compared to zero.",
      "A blank cell is treated the same as zero.",
      "This function only compares numbers. To compare other types of values, use the EQ function."
    ],
    "sampleUsage": ["DELTA(2, 1)", "DELTA(A2)", "DELTA(B3, 2)"],
    "related": ["EQ", "IF", "SUM"],
    "syntaxVariables": [
      { "name": "number1", "description": "the first number to compare." },
      {
        "name": "number2",
        "description": "[ OPTIONAL - 0 by default ] - the second number to compare."
      }
    ]
  },
  {
    "type": "Engineering",
    "name": "ERF",
    "syntax": "ERF(lower_bound, [upper_bound])",
    "description": "The ERF function returns the integral of the Gauss error function over an interval of values.",
    "link": "https://support.google.com/docs/answer/9116267",
    "notes": [],
    "sampleUsage": ["ERF(lower_bound, [upper_bound])", "ERF(-2.3, -0.7)"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "ERFC: The ERFC function returns the complementary Gauss error function of a value."
      },
      {
        "name": "",
        "description": "NORMDIST: The NORMDIST function returns the value of the normal distribution function (or normal cumulative distribution function) for a specified value, mean, and standard deviation."
      }
    ]
  },
  {
    "type": "Engineering",
    "name": "ERF.PRECISE",
    "syntax": "ERF.PRECISE(lower_bound, [upper_bound])",
    "description": "See ERF",
    "link": "https://support.google.com/docs/answer/9116267",
    "notes": [],
    "sampleUsage": ["ERF(lower_bound, [upper_bound])", "ERF(-2.3, -0.7)"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "ERFC: The ERFC function returns the complementary Gauss error function of a value."
      },
      {
        "name": "",
        "description": "NORMDIST: The NORMDIST function returns the value of the normal distribution function (or normal cumulative distribution function) for a specified value, mean, and standard deviation."
      }
    ]
  },
  {
    "type": "Engineering",
    "name": "GESTEP",
    "syntax": "GESTEP(value, [step])",
    "description": "Returns 1 if the rate is strictly greater than or equal to the provided step value or 0 otherwise. If no step value is provided then the default value of 0 will be used.",
    "link": "https://support.google.com/docs/answer/9061379",
    "notes": [],
    "sampleUsage": [
      "GESTEP(value,[step])",
      "GESTEP(5, 2)\n  GESTEP(2)\n  GESTEP(-0.00001)\n  GESTEP(-6, -1)",
      "value"
    ],
    "related": [],
    "syntaxVariables": []
  },
  {
    "type": "Engineering",
    "name": "HEX2BIN",
    "syntax": "HEX2BIN(signed_hexadecimal_number, [significant_digits])",
    "description": "Converts a signed hexadecimal number to signed binary format.",
    "link": "https://support.google.com/docs/answer/3093139",
    "notes": [
      "As with any hexadecimal value, only the digits 0-9 and the letters A-F are valid. Digits other than these will cause HEX2BIN to return a #NUM! error.\n\n    \n      Hexadecimal digits are not case-sensitive; a-f and A-F are equivalent.",
      "Hexadecimal digits are not case-sensitive; a-f and A-F are equivalent.",
      "If the number of digits required is greater than the specified significant_digits, the #NUM! error is returned.",
      "Ensure that any calculations using the result of HEX2BIN take into account that it is in binary. Results will be silently converted by Google Sheets; thus if cell A2 contains 11111, the binary equivalent of hexadecimal 1F, and B2 contains a formula such as =A2+9, the result will be 11120, which is incorrect in binary calculation."
    ],
    "sampleUsage": ["HEX2BIN(\"f3\",8)", "HEX2BIN(A2)"],
    "related": [
      "OCT2HEX",
      "OCT2DEC",
      "OCT2BIN",
      "HEX2OCT",
      "HEX2DEC",
      "DEC2OCT",
      "DEC2HEX",
      "DEC2BIN",
      "BIN2OCT",
      "BIN2HEX",
      "BIN2DEC"
    ],
    "syntaxVariables": [
      {
        "name": "signed_hexadecimal_number",
        "description": "The signed 40-bit hexadecimal value to be converted to signed binary, provided as a string.\n\n    \n      \n        The most significant bit of signed_hexadecimal_number is the sign bit; that is, negative numbers are represented in two's complement format.\n      \n      \n        For this function, this value has a maximum of 1FF if positive, and a minimum of FFFFFFFE00 if negative.\n      \n      \n        If signed_hexadecimal_number is provided as a valid hexadecimal number, it will automatically be converted to the appropriate string input. For example, HEX2BIN(199) and HEX2BIN(\"199\") yield the same result: 110011001."
      },
      {
        "name": "significant_digits",
        "description": "[ OPTIONAL ] The number of significant digits to ensure in the result.\n\n    \n      \n        If this is greater than the number of significant digits in the result, the result is left-padded with zeros until the total number of digits reaches significant_digits.\n      \n      \n        This value is ignored if the most significant bit of signed_hexadecimal_number is 1; that is, if the expressed signed_hexadecimal_number is greater than or equal to 8000000000."
      }
    ]
  },
  {
    "type": "Engineering",
    "name": "HEX2DEC",
    "syntax": "HEX2DEC(signed_hexadecimal_number)",
    "description": "Converts a signed hexadecimal number to decimal format.",
    "link": "https://support.google.com/docs/answer/3093192",
    "notes": [
      "As with any hexadecimal value, only the digits 0-9 and the letters A-F are valid. Digits other than these will cause HEX2DEC to return a #NUM! error.\n\n    \n      Hexadecimal digits are not case-sensitive; a-f and A-F are equivalent.",
      "Hexadecimal digits are not case-sensitive; a-f and A-F are equivalent."
    ],
    "sampleUsage": ["HEX2DEC(\"f3\")", "HEX2DEC(A2)"],
    "related": [
      "OCT2HEX",
      "OCT2DEC",
      "OCT2BIN",
      "HEX2OCT",
      "HEX2BIN",
      "DEC2OCT",
      "DEC2HEX",
      "DEC2BIN",
      "BIN2OCT",
      "BIN2HEX",
      "BIN2DEC"
    ],
    "syntaxVariables": [
      {
        "name": "signed_hexadecimal_number",
        "description": "The signed 40-bit hexadecimal value to be converted to decimal, provided as a string.\n\n    \n      \n        The most significant bit of signed_hexadecimal_number is the sign bit; that is, negative numbers are represented in two's complement format.\n      \n      \n        For this function, this value has a maximum of 7fffffffff if positive, and a minimum of 8000000000 if negative.\n      \n      \n        If signed_hexadecimal_number is provided as a valid hexadecimal number, it will automatically be converted to the appropriate string input. For example, HEX2DEC(199) and HEX2DEC(\"199\") yield the same result: 409."
      }
    ]
  },
  {
    "type": "Engineering",
    "name": "HEX2OCT",
    "syntax": "HEX2OCT(signed_hexadecimal_number, significant_digits)",
    "description": "Converts a signed hexadecimal number to signed octal format.",
    "link": "https://support.google.com/docs/answer/3093142",
    "notes": [
      "As with any hexadecimal value, only the digits 0-9 and the letters A-F are valid. Digits other than these will cause HEX2OCT to return a #NUM! error.\n\n    \n      Hexadecimal digits are not case-sensitive; a-f and A-F are equivalent.",
      "Hexadecimal digits are not case-sensitive; a-f and A-F are equivalent.",
      "If the number of digits required is greater than the specified significant_digits, the #NUM! error is returned.",
      "Ensure that any calculations using the result of HEX2OCT take into account that it is in octal. Results will be silently converted by Google Sheets; thus if cell A2 contains 111, the octal equivalent of hexadecimal 49, and B2 contains a formula such as =A2+9, the result will be 120, which is incorrect in octal calculation."
    ],
    "sampleUsage": ["HEX2OCT(\"f3\",8)", "HEX2OCT(A2)"],
    "related": [
      "OCT2HEX",
      "OCT2DEC",
      "OCT2BIN",
      "HEX2DEC",
      "HEX2BIN",
      "DEC2OCT",
      "DEC2HEX",
      "DEC2BIN",
      "BIN2OCT",
      "BIN2HEX",
      "BIN2DEC"
    ],
    "syntaxVariables": [
      {
        "name": "signed_hexadecimal_number",
        "description": "The signed 40-bit hexadecimal value to be converted to signed octal, provided as a string.\n\n    \n      \n        The most significant bit of signed_hexadecimal_number is the sign bit; that is, negative numbers are represented in two's complement format.\n      \n      \n        For this function, this value has a maximum of 1FFFFFFF if positive, and a minimum of FFE0000000 if negative.\n      \n      \n        If signed_hexadecimal_number is provided as a valid hexadecimal number, it will automatically be converted to the appropriate string input. For example, HEX2OCT(199) and HEX2OCT(\"199\") yield the same result: 631."
      },
      {
        "name": "significant_digits",
        "description": "[ OPTIONAL ] The number of significant digits to ensure in the result.\n\n    \n      \n        If this is greater than the number of significant digits in the result, the result is left-padded with zeros until the total number of digits reaches significant_digits.\n      \n      \n        This value is ignored if the most significant bit of signed_hexadecimal_number is 1; that is, if the expressed signed_hexadecimal_number is greater than or equal to 8000000000."
      }
    ]
  },
  {
    "type": "Engineering",
    "name": "IMABS",
    "syntax": "IMABS(number)",
    "description": "Returns absolute value of a complex number.",
    "link": "https://support.google.com/docs/answer/7411899",
    "notes": [
      "The absolute value (or modulus) is defined as follows:\n    \n      ​",
      "​"
    ],
    "sampleUsage": ["IMABS(\"3+4i\")", "IMABS(\"6j\")"],
    "related": ["COMPLEX", "IMREAL", "IMAGINARY"],
    "syntaxVariables": [
      {
        "name": "number",
        "description": "The complex number to calculate the absolute value of."
      }
    ]
  },
  {
    "type": "Engineering",
    "name": "IMAGINARY",
    "syntax": "IMAGINARY(complex_number)",
    "description": "Returns the imaginary coefficient of a complex number.",
    "link": "https://support.google.com/docs/answer/7408639",
    "notes": [
      "COMPLEX: The COMPLEX function creates a complex number, given real and imaginary coefficients.",
      "IMREAL: Returns the real coefficient of a complex number."
    ],
    "sampleUsage": ["IMAGINARY(\"4+5i\")", "IMAGINARY(\"2j\")"],
    "related": ["COMPLEX", "IMREAL"],
    "syntaxVariables": [
      {
        "name": "complex_number",
        "description": "The complex number, in the a+bi or a+bj format."
      }
    ]
  },
  {
    "type": "Engineering",
    "name": "IMARGUMENT",
    "syntax": "IMARGUMENT(number)",
    "description": "The IMARGUMENT function returns the angle (also known as the argument or \\theta) of the given complex number in radians.",
    "link": "https://support.google.com/docs/answer/9116360",
    "notes": [],
    "sampleUsage": [
      "=IMARGUMENT(number)",
      "IMARGUMENT(COMPLEX(4, 6)",
      "IMARGUMENT(4)"
    ],
    "related": [],
    "syntaxVariables": []
  },
  {
    "type": "Engineering",
    "name": "IMCONJUGATE",
    "syntax": "IMCONJUGATE(number)",
    "description": "Returns the complex conjugate of a number.",
    "link": "https://support.google.com/docs/answer/7410791",
    "notes": ["The complex conjugate is defined as follows:", { "___raw": "" }],
    "sampleUsage": ["IMCONJUGATE(\"3+4i\")", "IMCONJUGATE(\"-2i\")"],
    "related": ["COMPLEX", "IMREAL", "IMAGINARY"],
    "syntaxVariables": [
      {
        "name": "number",
        "description": "The complex number to calculate the conjugate for."
      }
    ]
  },
  {
    "type": "Engineering",
    "name": "IMCOS",
    "syntax": "IMCOS(number)",
    "description": "The IMCOS function returns the cosine of the given complex number.",
    "link": "https://support.google.com/docs/answer/9116546",
    "notes": [],
    "sampleUsage": ["IMCOS(number)", "IMCOS(COMPLEX(4, 6))", "IMCOS(4)"],
    "related": [],
    "syntaxVariables": []
  },
  {
    "type": "Engineering",
    "name": "IMCOSH",
    "syntax": "IMCOSH(number)",
    "description": "Returns the hyperbolic cosine of the given complex number. For example, a given complex number \"x+yi\" returns \"cosh(x+yi).\"",
    "link": "https://support.google.com/docs/answer/9366233",
    "notes": [],
    "sampleUsage": [
      "IMCOSH(number)",
      "IMCOSH(COMPLEX(4, 6))",
      "IMCOSH(4)",
      "IMCOSH(\"2+3i\")"
    ],
    "related": [],
    "syntaxVariables": []
  },
  {
    "type": "Engineering",
    "name": "IMCOT",
    "syntax": "IMCOT(number)",
    "description": "Returns the cotangent of the given complex number. For example, a given complex number \"x+yi\" returns \"cot(x+yi).\"",
    "link": "https://support.google.com/docs/answer/9366254",
    "notes": [],
    "sampleUsage": [
      "IMCOT(number)",
      "IMCOT(COMPLEX(4,6))",
      "IMCOT(4)",
      "IMCOT(\"2+3i\")"
    ],
    "related": [],
    "syntaxVariables": []
  },
  {
    "type": "Engineering",
    "name": "IMCOTH",
    "syntax": "IMCOTH(number)",
    "description": "Returns the hyperbolic cotangent of the given complex number. For example, a given complex number \"x+yi\" returns \"coth(x+yi).\" Learn more.",
    "link": "https://support.google.com/docs/answer/9366256",
    "notes": [],
    "sampleUsage": [
      "IMCOTH(number)",
      "IMCOTH(COMPLEX(4,6))",
      "IMCOTH(4)",
      "IMCOTH(\"2+3i\")"
    ],
    "related": [],
    "syntaxVariables": []
  },
  {
    "type": "Engineering",
    "name": "IMCSC",
    "syntax": "IMCSC(number)",
    "description": "Returns the cosecant of the given complex number.",
    "link": "https://support.google.com/docs/answer/9199155",
    "notes": [],
    "sampleUsage": ["IMCSC(number)", "IMCSC(COMPLEX(4, 6))", "IMCSC(4)"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "COMPLEX: The COMPLEX function creates a complex number, given real and imaginary coefficients."
      }
    ]
  },
  {
    "type": "Engineering",
    "name": "IMCSCH",
    "syntax": "IMCSCH(number)",
    "description": "Returns the hyperbolic cosecant of the given complex number. For example, a given complex number \"x+yi\" returns \"csch(x+yi).\" Learn more.",
    "link": "https://support.google.com/docs/answer/9366258",
    "notes": [],
    "sampleUsage": [
      "IMCSCH(number)",
      "IMCSCH(COMPLEX(4,6))",
      "IMCSCH(4)",
      "IMCSCH(\"2+3i\")"
    ],
    "related": [],
    "syntaxVariables": []
  },
  {
    "type": "Engineering",
    "name": "IMDIV",
    "syntax": "IMDIV(dividend, divisor)",
    "description": "Returns one complex number divided by another.",
    "link": "https://support.google.com/docs/answer/7411898",
    "notes": [
      "The division between two complex numbers is defined as follows:",
      { "___raw": "" },
      "You can divide two complex numbers only if they have the same suffix (i or j). For example, you can't do IMDIV(\"4+3i\", \"1+2j\")."
    ],
    "sampleUsage": ["IMDIV(\"11+16i\", \"3+2i\")", "IMDIV(\"4+2j\", 2)"],
    "related": ["COMPLEX", "IMREAL", "IMAGINARY", "IMPRODUCT"],
    "syntaxVariables": [
      {
        "name": "dividend",
        "description": "The complex number to be divided."
      },
      { "name": "divisor", "description": "The complex number to divide by." }
    ]
  },
  {
    "type": "Engineering",
    "name": "IMEXP",
    "syntax": "IMEXP(exponent)",
    "description": "Returns Euler's number, e (~2.718) raised to a complex power.",
    "link": "https://support.google.com/docs/answer/9198277",
    "notes": [
      "EXP: Returns Euler's number, e (~2.718) raised to a power.",
      "IMLN: The IMLN function returns the logarithm of a complex number, base e (Euler's number).",
      "COMPLEX: The COMPLEX function creates a complex number, given real and imaginary coefficients.",
      "IMAGINARY: Returns the imaginary coefficient of a complex number."
    ],
    "sampleUsage": ["IMEXP", "IMEXP(\"2+3i\")", "IMEXP(\"2-4j\")"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "The exponential of a complex number is defined as follows:"
      }
    ]
  },
  {
    "type": "Engineering",
    "name": "IMLOG",
    "syntax": "IMLOG(value, base)",
    "description": "Returns the logarithm of a complex number for a specified base. Learn more.",
    "link": "https://support.google.com/docs/answer/9366486",
    "notes": [],
    "sampleUsage": [
      "IMLOG",
      "=IMLOG(value, base)",
      "IMLOG(\"1+i\", 3.5)",
      "IMLOG(COMPLEX(25, 34), 2.3)",
      "IMLOG(100, 10)"
    ],
    "related": [],
    "syntaxVariables": [
      {
        "name": "IMLOG",
        "description": " is equivalent to LOG for all non-complex values that are greater than zero."
      },
      {
        "name": "IMLOG",
        "description": " is equivalent to IMLN given base of e, or EXP(1)."
      },
      {
        "name": "IMLOG",
        "description": " is equivalent to IMLOG10 given base of 10."
      },
      {
        "name": "IMLOG",
        "description": " is equivalent to IMLOG2  given base of 2."
      }
    ]
  },
  {
    "type": "Engineering",
    "name": "IMLOG10",
    "syntax": "IMLOG10(value)",
    "description": "Returns the logarithm of a complex number with base 10. Learn more.",
    "link": "https://support.google.com/docs/answer/9366497",
    "notes": [],
    "sampleUsage": [
      "IMLOG10(value)",
      "IMLOG10(\"1+i\", 3.5)",
      "IMLOG10(COMPLEX(25, 34), 2.3)",
      "IMLOG10(100, 10)",
      "IMLOG10"
    ],
    "related": [],
    "syntaxVariables": []
  },
  {
    "type": "Engineering",
    "name": "IMLOG2",
    "syntax": "IMLOG2(value)",
    "description": "Returns the logarithm of a complex number with base 2. Learn more.",
    "link": "https://support.google.com/docs/answer/9366426",
    "notes": [],
    "sampleUsage": [
      "IMLOG2(value)",
      "IMLOG2(\"1+i\", 3.5)",
      "IMLOG2(COMPLEX(25, 34), 2.3)",
      "IMLOG2(100, 10)",
      "IMLOG2"
    ],
    "related": [],
    "syntaxVariables": []
  },
  {
    "type": "Engineering",
    "name": "IMPRODUCT",
    "syntax": "IMPRODUCT(factor1, [factor2, ...])",
    "description": "Returns the result of multiplying a series of complex numbers together.",
    "link": "https://support.google.com/docs/answer/7409679",
    "notes": [
      "The product of two complex numbers is defined as follows:\n    \n      (a+bi)(c+di) = (ac-bd) + (ad+bc)i",
      "(a+bi)(c+di) = (ac-bd) + (ad+bc)i",
      "You can multiply complex numbers only if they have the same suffix (i or j). For example, you can't do IMPRODUCT(\"4+3i\", \"1+2j\")."
    ],
    "sampleUsage": [
      "IMPRODUCT(A2:A100)",
      "IMPRODUCT(\"1+2i\",3,\"4i\")",
      "IMPRODUCT(\"1+2i\",\"3+5i\",A2:A50)"
    ],
    "related": ["COMPLEX", "IMREAL", "IMAGINARY", "IMDIV", "IMSUM"],
    "syntaxVariables": [
      {
        "name": "factor1",
        "description": "The first complex number or range to calculate for the product."
      },
      {
        "name": "factor2",
        "description": ", ... - [ OPTIONAL ] - More complex numbers to multiply by."
      }
    ]
  },
  {
    "type": "Engineering",
    "name": "IMREAL",
    "syntax": "IMREAL(complex_number)",
    "description": "Returns the real coefficient of a complex number.",
    "link": "https://support.google.com/docs/answer/7408138",
    "notes": [
      "COMPLEX: The COMPLEX function creates a complex number, given real and imaginary coefficients.",
      "IMAGINARY: Returns the imaginary coefficient of a complex number."
    ],
    "sampleUsage": ["IMREAL(\"4+5i\")", "IMREAL(\"4j\")"],
    "related": ["COMPLEX", "IMAGINARY"],
    "syntaxVariables": [
      {
        "name": "complex_number",
        "description": "The complex number, in the a+bi or a+bj format."
      }
    ]
  },
  {
    "type": "Engineering",
    "name": "IMSEC",
    "syntax": "IMSEC(number)",
    "description": "Returns the secant of the given complex number. For example, a given complex number \"x+yi\" returns \"sec(x+yi).\" Learn more.",
    "link": "https://support.google.com/docs/answer/9366728",
    "notes": [],
    "sampleUsage": [
      "IMSEC(number)",
      "IMSEC(COMPLEX(4,6))",
      "IMSEC(4)",
      "IMSEC(\"2+3i\")"
    ],
    "related": [],
    "syntaxVariables": []
  },
  {
    "type": "Engineering",
    "name": "IMSECH",
    "syntax": "IMSECH(number)",
    "description": "Returns the hyperbolic secant of the given complex number. For example, a given complex number \"x+yi\" returns \"sech(x+yi).\" Learn more.",
    "link": "https://support.google.com/docs/answer/9366440",
    "notes": [],
    "sampleUsage": [
      "IMSECH(number)",
      "IMSECH(COMPLEX(4,6))",
      "IMSECH(4)",
      "IMSECH(\"2+3i\")"
    ],
    "related": [],
    "syntaxVariables": []
  },
  {
    "type": "Engineering",
    "name": "IMSIN",
    "syntax": "IMSIN (number)",
    "description": "Returns the sine of the given complex number.",
    "link": "https://support.google.com/docs/answer/9198962",
    "notes": [],
    "sampleUsage": ["IMSIN (number)", "IMSIN(COMPLEX(4,6))", "IMSIN(4)"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "IMCOS:  The IMCOS function returns the cosine of the given complex number."
      },
      {
        "name": "",
        "description": "COMPLEX: The COMPLEX function creates a complex number, given real and imaginary coefficients."
      }
    ]
  },
  {
    "type": "Engineering",
    "name": "IMSINH",
    "syntax": "IMSINH(number)",
    "description": "Returns the hyperbolic sine of the given complex number. For example, a given complex number \"x+yi\" returns \"sinh(x+yi).\" Learn more.",
    "link": "https://support.google.com/docs/answer/9366445",
    "notes": [],
    "sampleUsage": [
      "IMSINH(number)",
      "IMSINH(COMPLEX(4,6))",
      "IMSINH(4)",
      "IMSINH(\"2+3i\")"
    ],
    "related": [],
    "syntaxVariables": []
  },
  {
    "type": "Engineering",
    "name": "IMSUB",
    "syntax": "IMSUB(first_number, second_number)",
    "description": "Returns the difference between two complex numbers.",
    "link": "https://support.google.com/docs/answer/7408393",
    "notes": [
      "The difference between two complex numbers is defined as follows:\n    \n      (a+bi) - (c+di) = (a-c) + (b-d)i",
      "(a+bi) - (c+di) = (a-c) + (b-d)i",
      "You can subtract two complex numbers only if they have the same suffix (i or j). For example, you can't do IMSUB(\"4+3i\", \"1+2j\")."
    ],
    "sampleUsage": ["IMSUB(\"6+5i\", \"2+3i\")"],
    "related": ["COMPLEX", "IMREAL", "IMAGINARY", "IMSUM"],
    "syntaxVariables": [
      {
        "name": "first_number",
        "description": "The complex number to subtract second_number from."
      },
      {
        "name": "second_number",
        "description": "The complex number to subtract from first_number."
      }
    ]
  },
  {
    "type": "Engineering",
    "name": "IMSUM",
    "syntax": "IMSUM(value1, [value2, ...])",
    "description": "Returns the sum of a series of complex numbers.",
    "link": "https://support.google.com/docs/answer/7408295",
    "notes": [
      "The sum of two complex numbers is defined as follows:\n    \n      (a+bi) + (c+di) = (a+c) + (b+d)i",
      "(a+bi) + (c+di) = (a+c) + (b+d)i",
      "You can sum complex numbers only if they have the same suffix (i or j). For example, you can't do IMSUM(\"4+3i\", \"1+2j\")."
    ],
    "sampleUsage": [
      "IMSUM(A2:A100)",
      "IMSUM(\"1+2i\",3,\"4i\")",
      "IMSUM(\"1+2i\",\"3+5i\",A2:A50)"
    ],
    "related": ["COMPLEX", "IMREAL", "IMAGINARY", "IMSUB", "IMPRODUCT"],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The first complex number or range to add together."
      },
      {
        "name": "value2",
        "description": ", ... - [ OPTIONAL ] - More complex numbers or ranges to add to value1."
      }
    ]
  },
  {
    "type": "Engineering",
    "name": "IMTAN",
    "syntax": "IMTAN(number)",
    "description": "Returns the tangent of the given complex number.",
    "link": "https://support.google.com/docs/answer/9203334",
    "notes": [],
    "sampleUsage": ["IMTAN(number)", "IMTAN(COMPLEX(4, 6))", "IMTAN(4)"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "COMPLEX: The COMPLEX function creates a complex number, given real and imaginary coefficients."
      },
      {
        "name": "",
        "description": "IMSIN: The IMSIN function returns the sine of the given complex number."
      },
      {
        "name": "",
        "description": "IMCOS: The IMCOS function returns the cosine of the given complex number."
      }
    ]
  },
  {
    "type": "Engineering",
    "name": "IMTANH",
    "syntax": "IMTANH(number)",
    "description": "Returns the hyperbolic tangent of the given complex number. For example, a given complex number \"x+yi\" returns \"tanh(x+yi).\" Learn more.",
    "link": "https://support.google.com/docs/answer/9366655",
    "notes": [],
    "sampleUsage": [
      "IMTANH(number)",
      "IMTANH(COMPLEX(4,6))",
      "IMTANH(4)",
      "IMTANH(\"2+3i\")"
    ],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "IMTAN:  The IMTAN function returns the tangent of the given complex number."
      },
      {
        "name": "",
        "description": "COMPLEX: The COMPLEX function creates a complex number, given real and imaginary coefficients."
      }
    ]
  },
  {
    "type": "Engineering",
    "name": "OCT2BIN",
    "syntax": "OCT2BIN(signed_octal_number, [significant_digits])",
    "description": "Converts a signed octal number to signed binary format.",
    "link": "https://support.google.com/docs/answer/3093144",
    "notes": [
      "As with any octal value, only the digits 0-7 are valid. Digits outside of this will cause OCT2BIN to return a #NUM! error.",
      "If the number of digits required is greater than the specified significant_digits, the #NUM! error is returned."
    ],
    "sampleUsage": ["OCT2BIN(37,8)", "OCT2BIN(A2)"],
    "related": [
      "OCT2HEX",
      "OCT2DEC",
      "HEX2OCT",
      "HEX2DEC",
      "HEX2BIN",
      "DEC2OCT",
      "DEC2HEX",
      "DEC2BIN",
      "BIN2OCT",
      "BIN2HEX",
      "BIN2DEC"
    ],
    "syntaxVariables": [
      {
        "name": "signed_octal_number",
        "description": "The signed 30-bit octal value to be converted to signed binary, provided as a string.\n\n    \n      \n        The most significant bit of signed_octal_number is the sign bit; that is, negative numbers are represented in two's complement format.\n      \n      \n        For this function, this value has a maximum of 777 if positive, and a minimum of 7777777000 if negative.\n      \n      \n        If signed_octal_number is provided as a valid octal number, it will automatically be converted to the appropriate string input. For example, OCT2BIN(177) and OCT2BIN(\"177\") yield the same result: 1111111."
      },
      {
        "name": "significant_digits",
        "description": "[ OPTIONAL ] The number of significant digits to ensure in the result.\n\n    \n      \n        If this is greater than the number of significant digits in the result, the result is left-padded with zeros until the total number of digits reaches significant_digits.\n      \n      \n        This value is ignored if the most significant bit of signed_octal_number is 1; that is, if the expressed signed_octal_number is greater than or equal to 4000000000."
      }
    ]
  },
  {
    "type": "Engineering",
    "name": "OCT2DEC",
    "syntax": "OCT2DEC(signed_octal_number)",
    "description": "Converts a signed octal number to decimal format.",
    "link": "https://support.google.com/docs/answer/3093146",
    "notes": [
      "As with any octal value, only the digits 0-7 are valid. Digits outside of this will cause OCT2DEC to return a #NUM! error."
    ],
    "sampleUsage": ["OCT2DEC(37)", "OCT2DEC(A2)"],
    "related": [
      "OCT2BIN",
      "HEX2OCT",
      "HEX2DEC",
      "HEX2BIN",
      "DEC2OCT",
      "DEC2HEX",
      "DEC2BIN",
      "BIN2OCT",
      "BIN2HEX",
      "BIN2DEC"
    ],
    "syntaxVariables": [
      {
        "name": "signed_octal_number",
        "description": "The signed 30-bit octal value to be converted to decimal, provided as a string.\n\n    \n      \n        The most significant bit of signed_octal_number is the sign bit; that is, negative numbers are represented in two's complement format.\n      \n      \n        For this function, this value has a maximum of 3777777777 if positive, and a minimum of 4000000000 if negative.\n      \n      \n        If signed_octal_number is provided as a valid octal number, it will automatically be converted to the appropriate string input. For example, OCT2DEC(177) and OCT2DEC(\"177\") yield the same result: 127."
      }
    ]
  },
  {
    "type": "Engineering",
    "name": "OCT2HEX",
    "syntax": "OCT2HEX(signed_octal_number, [significant_digits])",
    "description": "Converts a signed octal number to signed hexadecimal format.",
    "link": "https://support.google.com/docs/answer/3093147",
    "notes": [
      "As with any octal value, only the digits 0-7 are valid. Digits outside of this will cause OCT2HEX to return a #NUM! error.",
      "If the number of digits required is greater than the specified significant_digits, the #NUM! error is returned."
    ],
    "sampleUsage": ["OCT2HEX(37,8)", "OCT2HEX(A2)"],
    "related": [
      "OCT2DEC",
      "OCT2BIN",
      "HEX2OCT",
      "HEX2DEC",
      "HEX2BIN",
      "DEC2OCT",
      "DEC2HEX",
      "DEC2BIN",
      "BIN2OCT",
      "BIN2HEX",
      "BIN2DEC"
    ],
    "syntaxVariables": [
      {
        "name": "signed_octal_number",
        "description": "The signed 30-bit octal value to be converted to signed hexadecimal, provided as a string.\n\n    \n      \n        The most significant bit of signed_octal_number is the sign bit; that is, negative numbers are represented in two's complement format.\n      \n      \n        For this function, this value has a maximum of 3777777777 if positive, and a minimum of 4000000000 if negative.\n      \n      \n        If signed_octal_number is provided as a valid octal number, it will automatically be converted to the appropriate string input. For example, OCT2HEX(177) and OCT2HEX(\"177\") yield the same result: 7F."
      },
      {
        "name": "significant_digits",
        "description": "[ OPTIONAL ] - The number of significant digits to ensure in the result.\n\n    \n      \n        If this is greater than the number of significant digits in the result, the result is left-padded with zeros until the total number of digits reaches significant_digits.\n      \n      \n        This value is ignored if the most significant bit of signed_octal_number is 1; that is, if the expressed signed_octal_number is greater than or equal to 4000000000."
      }
    ]
  },
  {
    "type": "Filter",
    "name": "FILTER",
    "syntax": "FILTER(range, condition1, [condition2])",
    "description": "Returns a filtered version of the source range, returning only rows or columns which meet the specified conditions.",
    "link": "https://support.google.com/docs/answer/3093197",
    "notes": [
      "FILTER can only be used to filter rows or columns at one time. In order to filter both rows and columns, use the return value of one FILTER function as range in another.",
      "If FILTER finds no values which satisfy the provided conditions, #N/A will be returned."
    ],
    "sampleUsage": [
      "FILTER(A2:B26, A2:A26 > 5, D2:D26 < 10)",
      "FILTER(A2:C5, {TRUE; TRUE; FALSE; TRUE})",
      "FILTER(A2:B10, NOT(ISBLANK(A2:A10)))"
    ],
    "related": ["UNIQUE"],
    "syntaxVariables": [
      { "name": "range", "description": "The data to be filtered." },
      {
        "name": "condition1",
        "description": "A column or row containing true or false values corresponding to the first column or row of range, or an array formula evaluating to true or false."
      },
      {
        "name": "condition2 ...",
        "description": "[ OPTIONAL ] - Additional rows or columns containing boolean values TRUE or FALSE indicating whether the corresponding row or column in range should pass through FILTER. Can also contain array formula expressions which evaluate to such rows or columns. All conditions must be of the same type (row or column). Mixing row conditions and column conditions is not permitted.\n\n    \n      condition arguments must have exactly the same length as range."
      }
    ]
  },
  {
    "type": "Filter",
    "name": "SORT",
    "syntax": "SORT(range, sort_column, is_ascending, [sort_column2], [is_ascending2])",
    "description": "Sorts the rows of a given array or range by the values in one or more columns.",
    "link": "https://support.google.com/docs/answer/3093150",
    "notes": [
      "range is sorted only by the specified columns, other columns are returned in the order they originally appear."
    ],
    "sampleUsage": [
      "SORT(A2:B26, 1, TRUE)",
      "SORT({1, 2; 3, 4; 5, 6}, 2, FALSE)",
      "SORT(A2:B26, C2:C26, TRUE)"
    ],
    "related": ["FILTER"],
    "syntaxVariables": [
      { "name": "range", "description": "The data to be sorted." },
      {
        "name": "sort_column",
        "description": "The index of the column in range or a range outside of range containing the values by which to sort.\n\n    \n      A range specified as a sort_column must be a single column with the same number of rows as range."
      },
      {
        "name": "is_ascending",
        "description": "TRUE or FALSE indicating whether to sort sort_column in ascending order. FALSE sorts in descending order."
      },
      {
        "name": "sort_column2, is_ascending2 ...",
        "description": "\n\n    \n      [ OPTIONAL ] - Additional columns and sort order flags beyond the first, in order of precedence."
      }
    ]
  },
  {
    "type": "Filter",
    "name": "SORTN",
    "syntax": "SORTN(range, [n], [display_ties_mode], [sort_column1, is_ascending1], ...)",
    "description": "Returns the first n items in a data set after performing a sort.",
    "link": "https://support.google.com/docs/answer/7354624",
    "notes": [
      "range is sorted only by the specified columns. Other columns are returned in the order they originally appear.",
      "If sort_column1 and is_ascending1 aren't included, the sort is performed on the lowest-index column in range, with subsequent columns used to sort if there are ties."
    ],
    "sampleUsage": [
      "SORTN(A1:A10, 2)",
      "SORTN(A2:C20, 2, 2, B2:B20, TRUE)",
      "SORTN(A2:C20, 2, 3, B2:B20, TRUE, 3, FALSE)"
    ],
    "related": ["SORT", "FILTER", "MAX", "INDEX", "LARGE"],
    "syntaxVariables": [
      {
        "name": "range",
        "description": "The data to be sorted to find the first n items."
      },
      {
        "name": "n",
        "description": "[OPTIONAL - 1 by default] The number of items to return. Must be greater than 0."
      },
      {
        "name": "display_ties_mode",
        "description": "[OPTIONAL - 0 by default] A number representing the way to display ties.\n    \n      0: Show at most the first n rows in the sorted range.\n      1: Show at most the first n rows, plus any additional rows that are identical to the nth row.\n      2: Show at most the first n rows after removing duplicate rows.\n      3: Show at most the first n unique rows, but show every duplicate of these rows."
      },
      {
        "name": "sort_column1",
        "description": "[OPTIONAL] - The index of the column in range or a range outside of range containing the values to sort by. A range specified as a sort_column1 must be a single column with the same number of rows as range."
      },
      {
        "name": "is_ascending1",
        "description": "[OPTIONAL] - TRUE or FALSE indicates how to sort sort_column1. TRUE sorts in ascending order. FALSE sorts in descending order."
      },
      {
        "name": "sort_column2, is_ascending2, ...",
        "description": "[OPTIONAL] - Additional columns and sort order flags used if a tie happens, in order of precedence."
      }
    ]
  },
  {
    "type": "Filter",
    "name": "UNIQUE",
    "syntax": "UNIQUE(range)",
    "description": "Returns unique rows in the provided source range, discarding duplicates. Rows are returned in the order in which they first appear in the source range.",
    "link": "https://support.google.com/docs/answer/3093198",
    "notes": [
      "If rows are returned which appear to be duplicates, ensure that cells including text do not have differing hidden text such as trailing spaces.",
      "Ensure that numeric values are formatted in the same way - percentages as percentages, currency values as currency values, etc."
    ],
    "sampleUsage": ["UNIQUE(A2:B26)", "UNIQUE({1, 2; 3, 4; 5, 6})"],
    "related": ["SORT", "FILTER"],
    "syntaxVariables": [
      {
        "name": "range",
        "description": "The data to filter by unique entries."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "ACCRINT",
    "syntax": "ACCRINT(issue, first_payment, settlement, rate, redemption, frequency, [day_count_convention])",
    "description": "Calculates the accrued interest of a security that has periodic payments.",
    "link": "https://support.google.com/docs/answer/3093200",
    "notes": [
      "issue, first_payment and settlement should be entered using DATE, TO_DATE or other date parsing functions rather than by entering text."
    ],
    "sampleUsage": [
      "ACCRINT(DATE(2010,01,01),DATE(2010,02,01),DATE(2012,12,31),0.05,100,4)",
      "ACCRINT(A2,B2,C2,D2,E2,F2,2)"
    ],
    "related": [
      "YIELDDISC",
      "YIELD",
      "RECEIVED",
      "PRICEMAT",
      "PRICEDISC",
      "PRICE",
      "DURATION",
      "DISC",
      "COUPPCD",
      "COUPNUM",
      "COUPNCD",
      "COUPDAYSNC",
      "COUPDAYBS",
      "COUPDAYS",
      "ACCRINTM"
    ],
    "syntaxVariables": [
      {
        "name": "issue",
        "description": "The date the security was initially issued."
      },
      {
        "name": "first_payment",
        "description": "The first date interest will be paid."
      },
      {
        "name": "settlement",
        "description": "The settlement date of the security, the date after issuance when the security is delivered to the buyer.\n\n    \n      settlement is the maturity date of the security if it is held until maturity rather than sold."
      },
      { "name": "rate", "description": "The annualized rate of interest." },
      {
        "name": "redemption",
        "description": "The redemption amount per 100 face value, or par."
      },
      {
        "name": "frequency",
        "description": "The number of interest or coupon payments per year (1, 2, or 4)."
      },
      {
        "name": "day_count_convention",
        "description": "[ OPTIONAL - 0 by default ] - An indicator of what day count method to use.\n\n    \n      \n        0 indicates US (NASD) 30/360 - This assumes 30 day months and 360 day years as per the National Association of Securities Dealers standard, and performs specific adjustments to entered dates which fall at the end of months.\n      \n      \n        1 indicates Actual/Actual - This calculates based upon the actual number of days between the specified dates, and the actual number of days in the intervening years. Used for US Treasury Bonds and Bills, but also the most relevant for non-financial use.\n      \n      \n        2 indicates Actual/360 - This calculates based on the actual number of days between the speficied dates, but assumes a 360 day year.\n      \n      \n        3 indicates Actual/365 - This calculates based on the actual number of days between the specified dates, but assumes a 365 day year.\n      \n      \n        4 indicates European 30/360 - Similar to 0, this calculates based on a 30 day month and 360 day year, but adjusts end-of-month dates according to European financial conventions."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "ACCRINTM",
    "syntax": "ACCRINTM(issue, maturity, rate, [redemption], [day_count_convention])",
    "description": "Calculates the accrued interest of a security that pays interest at maturity.",
    "link": "https://support.google.com/docs/answer/3093202",
    "notes": [
      "issue and maturity should be entered using DATE, TO_DATE or other date parsing functions rather than by entering text."
    ],
    "sampleUsage": [
      "ACCRINTM(DATE(1969,12,31),DATE(1999,12,31),0.05,100,0)",
      "ACCRINTM(A2,B2,C2,D2,2)"
    ],
    "related": [
      "YIELDDISC",
      "YIELD",
      "RECEIVED",
      "PRICEMAT",
      "PRICEDISC",
      "PRICE",
      "DURATION",
      "DISC",
      "COUPPCD",
      "COUPNUM",
      "COUPNCD",
      "COUPDAYSNC",
      "COUPDAYS",
      "COUPDAYBS",
      "ACCRINTM"
    ],
    "syntaxVariables": [
      {
        "name": "issue",
        "description": "The date the security was initially issued."
      },
      {
        "name": "maturity",
        "description": "The maturity date of the security."
      },
      { "name": "rate", "description": "The annualized rate of interest." },
      {
        "name": "redemption",
        "description": "[OPTIONAL] - The redemption value of the security."
      },
      {
        "name": "day_count_convention",
        "description": "[ OPTIONAL - 0 by default ] - An indicator of what day count method to use.\n\n    \n      \n        0 indicates US (NASD) 30/360 - This assumes 30 day months and 360 day years as per the National Association of Securities Dealers standard, and performs specific adjustments to entered dates which fall at the end of months.\n      \n      \n        1 indicates Actual/Actual - This calculates based upon the actual number of days between the specified dates, and the actual number of days in the intervening years. Used for US Treasury Bonds and Bills, but also the most relevant for non-financial use.\n      \n      \n        2 indicates Actual/360 - This calculates based on the actual number of days between the speficied dates, but assumes a 360 day year.\n      \n      \n        3 indicates Actual/365 - This calculates based on the actual number of days between the specified dates, but assumes a 365 day year.\n      \n      \n        4 indicates European 30/360 - Similar to 0, this calculates based on a 30 day month and 360 day year, but adjusts end-of-month dates according to European financial conventions."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "AMORLINC",
    "syntax": "AMORLINC(cost, purchase_date, first_period_end, salvage, period, rate, [basis])",
    "description": "Returns the depreciation for an accounting period, or the prorated depreciation if the asset was purchased in the middle of a period.",
    "link": "https://support.google.com/docs/answer/9083932",
    "notes": [],
    "sampleUsage": [
      "AMORLINC(cost, purchase_date, first_period_end, salvage, period, rate, [basis])",
      "AMORLINC(1000, \"7/20/1969\", \"8/20/1969\", 100, 6, 15%)",
      "AMORLINC(1234.56, DATE(1969, 7, 20), DATE(1969, 8, 20), 123.45, 6.5, 0.15, 1)"
    ],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "DDB: The DDB function calculates the depreciation of an asset for a specified period using the double-declining balance method."
      },
      {
        "name": "",
        "description": "VDB: The VDB function returns the depreciation of an asset for a particular period (or partial period)."
      },
      {
        "name": "",
        "description": "DB: The DB function calculates the depreciation of an asset for a specified period using the arithmetic declining balance method."
      },
      {
        "name": "",
        "description": "SLN: The SLN function calculates the depreciation of an asset for one period using the straight-line method."
      },
      {
        "name": "",
        "description": "SYD: The SYD function calculates the depreciation of an asset for a specified period using the sum of years digits method."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "COUPDAYBS",
    "syntax": "COUPDAYBS(settlement, maturity, frequency, [day_count_convention])",
    "description": "Calculates the number of days from the first coupon, or interest payment, until settlement.",
    "link": "https://support.google.com/docs/answer/3093154",
    "notes": [
      "settlement and maturity should be entered using DATE, TO_DATE or other date parsing functions rather than by entering text."
    ],
    "sampleUsage": [
      "COUPDAYBS(DATE(2010,02,01),DATE(2019,12,31),4)",
      "COUPDAYBS(A2,A3,A4,1)"
    ],
    "related": [
      "YIELDDISC",
      "YIELD",
      "RECEIVED",
      "PRICEMAT",
      "PRICEDISC",
      "PRICE",
      "MDURATION",
      "DURATION",
      "DISC",
      "COUPPCD",
      "COUPNUM",
      "COUPNCD",
      "COUPDAYSNC",
      "COUPDAYS",
      "ACCRINTM",
      "ACCRINT"
    ],
    "syntaxVariables": [
      {
        "name": "settlement",
        "description": "The settlement date of the security, the date after issuance when the security is delivered to the buyer."
      },
      {
        "name": "maturity",
        "description": "The maturity or end date of the security, when it can be redeemed at face or par value."
      },
      {
        "name": "frequency",
        "description": "The number of interest or coupon payments per year (1, 2, or 4)."
      },
      {
        "name": "day_count_convention",
        "description": "[ OPTIONAL - 0 by default ] - An indicator of what day count method to use.\n\n    \n      \n        0 indicates US (NASD) 30/360 - This assumes 30 day months and 360 day years as per the National Association of Securities Dealers standard, and performs specific adjustments to entered dates which fall at the end of months.\n      \n      \n        1 indicates Actual/Actual - This calculates based upon the actual number of days between the specified dates, and the actual number of days in the intervening years. Used for US Treasury Bonds and Bills, but also the most relevant for non-financial use.\n      \n      \n        2 indicates Actual/360 - This calculates based on the actual number of days between the specified dates, but assumes a 360 day year.\n      \n      \n        3 indicates Actual/365 - This calculates based on the actual number of days between the specified dates, but assumes a 365 day year.\n      \n      \n        4 indicates European 30/360 - Similar to 0, this calculates based on a 30 day month and 360 day year, but adjusts end-of-month dates according to European financial conventions."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "COUPDAYS",
    "syntax": "COUPDAYS(settlement, maturity, frequency, [day_count_convention])",
    "description": "Calculates the number of days in the coupon, or interest payment, period that contains the specified settlement date.",
    "link": "https://support.google.com/docs/answer/3093204",
    "notes": [
      "settlement and maturity should be entered using DATE, TO_DATE or other date parsing functions rather than by entering text."
    ],
    "sampleUsage": [
      "COUPDAYS(DATE(2010,02,01),DATE(2019,12,31),4)",
      "COUPDAYS(A2,A3,A4,1)"
    ],
    "related": [
      "YIELDDISC",
      "YIELD",
      "RECEIVED",
      "PRICEMAT",
      "PRICEDISC",
      "PRICE",
      "MDURATION",
      "DURATION",
      "DISC",
      "COUPPCD",
      "COUPNUM",
      "COUPNCD",
      "COUPDAYSNC",
      "COUPDAYBS",
      "ACCRINTM",
      "ACCRINT"
    ],
    "syntaxVariables": [
      {
        "name": "settlement",
        "description": "The settlement date of the security, the date after issuance when the security is delivered to the buyer."
      },
      {
        "name": "maturity",
        "description": "The maturity or end date of the security, when it can be redeemed at face or par value."
      },
      {
        "name": "frequency",
        "description": "The number of interest or coupon payments per year (1, 2, or 4)."
      },
      {
        "name": "day_count_convention",
        "description": "[ OPTIONAL - 0 by default ] - An indicator of what day count method to use.\n\n    \n      \n        0 indicates US (NASD) 30/360 - This assumes 30 day months and 360 day years as per the National Association of Securities Dealers standard, and performs specific adjustments to entered dates which fall at the end of months.\n      \n      \n        1 indicates Actual/Actual - This calculates based upon the actual number of days between the specified dates, and the actual number of days in the intervening years. Used for US Treasury Bonds and Bills, but also the most relevant for non-financial use.\n      \n      \n        2 indicates Actual/360 - This calculates based on the actual number of days between the specified dates, but assumes a 360 day year.\n      \n      \n        3 indicates Actual/365 - This calculates based on the actual number of days between the specified dates, but assumes a 365 day year.\n      \n      \n        4 indicates European 30/360 - Similar to 0, this calculates based on a 30 day month and 360 day year, but adjusts end-of-month dates according to European financial conventions."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "COUPDAYSNC",
    "syntax": "COUPDAYSNC(settlement, maturity, frequency, [day_count_convention])",
    "description": "Calculates the number of days from the settlement date until the next coupon, or interest payment.",
    "link": "https://support.google.com/docs/answer/3093156",
    "notes": [
      "settlement and maturity should be entered using DATE, TO_DATE or other date parsing functions rather than by entering text."
    ],
    "sampleUsage": [
      "COUPDAYSNC(DATE(2010,02,01),DATE(2019,12,31),4)",
      "COUPDAYSNC(A2,A3,A4,1)"
    ],
    "related": [
      "YIELDDISC",
      "YIELD",
      "RECEIVED",
      "PRICEMAT",
      "PRICEDISC",
      "PRICE",
      "MDURATION",
      "DURATION",
      "DISC",
      "COUPPCD",
      "COUPNUM",
      "COUPNCD",
      "COUPDAYS",
      "COUPDAYBS",
      "ACCRINTM",
      "ACCRINT"
    ],
    "syntaxVariables": [
      {
        "name": "settlement",
        "description": "The settlement date of the security, the date after issuance when the security is delivered to the buyer."
      },
      {
        "name": "maturity",
        "description": "The maturity or end date of the security, when it can be redeemed at face or par value."
      },
      {
        "name": "frequency",
        "description": "The number of interest or coupon payments per year (1, 2, or 4)."
      },
      {
        "name": "day_count_convention",
        "description": "[ OPTIONAL - 0 by default ] - An indicator of what day count method to use.\n\n    \n      \n        0 indicates US (NASD) 30/360 - This assumes 30 day months and 360 day years as per the National Association of Securities Dealers standard, and performs specific adjustments to entered dates which fall at the end of months.\n      \n      \n        1 indicates Actual/Actual - This calculates based upon the actual number of days between the specified dates, and the actual number of days in the intervening years. Used for US Treasury Bonds and Bills, but also the most relevant for non-financial use.\n      \n      \n        2 indicates Actual/360 - This calculates based on the actual number of days between the specified dates, but assumes a 360 day year.\n      \n      \n        3 indicates Actual/365 - This calculates based on the actual number of days between the specified dates, but assumes a 365 day year.\n      \n      \n        4 indicates European 30/360 - Similar to 0, this calculates based on a 30 day month and 360 day year, but adjusts end-of-month dates according to European financial conventions."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "COUPNCD",
    "syntax": "COUPNCD(settlement, maturity, frequency, [day_count_convention])",
    "description": "Calculates next coupon, or interest payment, date after the settlement date.",
    "link": "https://support.google.com/docs/answer/3093157",
    "notes": [
      "settlement and maturity should be entered using DATE, TO_DATE or other date parsing functions rather than by entering text."
    ],
    "sampleUsage": [
      "COUPNCD(DATE(2010,02,01),DATE(2019,12,31),4)",
      "COUPNCD(A2,A3,A4,1)"
    ],
    "related": [
      "YIELDDISC",
      "YIELD",
      "RECEIVED",
      "PRICEMAT",
      "PRICEDISC",
      "PRICE",
      "MDURATION",
      "DURATION",
      "DISC",
      "COUPPCD",
      "COUPNUM",
      "COUPDAYSNC",
      "COUPDAYS",
      "COUPDAYBS",
      "ACCRINTM",
      "ACCRINT"
    ],
    "syntaxVariables": [
      {
        "name": "settlement",
        "description": "The settlement date of the security, the date after issuance when the security is delivered to the buyer."
      },
      {
        "name": "maturity",
        "description": "The maturity or end date of the security, when it can be redeemed at face or par value."
      },
      {
        "name": "frequency",
        "description": "The number of interest or coupon payments per year (1, 2, or 4)."
      },
      {
        "name": "day_count_convention",
        "description": "[ OPTIONAL - 0 by default ] - An indicator of what day count method to use.\n\n    \n      \n        0 indicates US (NASD) 30/360 - This assumes 30 day months and 360 day years as per the National Association of Securities Dealers standard, and performs specific adjustments to entered dates which fall at the end of months.\n      \n      \n        1 indicates Actual/Actual - This calculates based upon the actual number of days between the specified dates, and the actual number of days in the intervening years. Used for US Treasury Bonds and Bills, but also the most relevant for non-financial use.\n      \n      \n        2 indicates Actual/360 - This calculates based on the actual number of days between the specified dates, but assumes a 360 day year.\n      \n      \n        3 indicates Actual/365 - This calculates based on the actual number of days between the specified dates, but assumes a 365 day year.\n      \n      \n        4 indicates European 30/360 - Similar to 0, this calculates based on a 30 day month and 360 day year, but adjusts end-of-month dates according to European financial conventions."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "COUPNUM",
    "syntax": "COUPNUM(settlement, maturity, frequency, [day_count_convention])",
    "description": "Calculates the number of coupons, or interest payments, between the settlement date and the maturity date of the investment.",
    "link": "https://support.google.com/docs/answer/3093208",
    "notes": [
      "settlement and maturity should be entered using DATE, TO_DATE or other date parsing functions rather than by entering text."
    ],
    "sampleUsage": [
      "COUPNUM(DATE(2010,02,01),DATE(2019,12,31),4)",
      "COUPNUM(A2,A3,A4,1)"
    ],
    "related": [
      "YIELDDISC",
      "YIELD",
      "RECEIVED",
      "PRICEMAT",
      "PRICEDISC",
      "PRICE",
      "MDURATION",
      "DURATION",
      "DISC",
      "COUPPCD",
      "COUPNCD",
      "COUPDAYSNC",
      "COUPDAYS",
      "COUPDAYBS",
      "ACCRINTM",
      "ACCRINT"
    ],
    "syntaxVariables": [
      {
        "name": "settlement",
        "description": "The settlement date of the security, the date after issuance when the security is delivered to the buyer."
      },
      {
        "name": "maturity",
        "description": "The maturity or end date of the security, when it can be redeemed at face or par value."
      },
      {
        "name": "frequency",
        "description": "The number of interest or coupon payments per year (1, 2, or 4)."
      },
      {
        "name": "day_count_convention",
        "description": "[ OPTIONAL - 0 by default ] - An indicator of what day count method to use.\n\n    \n      \n        0 indicates US (NASD) 30/360 - This assumes 30 day months and 360 day years as per the National Association of Securities Dealers standard, and performs specific adjustments to entered dates which fall at the end of months.\n      \n      \n        1 indicates Actual/Actual - This calculates based upon the actual number of days between the specified dates, and the actual number of days in the intervening years. Used for US Treasury Bonds and Bills, but also the most relevant for non-financial use.\n      \n      \n        2 indicates Actual/360 - This calculates based on the actual number of days between the specified dates, but assumes a 360 day year.\n      \n      \n        3 indicates Actual/365 - This calculates based on the actual number of days between the specified dates, but assumes a 365 day year.\n      \n      \n        4 indicates European 30/360 - Similar to 0, this calculates based on a 30 day month and 360 day year, but adjusts end-of-month dates according to European financial conventions."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "COUPPCD",
    "syntax": "COUPPCD(settlement, maturity, frequency, [day_count_convention])",
    "description": "Calculates last coupon, or interest payment, date before the settlement date.",
    "link": "https://support.google.com/docs/answer/3093210",
    "notes": [
      "settlement and maturity should be entered using DATE, TO_DATE or other date parsing functions rather than by entering text."
    ],
    "sampleUsage": [
      "COUPPCD(DATE(2010,02,01),DATE(2019,12,31),4)",
      "COUPPCD(A2,A3,A4,1)"
    ],
    "related": [
      "YIELDDISC",
      "YIELD",
      "RECEIVED",
      "PRICEMAT",
      "PRICEDISC",
      "PRICE",
      "MDURATION",
      "DURATION",
      "DISC",
      "COUPPCD",
      "COUPNUM",
      "COUPDAYSNC",
      "COUPDAYS",
      "COUPDAYBS",
      "ACCRINTM",
      "ACCRINT"
    ],
    "syntaxVariables": [
      {
        "name": "settlement",
        "description": "The settlement date of the security, the date after issuance when the security is delivered to the buyer."
      },
      {
        "name": "maturity",
        "description": "The maturity or end date of the security, when it can be redeemed at face or par value."
      },
      {
        "name": "frequency",
        "description": "The number of interest or coupon payments per year (1, 2, or 4)."
      },
      {
        "name": "day_count_convention",
        "description": "[ OPTIONAL - 0 by default ] - An indicator of what day count method to use.\n\n    \n      \n        0 indicates US (NASD) 30/360 - This assumes 30 day months and 360 day years as per the National Association of Securities Dealers standard, and performs specific adjustments to entered dates which fall at the end of months.\n      \n      \n        1 indicates Actual/Actual - This calculates based upon the actual number of days between the specified dates, and the actual number of days in the intervening years. Used for US Treasury Bonds and Bills, but also the most relevant for non-financial use.\n      \n      \n        2 indicates Actual/360 - This calculates based on the actual number of days between the specified dates, but assumes a 360 day year.\n      \n      \n        3 indicates Actual/365 - This calculates based on the actual number of days between the specified dates, but assumes a 365 day year.\n      \n      \n        4 indicates European 30/360 - Similar to 0, this calculates based on a 30 day month and 360 day year, but adjusts end-of-month dates according to European financial conventions."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "CUMIPMT",
    "syntax": "CUMIPMT(rate, number_of_periods, present_value, first_period, last_period, end_or_beginning)",
    "description": "Calculates the cumulative interest over a range of payment periods for an investment based on constant-amount periodic payments and a constant interest rate.",
    "link": "https://support.google.com/docs/answer/3093211",
    "notes": [
      "Ensure that consistent units are used for rate and number_of_periods. For example, a car loan for 36 months may be paid monthly, in which case the annual percentage rate should be divided by 12 and the number of payments is 36. On the other hand, a different type of loan of the same length might be paid quarterly, in which case the annual percentage rate should be divided by 4 and the number of payments would be 12."
    ],
    "sampleUsage": ["CUMIPMT(0.12,12,100,1,5,0)", "CUMIPMT(A2,B2,C2,D2,E2,1)"],
    "related": [
      "RATE",
      "PV",
      "PMT",
      "NPER",
      "IPMT",
      "FVSCHEDULE",
      "FV",
      "CUMPRINC"
    ],
    "syntaxVariables": [
      { "name": "rate", "description": "The interest rate." },
      {
        "name": "number_of_periods",
        "description": "The number of payments to be made."
      },
      {
        "name": "present_value",
        "description": "The current value of the annuity."
      },
      {
        "name": "first_period",
        "description": "The number of the payment period to begin the cumulative calculation.\n\n    \n      first_period must be greater than or equal to 1."
      },
      {
        "name": "last_period",
        "description": "The number of the payment period to end the cumulative calculation.\n\n    \n      last_period must be greater than first_period."
      },
      {
        "name": "end_or_beginning",
        "description": "Whether payments are due at the end (0) or beginning (1) of each period."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "CUMPRINC",
    "syntax": "CUMPRINC(rate, number_of_periods, present_value, first_period, last_period, end_or_beginning)",
    "description": "Calculates the cumulative principal paid over a range of payment periods for an investment based on constant-amount periodic payments and a constant interest rate.",
    "link": "https://support.google.com/docs/answer/3093159",
    "notes": [
      "Ensure that consistent units are used for rate and number_of_periods. For example, a car loan for 36 months may be paid monthly, in which case the annual percentage rate should be divided by 12 and the number of payments is 36. On the other hand, a different type of loan of the same length might be paid quarterly, in which case the annual percentage rate should be divided by 4 and the number of payments would be 12."
    ],
    "sampleUsage": [
      "CUMPRINC(0.12,12,100,1,5,0)",
      "CUMPRINC(A2,B2,C2,D2,E2,1)"
    ],
    "related": [
      "RATE",
      "PV",
      "PMT",
      "NPER",
      "IPMT",
      "FVSCHEDULE",
      "FV",
      "CUMIPMT"
    ],
    "syntaxVariables": [
      { "name": "rate", "description": "The interest rate." },
      {
        "name": "number_of_periods",
        "description": "The number of payments to be made."
      },
      {
        "name": "present_value",
        "description": "The current value of the annuity."
      },
      {
        "name": "first_period",
        "description": "The number of the payment period to begin the cumulative calculation.\n\n    \n      first_period must be greater than or equal to 1."
      },
      {
        "name": "last_period",
        "description": "The number of the payment period to end the cumulative calculation.\n\n    \n      last_period must be greater than first_period."
      },
      {
        "name": "end_or_beginning",
        "description": "Whether payments are due at the end (0) or beginning (1) of each period."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "DB",
    "syntax": "DB(cost, salvage, life, period, [month])",
    "description": "Calculates the depreciation of an asset for a specified period using the arithmetic declining balance method.",
    "link": "https://support.google.com/docs/answer/3093162",
    "notes": ["life and period must be measured in the same units."],
    "sampleUsage": ["DB(100,50,10,2)", "DB(A2,A3,A4,A5,10)"],
    "related": ["SYD", "SLN", "DDB"],
    "syntaxVariables": [
      { "name": "cost", "description": "The initial cost of the asset." },
      {
        "name": "salvage",
        "description": "The value of the asset at the end of depreciation."
      },
      {
        "name": "life",
        "description": "The number of periods over which the asset is depreciated."
      },
      {
        "name": "period",
        "description": "The single period within life for which to calculate depreciation."
      },
      {
        "name": "month",
        "description": "[ OPTIONAL - 12 by default ] - The number of months in the first year of depreciation."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "DDB",
    "syntax": "DDB(cost, salvage, life, period, [factor])",
    "description": "Calculates the depreciation of an asset for a specified period using the double-declining balance method.",
    "link": "https://support.google.com/docs/answer/3093163",
    "notes": [
      "life and period must be measured in the same units.",
      "While DDB calculates double-declining depreciation by default, use of factor allows specification of other methods."
    ],
    "sampleUsage": ["DDB(100,50,10,2)", "DDB(A2,A3,A4,A5,2.25)"],
    "related": ["SYD", "SLN", "DB"],
    "syntaxVariables": [
      { "name": "cost", "description": "The initial cost of the asset." },
      {
        "name": "salvage",
        "description": "The value of the asset at the end of depreciation."
      },
      {
        "name": "life",
        "description": "The number of periods over which the asset is depreciated."
      },
      {
        "name": "period",
        "description": "The single period within life for which to calculate depreciation."
      },
      {
        "name": "factor",
        "description": "[ OPTIONAL - 2 by default ] - The factor by which depreciation decreases."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "DISC",
    "syntax": "DISC(settlement, maturity, price, redemption, [day_count_convention])",
    "description": "Calculates the discount rate of a security based on price.",
    "link": "https://support.google.com/docs/answer/3093216",
    "notes": [
      "settlement and maturity should be entered using DATE, TO_DATE or other date parsing functions rather than by entering text."
    ],
    "sampleUsage": [
      "DISC(DATE(2010,01,02),DATE(2039,12,31),90,100)",
      "DISC(A2,B2,C2,D2,1)"
    ],
    "related": ["YIELDDISC", "YIELD", "PRICEMAT", "PRICEDISC", "PRICE"],
    "syntaxVariables": [
      {
        "name": "settlement",
        "description": "The settlement date of the security, the date after issuance when the security is delivered to the buyer."
      },
      {
        "name": "maturity",
        "description": "The maturity or end date of the security, when it can be redeemed at face or par value."
      },
      {
        "name": "price",
        "description": "The price at which the security is bought."
      },
      {
        "name": "redemption",
        "description": "The redemption value of the security."
      },
      {
        "name": "day_count_convention",
        "description": "[ OPTIONAL - 0 by default ] - An indicator of what day count method to use.\n\n    \n      \n        0 indicates US (NASD) 30/360 - This assumes 30 day months and 360 day years as per the National Association of Securities Dealers standard, and performs specific adjustments to entered dates which fall at the end of months.\n      \n      \n        1 indicates Actual/Actual - This calculates based upon the actual number of days between the specified dates, and the actual number of days in the intervening years. Used for US Treasury Bonds and Bills, but also the most relevant for non-financial use.\n      \n      \n        2 indicates Actual/360 - This calculates based on the actual number of days between the specified dates, but assumes a 360 day year.\n      \n      \n        3 indicates Actual/365 - This calculates based on the actual number of days between the specified dates, but assumes a 365 day year.\n      \n      \n        4 indicates European 30/360 - Similar to 0, this calculates based on a 30 day month and 360 day year, but adjusts end-of-month dates according to European financial conventions."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "DOLLARDE",
    "syntax": "DOLLARDE(fractional_price, unit)",
    "description": "Converts a price quotation given as a decimal fraction into a decimal value.",
    "link": "https://support.google.com/docs/answer/3093167",
    "notes": [
      "DOLLARDE is used to convert from prices specified on certain securities exchanges with minimal increments (e.g. 1/8 or 1/32) into decimal format. These prices may be transmitted on electronic exchanges as 100.01 for 100 1/8 or 100 1/32 depending on the system and minimal increment. DOLLARDE(100.01,8) results in 100.125 whereas DOLLARDE(100.01,32) results in 100.03125."
    ],
    "sampleUsage": ["DOLLARDE(100.10,32)", "DOLLARDE(A2,8)"],
    "related": ["DOLLARFR"],
    "syntaxVariables": [
      {
        "name": "fractional_price",
        "description": "The price quotation given using fractional decimal conventions."
      },
      {
        "name": "unit",
        "description": "The units of the fraction, e.g. 8 for 1/8ths or 32 for 1/32nds."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "DOLLARFR",
    "syntax": "DOLLARFR(decimal_price, unit)",
    "description": "Converts a price quotation given as a decimal value into a decimal fraction.",
    "link": "https://support.google.com/docs/answer/3093217",
    "notes": [
      "DOLLARFR is used to convert from decimal format to prices specified on certain securities exchanges with minimal increments (e.g. 1/8 or 1/32). These prices may be transmitted on electronic exchanges as 100.01 for 100 1/8 or 100 1/32 depending on the system and minimal increment. DOLLARFR(100.125,8) results in 100.01 whereas DOLLARDE(100.03125,32) also results in 100.01."
    ],
    "sampleUsage": ["DOLLARFR(100.125,32)", "DOLLARFR(A2,8)"],
    "related": ["DOLLARDE"],
    "syntaxVariables": [
      {
        "name": "decimal_price",
        "description": "The price quotation given as a decimal value.."
      },
      {
        "name": "unit",
        "description": "The units of the desired fraction, e.g. 8 for 1/8ths or 32 for 1/32nds."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "DURATION",
    "syntax": "DURATION(settlement, maturity, rate, yield, frequency, [day_count_convention]) .",
    "description": "Calculates the number of compounding periods required for an investment of a specified present value appreciating at a given rate to reach a target value.",
    "link": "https://support.google.com/docs/answer/3093169",
    "notes": [
      "settlement and maturity should be entered using DATE, TO_DATE, or other date parsing functions rather than by entering text.",
      "The Macaulay duration is different from the modified duration (MDURATION) in that it measures the weighted average time for an investment to reach maturity. The modified duration is related to the Macaulay duration in the following way: MDURATION = DURATION / [1 + (yield / frequency)]."
    ],
    "sampleUsage": [
      "DURATION(DATE(2010,01,02), DATE(2039,12,31), 3, 1.2, 2)",
      "DURATION(A2, B2, C2, D2, E2, 1)"
    ],
    "related": ["YIELD", "PRICE", "MDURATION"],
    "syntaxVariables": [
      {
        "name": "settlement",
        "description": "The settlement date of the security, the date after issuance when the security is delivered to the buyer."
      },
      {
        "name": "maturity",
        "description": "The maturity or end date of the security, when it can be redeemed at face or par value."
      },
      { "name": "rate", "description": "The annualized rate of interest." },
      {
        "name": "yield",
        "description": "The expected annual yield of the security."
      },
      {
        "name": "frequency",
        "description": "The number of interest or coupon payments per year (1, 2, or 4)."
      },
      {
        "name": "day_count_convention",
        "description": "[ OPTIONAL - 0 by default ] - An indicator of what day count method to use.\n\n    \n      \n        0 indicates US (NASD) 30/360 - This assumes 30 day months and 360 day years as per the National Association of Securities Dealers standard, and performs specific adjustments to entered dates which fall at the end of months.\n      \n      \n        1 indicates Actual/Actual - This calculates based upon the actual number of days between the specified dates, and the actual number of days in the intervening years. Used for US Treasury Bonds and Bills, but also the most relevant for non-financial use.\n      \n      \n        2 indicates Actual/360 - This calculates based on the actual number of days between the specified dates, but assumes a 360 day year.\n      \n      \n        3 indicates Actual/365 - This calculates based on the actual number of days between the specified dates, but assumes a 365 day year.\n      \n      \n        4 indicates European 30/360 - Similar to 0, this calculates based on a 30 day month and 360 day year, but adjusts end-of-month dates according to European financial conventions."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "EFFECT",
    "syntax": "EFFECT(nominal_rate, periods_per_year)",
    "description": "Calculates the annual effective interest rate given the nominal rate and number of compounding periods per year.",
    "link": "https://support.google.com/docs/answer/3093223",
    "notes": [],
    "sampleUsage": ["EFFECT(0.99,12)", "EFFECT(A2,A3)"],
    "related": ["NOMINAL", "INTRATE"],
    "syntaxVariables": [
      {
        "name": "nominal_rate",
        "description": "The nominal interest rate per year."
      },
      {
        "name": "periods_per_year",
        "description": "The number of compounding periods per year."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "FV",
    "syntax": "FV(rate, number_of_periods, payment_amount, [present_value], [end_or_beginning])",
    "description": "Calculates the future value of an annuity investment based on constant-amount periodic payments and a constant interest rate.",
    "link": "https://support.google.com/docs/answer/3093224",
    "notes": [
      "Ensure that consistent units are used for rate, number_of_periods, and payment_amount. For example, a car loan for 36 months may be paid monthly, in which case the annual percentage rate should be divided by 12 and the number of payments is 36. On the other hand, a different type of loan of the same length might be paid quarterly, in which case the annual percentage rate should be divided by 4 and the number of payments would be 12."
    ],
    "sampleUsage": ["FV(2,12,100,400)", "FV(A2,B2,C2,D2,1)"],
    "related": ["PV", "PPMT", "PMT", "NPER", "IPMT", "FVSCHEDULE"],
    "syntaxVariables": [
      { "name": "rate", "description": "The interest rate." },
      {
        "name": "number_of_periods",
        "description": "The number of payments to be made."
      },
      {
        "name": "payment_amount",
        "description": "The amount per period to be paid."
      },
      {
        "name": "present_value",
        "description": "[ OPTIONAL - 0 by default ] - The current value of the annuity."
      },
      {
        "name": "end_or_beginning",
        "description": "[ OPTIONAL - 0 by default ] - Whether payments are due at the end (0) or beginning (1) of each period."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "FVSCHEDULE",
    "syntax": "FVSCHEDULE(principal, rate_schedule)",
    "description": "Calculates the future value of some principal based on a specified series of potentially varying interest rates.",
    "link": "https://support.google.com/docs/answer/3093226",
    "notes": [],
    "sampleUsage": [
      "FVSCHEDULE(10000,A2:A100)",
      "FVSCHEDULE(10000,{0.1,0.95,0.9,0.85})",
      "FVSCHEDULE(A2,B2:B20)"
    ],
    "related": ["PV", "PPMT", "PMT", "NPER", "IPMT", "FV"],
    "syntaxVariables": [
      {
        "name": "principal",
        "description": "The amount of initial capital or value to compound against."
      },
      {
        "name": "rate_schedule",
        "description": "A series of interest rates to compound against the principal.\n\n    \n      rate_schedule must be either a range or array containing the interest rates to compound, in sequence. These should be expressed either as decimals or as percentages using UNARY_PERCENT, i.e. 0.09 or UNARY_PERCENT(9) rather than 9."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "INTRATE",
    "syntax": "INTRATE(buy_date, sell_date, buy_price, sell_price, [day_count_convention])",
    "description": "Calculates the effective interest rate generated when an investment is purchased at one price and sold at another with no interest or dividends generated by the investment itself.",
    "link": "https://support.google.com/docs/answer/3093174",
    "notes": [
      "buy_date and sell_date should be entered using DATE, TO_DATE or other date parsing functions rather than by entering text."
    ],
    "sampleUsage": [
      "INTRATE(DATE(2010,01,02),DATE(2019,12,31),90,140,2)",
      "INTRATE(A2,B2,C2,D2,1)"
    ],
    "related": ["NOMINAL", "EFFECT"],
    "syntaxVariables": [
      {
        "name": "buy_date",
        "description": "The date of purchase of the investment."
      },
      {
        "name": "sell_date",
        "description": "The date of sale of the investment."
      },
      {
        "name": "buy_price",
        "description": "The price at which the investment was purchased."
      },
      {
        "name": "sell_price",
        "description": "The price at which the investment was sold."
      },
      {
        "name": "day_count_convention",
        "description": "[ OPTIONAL - 0 by default ] - An indicator of what day count method to use.\n\n    \n      \n        0 indicates US (NASD) 30/360 - This assumes 30 day months and 360 day years as per the National Association of Securities Dealers standard, and performs specific adjustments to entered dates which fall at the end of months.\n      \n      \n        1 indicates Actual/Actual - This calculates based upon the actual number of days between the specified dates, and the actual number of days in the intervening years. Used for US Treasury Bonds and Bills, but also the most relevant for non-financial use.\n      \n      \n        2 indicates Actual/360 - This calculates based on the actual number of days between the speficied dates, but assumes a 360 day year.\n      \n      \n        3 indicates Actual/365 - This calculates based on the actual number of days between the specified dates, but assumes a 365 day year.\n      \n      \n        4 indicates European 30/360 - Similar to 0, this calculates based on a 30 day month and 360 day year, but adjusts end-of-month dates according to European financial conventions."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "IPMT",
    "syntax": "IPMT(rate, period, number_of_periods, present_value, [future_value], [end_or_beginning])",
    "description": "Calculates the payment on interest for an investment based on constant-amount periodic payments and a constant interest rate.",
    "link": "https://support.google.com/docs/answer/3093175",
    "notes": [
      "Ensure that consistent units are used for rate and number_of_periods. For example, a car loan for 36 months may be paid monthly, in which case the annual percentage rate should be divided by 12 and the number of payments is 36. On the other hand, a different type of loan of the same length might be paid quarterly, in which case the annual percentage rate should be divided by 4 and the number of payments would be 12."
    ],
    "sampleUsage": [
      "IPMT(0.05/12, 1, 30*12, 100000)",
      "IPMT(2,5,12,100)",
      "IPMT(A2,B2,C2,D2,E2,1)"
    ],
    "related": ["PV", "PMT", "PPMT", "NPER", "FVSCHEDULE", "FV"],
    "syntaxVariables": [
      { "name": "rate", "description": "The interest rate." },
      {
        "name": "period",
        "description": "The amortization period, in terms of number of periods.\n\n    \n      period must be at least 1 and at most number_of_periods."
      },
      {
        "name": "number_of_periods",
        "description": "The number of payments to be made."
      },
      {
        "name": "present_value",
        "description": "The current value of the annuity."
      },
      {
        "name": "future_value",
        "description": "[ OPTIONAL ] - The future value remaining after the final payment has been made."
      },
      {
        "name": "end_or_beginning",
        "description": "[ OPTIONAL - 0 by default ] - Whether payments are due at the end (0) or beginning (1) of each period."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "IRR",
    "syntax": "IRR(cashflow_amounts, [rate_guess])",
    "description": "Calculates the internal rate of return on an investment based on a series of periodic cash flows.",
    "link": "https://support.google.com/docs/answer/3093231",
    "notes": [
      "Each cell in cashflow_amounts should be positive if it represents income from the perspective of the owner of the investment (e.g. coupons) or negative if it represents payments (e.g. loan repayment).",
      "NPV will return zero if discount is set to the result of IRR using the same cash flow amounts.",
      "If the cash flows of an investment are irregularly spaced, use XIRR instead."
    ],
    "sampleUsage": ["IRR(A2:A25)", "IRR({-4000,200,250,300,350},0.1)"],
    "related": ["XNPV", "XIRR", "PV", "NPV", "MIRR"],
    "syntaxVariables": [
      {
        "name": "cashflow_amounts",
        "description": "An array or range containing the income or payments associated with the investment.\n\n    \n      cashflow_amounts must contain at least one negative and one positive cash flow to calculate rate of return."
      },
      {
        "name": "rate_guess",
        "description": "[ OPTIONAL - 0.1 by default ] - An estimate for what the internal rate of return will be."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "ISPMT",
    "syntax": "ISPMT(rate, period, number_of_periods, present_value)",
    "description": "The ISPMT function calculates the interest paid during a particular period of an investment.",
    "link": "https://support.google.com/docs/answer/9116481",
    "notes": [],
    "sampleUsage": ["ISPMT(rate, period, number_of_periods, present_value)"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "PPMT: The PPMT function calculates the payment on the principal of an investment based on constant-amount periodic payments and a constant interest rate."
      },
      {
        "name": "",
        "description": "PMT: The PMT function calculates the periodic payment for an annuity investment based on constant-amount periodic payments and a constant interest rate."
      },
      {
        "name": "",
        "description": "NPER: The NPER function calculates the number of payment periods for an investment based on constant-amount periodic payments and a constant interest rate."
      },
      {
        "name": "",
        "description": "IPMT: The IPMT function calculates the payment on interest for an investment based on constant-amount periodic payments and a constant interest rate."
      },
      {
        "name": "",
        "description": "FVSCHEDULE: The FVSCHEDULE function calculates the future value of some principal based on a specified series of potentially varying interest rates."
      },
      {
        "name": "",
        "description": "FV: The FV function calculates the future value of an annuity investment based on constant-amount periodic payments and a constant interest rate."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "MDURATION",
    "syntax": "MDURATION(settlement, maturity, rate, yield, frequency, [day_count_convention])",
    "description": "Calculates the modified Macaulay duration of a security paying periodic interest, such as a US Treasury Bond, based on expected yield.",
    "link": "https://support.google.com/docs/answer/3093178",
    "notes": [
      "settlement and maturity should be entered using DATE, TO_DATE, or other date parsing functions rather than by entering text.",
      "The modified duration is different from Macaulay duration (DURATION) in that it measures volatility, or price sensitivity, of an investment. The modified duration is related to the Macaulay duration in the following way: MDURATION = DURATION / [1 + (yield / frequency)]."
    ],
    "sampleUsage": [
      "MDURATION(DATE(2010,01,02), DATE(2039,12,31), 3, 1.2, 2)",
      "MDURATION(A2, B2, C2, D2, E2, 1)"
    ],
    "related": ["YIELD", "PRICE", "DURATION"],
    "syntaxVariables": [
      {
        "name": "settlement",
        "description": "The settlement date of the security, the date after issuance when the security is delivered to the buyer."
      },
      {
        "name": "maturity",
        "description": "The maturity or end date of the security, when it can be redeemed at face or par value."
      },
      { "name": "rate", "description": "The annualized rate of interest." },
      {
        "name": "yield",
        "description": "The expected annual yield of the security."
      },
      {
        "name": "frequency",
        "description": "The number of interest or coupon payments per year (1, 2, or 4)."
      },
      {
        "name": "day_count_convention",
        "description": "[ OPTIONAL - 0 by default ] - An indicator of what day count method to use.\n\n    \n      \n        0 indicates US (NASD) 30/360 - This assumes 30 day months and 360 day years as per the National Association of Securities Dealers standard, and performs specific adjustments to entered dates which fall at the end of months.\n      \n      \n        1 indicates Actual/Actual - This calculates based upon the actual number of days between the specified dates, and the actual number of days in the intervening years. Used for US Treasury Bonds and Bills, but also the most relevant for non-financial use.\n      \n      \n        2 indicates Actual/360 - This calculates based on the actual number of days between the specified dates, but assumes a 360 day year.\n      \n      \n        3 indicates Actual/365 - This calculates based on the actual number of days between the specified dates, but assumes a 365 day year.\n      \n      \n        4 indicates European 30/360 - Similar to 0, this calculates based on a 30 day month and 360 day year, but adjusts end-of-month dates according to European financial conventions."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "MIRR",
    "syntax": "MIRR(cashflow_amounts, financing_rate, reinvestment_return_rate)",
    "description": "Calculates the modified internal rate of return on an investment based on a series of periodic cash flows and the difference between the interest rate paid on financing versus the return received on reinvested income.",
    "link": "https://support.google.com/docs/answer/3093180",
    "notes": [
      "Each cell in cashflow_amounts should be positive if it represents income from the perspective of the owner of the investment (e.g. coupons) or negative if it represents payments (e.g. loan repayment)."
    ],
    "sampleUsage": [
      "MIRR(A2:A25,B2,B3)",
      "MIRR({-4000,200,250,300,350},0.08,0.11)"
    ],
    "related": ["XNPV", "XIRR", "PV", "NPV", "IRR"],
    "syntaxVariables": [
      {
        "name": "cashflow_amounts",
        "description": "An array or range containing the income or payments associated with the investment.\n\n    \n      cashflow_amounts must contain at least one negative and one positive cash flow to calculate rate of return."
      },
      {
        "name": "financing_rate",
        "description": "The interest rate paid on funds invested."
      },
      {
        "name": "reinvestment_return_rate",
        "description": "The return (as a percentage) earned on reinvestment of income received from the investment."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "NOMINAL",
    "syntax": "NOMINAL(effective_rate, periods_per_year)",
    "description": "Calculates the annual nominal interest rate given the effective rate and number of compounding periods per year.",
    "link": "https://support.google.com/docs/answer/3093234",
    "notes": [],
    "sampleUsage": ["NOMINAL(0.85,12)", "NOMINAL(A2,A3)"],
    "related": ["INTRATE", "EFFECT"],
    "syntaxVariables": [
      {
        "name": "effective_rate",
        "description": "The effective interest rate per year."
      },
      {
        "name": "periods_per_year",
        "description": "The number of compounding periods per year."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "NPER",
    "syntax": "NPER(rate, payment_amount, present_value, [future_value], [end_or_beginning])",
    "description": "Calculates the number of payment periods for an investment based on constant-amount periodic payments and a constant interest rate.",
    "link": "https://support.google.com/docs/answer/3093183",
    "notes": [
      "Ensure that consistent units are used for rate and payment_amount. For example, a car loan for 36 months may be paid monthly, in which case the annual percentage rate should be divided by 12 and the payment_amount is the amount of each monthly payment. On the other hand, a different type of loan of the same length and principal might be paid quarterly, in which case the annual percentage rate should be divided by 4 and the amount paid each period would be adjusted accordingly.."
    ],
    "sampleUsage": ["NPER(2,500,40000)", "NPER(A2,B2,C2,D2,1)"],
    "related": ["PV", "PPMT", "PMT", "IPMT", "FVSCHEDULE", "FV"],
    "syntaxVariables": [
      { "name": "rate", "description": "The interest rate." },
      {
        "name": "payment_amount",
        "description": "The amount of each payment made."
      },
      {
        "name": "present_value",
        "description": "The current value of the annuity."
      },
      {
        "name": "future_value",
        "description": "[ OPTIONAL ] - The future value remaining after the final payment has been made."
      },
      {
        "name": "end_or_beginning",
        "description": "[ OPTIONAL - 0 by default ] - Whether payments are due at the end (0) or beginning (1) of each period."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "NPV",
    "syntax": "NPV(discount, cashflow1, [cashflow2, ...])",
    "description": "Calculates the net present value of an investment based on a series of periodic cash flows and a discount rate.",
    "link": "https://support.google.com/docs/answer/3093184",
    "notes": [
      "NPV is similar to PV except that NPV allows variable-value cash flows.",
      "Each cashflow argument should be positive if it represents income from the perspective of the owner of the investment (e.g. coupons) or negative if it represents payments (e.g. loan repayment).",
      "Each cashflow argument may be either a value, a reference to a value, or a range containing values. Cashflows are considered in the order they are referenced.",
      "IRR under the same conditions calculates the internal rate of return for which the net present value is zero.",
      "If the cash flows of an investment are irregularly spaced, use XNPV instead."
    ],
    "sampleUsage": ["NPV(0.08,200,250,300)", "NPV(A2,A3,A4,A5)"],
    "related": ["XNPV", "XIRR", "PV", "MIRR", "IRR"],
    "syntaxVariables": [
      {
        "name": "discount",
        "description": "The discount rate of the investment over one period."
      },
      { "name": "cashflow1", "description": "The first future cash flow." },
      {
        "name": "cashflow2, ...",
        "description": "[ OPTIONAL ] - Additional future cash flows."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "PDURATION",
    "syntax": "PDURATION(rate, present_value, future_value)",
    "description": "Returns the number of periods for an investment to reach a specific value at a given rate. Learn more.",
    "link": "https://support.google.com/docs/answer/9368165",
    "notes": [],
    "sampleUsage": ["PDURATION"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "RRI: The RRI function returns the interest rate needed for an investment to reach a specific value within a given number of periods."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "PMT",
    "syntax": "PMT(rate, number_of_periods, present_value, [future_value], [end_or_beginning])",
    "description": "Calculates the periodic payment for an annuity investment based on constant-amount periodic payments and a constant interest rate.",
    "link": "https://support.google.com/docs/answer/3093185",
    "notes": [
      "Ensure that consistent units are used for rate and number_of_periods. For example, a car loan for 36 months may be paid monthly, in which case the annual percentage rate should be divided by 12 and the number of payments is 36. On the other hand, a different type of loan of the same length might be paid quarterly, in which case the annual percentage rate should be divided by 4 and the number of payments would be 12."
    ],
    "sampleUsage": [
      "PMT(0.05/12, 30*12, 100000)",
      "PMT(2,12,100)",
      "PMT(A2,B2,C2,D2,1)"
    ],
    "related": ["PV", "PPMT", "NPER", "IPMT", "FVSCHEDULE", "FV"],
    "syntaxVariables": [
      { "name": "rate", "description": "The interest rate." },
      {
        "name": "number_of_periods",
        "description": "The number of payments to be made."
      },
      {
        "name": "present_value",
        "description": "The current value of the annuity."
      },
      {
        "name": "future_value",
        "description": "[ OPTIONAL ] - The future value remaining after the final payment has been made."
      },
      {
        "name": "end_or_beginning",
        "description": "[ OPTIONAL - 0 by default ] - Whether payments are due at the end (0) or beginning (1) of each period."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "PPMT",
    "syntax": "PPMT(rate, period, number_of_periods, present_value, [future_value], [end_or_beginning])",
    "description": "Calculates the payment on the principal of an investment based on constant-amount periodic payments and a constant interest rate.",
    "link": "https://support.google.com/docs/answer/3093187",
    "notes": [
      "Ensure that consistent units are used for rate and number_of_periods. For example, a car loan for 36 months may be paid monthly, in which case the annual percentage rate should be divided by 12 and the number of payments is 36. On the other hand, a different type of loan of the same length might be paid quarterly, in which case the annual percentage rate should be divided by 4 and the number of payments would be 12."
    ],
    "sampleUsage": [
      "PPMT(0.05/12, 1, 30*12, 100000)",
      "PPMT(2,5,12,100)",
      "PPMT(A2,B2,C2,D2,E2,1)"
    ],
    "related": ["PV", "PMT", "NPER", "IPMT", "FVSCHEDULE", "FV"],
    "syntaxVariables": [
      { "name": "rate", "description": "The interest rate." },
      {
        "name": "period",
        "description": "The amortization period, in terms of number of periods.\n\n    \n      period must be at least 1 and at most number_of_periods."
      },
      {
        "name": "number_of_periods",
        "description": "The number of payments to be made."
      },
      {
        "name": "present_value",
        "description": "The current value of the annuity."
      },
      {
        "name": "future_value",
        "description": "[ OPTIONAL ] - The future value remaining after the final payment has been made."
      },
      {
        "name": "end_or_beginning",
        "description": "[ OPTIONAL - 0 by default ] - Whether payments are due at the end (0) or beginning (1) of each period."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "PRICE",
    "syntax": "PRICE(settlement, maturity, rate, yield, redemption, frequency, [day_count_convention])",
    "description": "Calculates the price of a security paying periodic interest, such as a US Treasury Bond, based on expected yield.",
    "link": "https://support.google.com/docs/answer/3093188",
    "notes": [
      "settlement and maturity should be entered using DATE, TO_DATE or other date parsing functions rather than by entering text."
    ],
    "sampleUsage": [
      "PRICE(DATE(2010,1,2),DATE(2039,12,31),3,1.2,100,2,0)",
      "PRICE(A2,B2,C2,D2,E2,F2,1)"
    ],
    "related": ["YIELDDISC", "YIELD", "PRICEMAT", "PRICEDISC", "DISC"],
    "syntaxVariables": [
      {
        "name": "settlement",
        "description": "The settlement date of the security, the date after issuance when the security is delivered to the buyer."
      },
      {
        "name": "maturity",
        "description": "The maturity or end date of the security, when it can be redeemed at face or par value."
      },
      { "name": "rate", "description": "The annualized rate of interest." },
      {
        "name": "yield",
        "description": "The expected annual yield of the security."
      },
      {
        "name": "redemption",
        "description": "The redemption value of the security."
      },
      {
        "name": "frequency",
        "description": "The number of interest or coupon payments per year (1, 2, or 4)."
      },
      {
        "name": "day_count_convention",
        "description": "[ OPTIONAL - 0 by default ] - An indicator of what day count method to use.\n\n    \n      \n        0 indicates US (NASD) 30/360 - This assumes 30 day months and 360 day years as per the National Association of Securities Dealers standard, and performs specific adjustments to entered dates which fall at the end of months.\n      \n      \n        1 indicates Actual/Actual - This calculates based upon the actual number of days between the specified dates, and the actual number of days in the intervening years. Used for US Treasury Bonds and Bills, but also the most relevant for non-financial use.\n      \n      \n        2 indicates Actual/360 - This calculates based on the actual number of days between the specified dates, but assumes a 360 day year.\n      \n      \n        3 indicates Actual/365 - This calculates based on the actual number of days between the specified dates, but assumes a 365 day year.\n      \n      \n        4 indicates European 30/360 - Similar to 0, this calculates based on a 30 day month and 360 day year, but adjusts end-of-month dates according to European financial conventions."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "PRICEDISC",
    "syntax": "PRICEDISC(settlement, maturity, discount, redemption, [day_count_convention])",
    "description": "Calculates the price of a discount (non-interest-bearing) security, based on expected yield.",
    "link": "https://support.google.com/docs/answer/3093240",
    "notes": [
      "settlement and maturity should be entered using DATE, TO_DATE or other date parsing functions rather than by entering text."
    ],
    "sampleUsage": [
      "PRICEDISC(DATE(2010,01,02),DATE(2039,12,31),3,100)",
      "PRICEDISC(A2,B2,C2,D2,1)"
    ],
    "related": [
      "YIELDDISC",
      "YIELD",
      "TBILLYIELD",
      "TBILLPRICE",
      "TBILLEQ",
      "PRICEMAT",
      "PRICEDISC",
      "DISC"
    ],
    "syntaxVariables": [
      {
        "name": "settlement",
        "description": "The settlement date of the security, the date after issuance when the security is delivered to the buyer."
      },
      {
        "name": "maturity",
        "description": "The maturity or end date of the security, when it can be redeemed at face or par value."
      },
      {
        "name": "discount",
        "description": "The discount rate of the security at time of purchase."
      },
      {
        "name": "redemption",
        "description": "The redemption value of the security."
      },
      {
        "name": "day_count_convention",
        "description": "[ OPTIONAL - 0 by default ] - An indicator of what day count method to use.\n\n    \n      \n        0 indicates US (NASD) 30/360 - This assumes 30 day months and 360 day years as per the National Association of Securities Dealers standard, and performs specific adjustments to entered dates which fall at the end of months.\n      \n      \n        1 indicates Actual/Actual - This calculates based upon the actual number of days between the specified dates, and the actual number of days in the intervening years. Used for US Treasury Bonds and Bills, but also the most relevant for non-financial use.\n      \n      \n        2 indicates Actual/360 - This calculates based on the actual number of days between the specified dates, but assumes a 360 day year.\n      \n      \n        3 indicates Actual/365 - This calculates based on the actual number of days between the specified dates, but assumes a 365 day year.\n      \n      \n        4 indicates European 30/360 - Similar to 0, this calculates based on a 30 day month and 360 day year, but adjusts end-of-month dates according to European financial conventions."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "PRICEMAT",
    "syntax": "PRICEMAT(settlement, maturity, issue, rate, yield, [day_count_convention])",
    "description": "Calculates the price of a security paying interest at maturity, based on expected yield.",
    "link": "https://support.google.com/docs/answer/3093191",
    "notes": [
      "settlement, maturity, and issue should be entered using DATE, TO_DATE or other date parsing functions rather than by entering text."
    ],
    "sampleUsage": [
      "PRICEMAT(DATE(2010,01,02),DATE(2039,12,31),DATE(2010,01,01),3,1.2)",
      "PRICEMAT(A2,B2,C2,D2,E2,1)"
    ],
    "related": ["YIELDDISC", "YIELD", "PRICEDISC", "PRICE", "DISC"],
    "syntaxVariables": [
      {
        "name": "settlement",
        "description": "The settlement date of the security, the date after issuance when the security is delivered to the buyer."
      },
      {
        "name": "maturity",
        "description": "The maturity or end date of the security, when it can be redeemed at face or par value."
      },
      {
        "name": "issue",
        "description": "The date the security was initially issued."
      },
      { "name": "rate", "description": "The annualized rate of interest." },
      {
        "name": "yield",
        "description": "The expected annual yield of the security."
      },
      {
        "name": "day_count_convention",
        "description": "[ OPTIONAL - 0 by default ] - An indicator of what day count method to use.\n\n    \n      \n        0 indicates US (NASD) 30/360 - This assumes 30 day months and 360 day years as per the National Association of Securities Dealers standard, and performs specific adjustments to entered dates which fall at the end of months.\n      \n      \n        1 indicates Actual/Actual - This calculates based upon the actual number of days between the specified dates, and the actual number of days in the intervening years. Used for US Treasury Bonds and Bills, but also the most relevant for non-financial use.\n      \n      \n        2 indicates Actual/360 - This calculates based on the actual number of days between the specified dates, but assumes a 360 day year.\n      \n      \n        3 indicates Actual/365 - This calculates based on the actual number of days between the specified dates, but assumes a 365 day year.\n      \n      \n        4 indicates European 30/360 - Similar to 0, this calculates based on a 30 day month and 360 day year, but adjusts end-of-month dates according to European financial conventions."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "PV",
    "syntax": "PV(rate, number_of_periods, payment_amount, [future_value], [end_or_beginning])",
    "description": "Calculates the present value of an annuity investment based on constant-amount periodic payments and a constant interest rate.",
    "link": "https://support.google.com/docs/answer/3093243",
    "notes": [
      "Ensure that consistent units are used for rate, number_of_periods, and payment_amount​. For example, a car loan for 36 months may be paid monthly, in which case the annual percentage rate should be divided by 12 and the number of payments is 36. On the other hand, a different type of loan of the same length might be paid quarterly, in which case the annual percentage rate should be divided by 4 and the number of payments would be 12."
    ],
    "sampleUsage": ["PV(2,12,100)", "PV(A2,B2,C2,D2,1)"],
    "related": ["PPMT", "PMT", "NPER", "IPMT", "FVSCHEDULE", "FV"],
    "syntaxVariables": [
      { "name": "rate", "description": "The interest rate." },
      {
        "name": "number_of_periods",
        "description": "The number of payments to be made."
      },
      {
        "name": "payment_amount",
        "description": "The amount per period to be paid."
      },
      {
        "name": "future_value",
        "description": "[ OPTIONAL ] - The future value remaining after the final payment has been made."
      },
      {
        "name": "end_or_beginning",
        "description": "[ OPTIONAL - 0 by default ] - Whether payments are due at the end (0) or beginning (1) of each period."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "RATE",
    "syntax": "RATE(number_of_periods, payment_per_period, present_value, [future_value], [end_or_beginning], [rate_guess])",
    "description": "Calculates the interest rate of an annuity investment based on constant-amount periodic payments and the assumption of a constant interest rate.",
    "link": "https://support.google.com/docs/answer/3093257",
    "notes": [],
    "sampleUsage": ["RATE(12,-100,400,0,0,0.1)", "RATE(A2,B2,C2,D2,1,0.08)"],
    "related": [
      "PV",
      "PPMT",
      "PMT",
      "NPER",
      "IPMT",
      "FVSCHEDULE",
      "FV",
      "CUMPRINC",
      "CUMIPMT"
    ],
    "syntaxVariables": [
      {
        "name": "number_of_periods",
        "description": "The number of payments to be made."
      },
      {
        "name": "payment_per_period",
        "description": "The amount per period to be paid."
      },
      {
        "name": "present_value",
        "description": "The current value of the annuity."
      },
      {
        "name": "future_value",
        "description": "[ OPTIONAL ] - The future value remaining after the final payment has been made."
      },
      {
        "name": "end_or_beginning",
        "description": "[ OPTIONAL - 0 by default ] - Whether payments are due at the end (0) or beginning (1) of each period."
      },
      {
        "name": "rate_guess",
        "description": "[ OPTIONAL - 0.1 by default ] - An estimate for what the interest rate will be."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "RECEIVED",
    "syntax": "RECEIVED(settlement, maturity, investment, discount, [day_count_convention])",
    "description": "Calculates the amount received at maturity for an investment in fixed-income securities purchased on a given date.",
    "link": "https://support.google.com/docs/answer/3093244",
    "notes": [
      "settlement and maturity should be entered using DATE, TO_DATE or other date parsing functions rather than by entering text."
    ],
    "sampleUsage": [
      "RECEIVED(DATE(2010,02,01),DATE(2019,12,31),1000,0.05)",
      "RECEIVED(A2,A3,A4,A5,1)"
    ],
    "related": [
      "YIELDDISC",
      "YIELD",
      "PRICEMAT",
      "PRICEDISC",
      "PRICE",
      "MDURATION",
      "DURATION",
      "DISC",
      "COUPPCD",
      "COUPNCD",
      "COUPDAYSNC",
      "COUPDAYS",
      "COUPDAYBS",
      "ACCRINTM",
      "ACCRINT"
    ],
    "syntaxVariables": [
      {
        "name": "settlement",
        "description": "The settlement date of the security, the date after issuance when the security is delivered to the buyer."
      },
      {
        "name": "maturity",
        "description": "The maturity or end date of the security, when it can be redeemed at face or par value."
      },
      {
        "name": "investment",
        "description": "The amount invested (irrespective of face value of each security)."
      },
      {
        "name": "discount",
        "description": "The discount rate of the security invested in."
      },
      {
        "name": "day_count_convention",
        "description": "[ OPTIONAL - 0 by default ] - An indicator of what day count method to use.\n\n    \n      \n        0 indicates US (NASD) 30/360 - This assumes 30 day months and 360 day years as per the National Association of Securities Dealers standard, and performs specific adjustments to entered dates which fall at the end of months.\n      \n      \n        1 indicates Actual/Actual - This calculates based upon the actual number of days between the specified dates, and the actual number of days in the intervening years. Used for US Treasury Bonds and Bills, but also the most relevant for non-financial use.\n      \n      \n        2 indicates Actual/360 - This calculates based on the actual number of days between the specified dates, but assumes a 360 day year.\n      \n      \n        3 indicates Actual/365 - This calculates based on the actual number of days between the specified dates, but assumes a 365 day year.\n      \n      \n        4 indicates European 30/360 - Similar to 0, this calculates based on a 30 day month and 360 day year, but adjusts end-of-month dates according to European financial conventions."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "RRI",
    "syntax": "RRI(number_of_periods, present_value, future_value)",
    "description": "Returns the interest rate needed for an investment to reach a specific value within a given number of periods. Learn more.",
    "link": "https://support.google.com/docs/answer/9368238",
    "notes": [
      "PDURATION: The PDURATION function returns the number of periods for an investment to reach a specific value at a given rate."
    ],
    "sampleUsage": [],
    "related": [],
    "syntaxVariables": [
      {
        "name": "Number_of_periods",
        "description": "All values must be positive.  and present_value must be greater than 0."
      },
      {
        "name": "future_value",
        "description": "If  is 0, the rate returned is -1 (-100%)."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "SLN",
    "syntax": "SLN(cost, salvage, life)",
    "description": "Calculates the depreciation of an asset for one period using the straight-line method.",
    "link": "https://support.google.com/docs/answer/3093245",
    "notes": [],
    "sampleUsage": ["SLN(100,50,10)", "SLN(A2,A3,A4)"],
    "related": ["SYD", "DDB", "DB"],
    "syntaxVariables": [
      { "name": "cost", "description": "The initial cost of the asset." },
      {
        "name": "salvage",
        "description": "The value of the asset at the end of depreciation."
      },
      {
        "name": "life",
        "description": "The number of periods over which the asset is depreciated."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "SYD",
    "syntax": "SYD(cost, salvage, life, period)",
    "description": "Calculates the depreciation of an asset for a specified period using the sum of years digits method.",
    "link": "https://support.google.com/docs/answer/3093261",
    "notes": ["life and period must be measured in the same units."],
    "sampleUsage": ["SYD(100,50,10,2)", "SYD(A2,A3,A4,A5)"],
    "related": ["SLN", "DDB", "DB"],
    "syntaxVariables": [
      { "name": "cost", "description": "The initial cost of the asset." },
      {
        "name": "salvage",
        "description": "The value of the asset at the end of depreciation."
      },
      {
        "name": "life",
        "description": "The number of periods over which the asset is depreciated."
      },
      {
        "name": "period",
        "description": "The single period within life for which to calculate depreciation."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "TBILLEQ",
    "syntax": "TBILLEQ(settlement, maturity, discount)",
    "description": "Calculates the equivalent annualized rate of return of a US Treasury Bill based on discount rate.",
    "link": "https://support.google.com/docs/answer/3093249",
    "notes": [
      "settlement and maturity should be entered using DATE, TO_DATE or other date parsing functions rather than by entering text."
    ],
    "sampleUsage": [
      "TBILLEQ(DATE(2010,1,2), DATE(2010,12,31), .09)",
      "TBILLEQ(A2,B2,C2)"
    ],
    "related": ["TBILLYIELD", "TBILLPRICE"],
    "syntaxVariables": [
      {
        "name": "settlement",
        "description": "The settlement date of the security, the date after issuance when the security is delivered to the buyer."
      },
      {
        "name": "maturity",
        "description": "The maturity or end date of the security, when it can be redeemed at face or par value."
      },
      {
        "name": "discount",
        "description": "The discount rate of the bill at time of purchase."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "TBILLPRICE",
    "syntax": "TBILLPRICE(settlement, maturity, discount)",
    "description": "Calculates the price of a US Treasury Bill based on discount rate.",
    "link": "https://support.google.com/docs/answer/3093251",
    "notes": [
      "settlement and maturity should be entered using DATE, TO_DATE or other date parsing functions rather than by entering text.",
      "TBILLPRICE is equivalent to using PRICEDISC with US Treasury Bill conventions for the absent parameters.",
      "maturity must be one year or less from the settlement date.",
      "discount is a percentage and must be entered as a positive number from zero to one."
    ],
    "sampleUsage": [
      "TBILLPRICE(DATE(2010,1,2), DATE(2010,12,31), .0125)",
      "TBILLPRICE(A2,B2,C2)"
    ],
    "related": ["TBILLYIELD", "PRICEDISC", "PRICE"],
    "syntaxVariables": [
      {
        "name": "settlement",
        "description": "The settlement date of the security, the date after issuance when the security is delivered to the buyer."
      },
      {
        "name": "maturity",
        "description": "The maturity or end date of the security, when it can be redeemed at face or par value."
      },
      {
        "name": "discount",
        "description": "The discount rate of the bill at time of purchase."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "TBILLYIELD",
    "syntax": "TBILLYIELD(settlement, maturity, price)",
    "description": "Calculates the yield of a US Treasury Bill based on price.",
    "link": "https://support.google.com/docs/answer/3093264",
    "notes": [
      "TBILLYIELD requires the maturity date to be no more than a year after the settlement date.",
      "settlement and maturity should be entered using DATE, TO_DATE or other date parsing functions rather than by entering text.",
      "TBILLYIELD is equivalent to using YIELDDISC with US Treasury Bill conventions for the absent parameters."
    ],
    "sampleUsage": [
      "TBILLYIELD(DATE(2010,1,2), DATE(2010,12,31), 98.45)",
      "TBILLYIELD(A2,B2,C2)"
    ],
    "related": ["YIELDDISC", "YIELD"],
    "syntaxVariables": [
      {
        "name": "settlement",
        "description": "The settlement date of the security, the date after issuance when the security is delivered to the buyer."
      },
      {
        "name": "maturity",
        "description": "The maturity or end date of the security, when it can be redeemed at face or par value."
      },
      {
        "name": "price",
        "description": "The price at which the security is bought."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "VDB",
    "syntax": "VDB(cost, salvage, life, start_period, end_period, [factor], [no_switch])",
    "description": "Returns the depreciation of an asset for a particular period (or partial period). Learn more.",
    "link": "https://support.google.com/docs/answer/9199424",
    "notes": [],
    "sampleUsage": [],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "DB: The DB function calculates the depreciation of an asset for a specified period using the arithmetic declining balance method."
      },
      {
        "name": "",
        "description": "DDB: The DDB function calculates the depreciation of an asset for a specified period using the double-declining balance method."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "XIRR",
    "syntax": "XIRR(cashflow_amounts, cashflow_dates, [rate_guess])",
    "description": "Calculates the internal rate of return of an investment based on a specified series of potentially irregularly spaced cash flows.",
    "link": "https://support.google.com/docs/answer/3093266",
    "notes": [
      "If the days specified in cashflow_dates are at a regular interval, use IRR instead.",
      "Each cell in cashflow_amounts should be positive if it represents income from the perspective of the owner of the investment (e.g. coupons) or negative if it represents payments (e.g. loan repayment).",
      "XNPV will return zero if discount is set to the result of XIRR using the same cash flow amounts and schedule."
    ],
    "sampleUsage": [
      "XIRR(B2:B25,C2:C25)",
      "XIRR({-4000,200,250,300},{DATE(2012,01,01),DATE(2012,06,23),DATE(2013,05,12),DATE(2014,02,09)},0.09)"
    ],
    "related": ["XNPV", "PV", "NPV", "MIRR", "IRR"],
    "syntaxVariables": [
      {
        "name": "cashflow_amounts",
        "description": "An array or range containing the income or payments associated with the investment.\n\n    \n      cashflow_amounts must contain at least one negative and one positive cash flow to calculate rate of return."
      },
      {
        "name": "cashflow_dates",
        "description": "An array or range with dates corresponding to the cash flows in cashflow_amounts."
      },
      {
        "name": "rate_guess",
        "description": "[ OPTIONAL - 0.1 by default ] - An estimate for what the internal rate of return will be."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "XNPV",
    "syntax": "XNPV(discount, cashflow_amounts, cashflow_dates)",
    "description": "Calculates the net present value of an investment based on a specified series of potentially irregularly spaced cash flows and a discount rate.",
    "link": "https://support.google.com/docs/answer/3093268",
    "notes": [
      "XNPV is similar to PV except that XNPV allows variable-value cash flows and cash flow intervals.",
      "If the days specified in cashflow_dates are at a regular interval, use NPV instead.",
      "Each cell in cashflow_amounts should be positive if it represents income from the perspective of the owner of the investment (e.g. coupons) or negative if it represents payments (e.g. loan repayment).",
      "XIRR under the same conditions calculates the internal rate of return for which the net present value is zero."
    ],
    "sampleUsage": [
      "XNPV(A2,B2:B25,C2:C25)",
      "XNPV(0.08,{200,250,300},{DATE(2012,06,23),DATE(2013,05,12),DATE(2014,02,09)})"
    ],
    "related": ["XIRR", "PV", "NPV", "MIRR", "IRR"],
    "syntaxVariables": [
      {
        "name": "discount",
        "description": "The discount rate of the investment over one period."
      },
      {
        "name": "cashflow_amounts",
        "description": "A range of cells containing the income or payments associated with the investment."
      },
      {
        "name": "cashflow_dates",
        "description": "A range of cells with dates corresponding to the cash flows in cashflow_amounts."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "YIELD",
    "syntax": "YIELD(settlement, maturity, rate, price, redemption, frequency, [day_count_convention])",
    "description": "Calculates the annual yield of a security paying periodic interest, such as a US Treasury Bond, based on price.",
    "link": "https://support.google.com/docs/answer/3093255",
    "notes": [
      "settlement and maturity should be entered using DATE, TO_DATE or other date parsing functions rather than by entering text."
    ],
    "sampleUsage": [
      "YIELD(DATE(2010,01,02),DATE(2039,12,31),3,93.45,100,2)",
      "YIELD(A2,B2,C2,D2,E2,F2,1)"
    ],
    "related": [
      "YIELDDISC",
      "TBILLYIELD",
      "PRICEMAT",
      "PRICEDISC",
      "PRICE",
      "DISC"
    ],
    "syntaxVariables": [
      {
        "name": "settlement",
        "description": "The settlement date of the security, the date after issuance when the security is delivered to the buyer."
      },
      {
        "name": "maturity",
        "description": "The maturity or end date of the security, when it can be redeemed at face, or par value."
      },
      { "name": "rate", "description": "The annualized rate of interest." },
      {
        "name": "price",
        "description": "The price at which the security is bought per 100 face value."
      },
      {
        "name": "redemption",
        "description": "The redemption amount per 100 face value, or par."
      },
      {
        "name": "frequency",
        "description": "The number of interest or coupon payments per year (1, 2, or 4)."
      },
      {
        "name": "day_count_convention",
        "description": "[ OPTIONAL - 0 by default ] - An indicator of what day count method to use.\n\n    \n      \n        0 indicates US (NASD) 30/360 - This assumes 30 day months and 360 day years as per the National Association of Securities Dealers standard, and performs specific adjustments to entered dates which fall at the end of months.\n      \n      \n        1 indicates Actual/Actual - This calculates based upon the actual number of days between the specified dates, and the actual number of days in the intervening years. Used for US Treasury Bonds and Bills, but also the most relevant for non-financial use.\n      \n      \n        2 indicates Actual/360 - This calculates based on the actual number of days between the specified dates, but assumes a 360 day year.\n      \n      \n        3 indicates Actual/365 - This calculates based on the actual number of days between the specified dates, but assumes a 365 day year.\n      \n      \n        4 indicates European 30/360 - Similar to 0, this calculates based on a 30 day month and 360 day year, but adjusts end-of-month dates according to European financial conventions."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "YIELDDISC",
    "syntax": "YIELDDISC(settlement, maturity, price, redemption, [day_count_convention])",
    "description": "Calculates the annual yield of a discount (non-interest-bearing) security, based on price.",
    "link": "https://support.google.com/docs/answer/3093270",
    "notes": [
      "settlement and maturity should be entered using DATE, TO_DATE or other date parsing functions rather than by entering text."
    ],
    "sampleUsage": [
      "YIELDDISC(DATE(2010,01,02),DATE(2010,12,31),98.45,100)",
      "YIELDDISC(A2,B2,C2,D2,2)"
    ],
    "related": [
      "YIELD",
      "TBILLYIELD",
      "PRICEMAT",
      "PRICEDISC",
      "PRICE",
      "DISC"
    ],
    "syntaxVariables": [
      {
        "name": "settlement",
        "description": "The settlement date of the security, the date after issuance when the security is delivered to the buyer."
      },
      {
        "name": "maturity",
        "description": "The maturity or end date of the security, when it can be redeemed at face, or par value."
      },
      {
        "name": "price",
        "description": "The price at which the security is bought."
      },
      {
        "name": "redemption",
        "description": "The redemption value of the security."
      },
      {
        "name": "day_count_convention",
        "description": "[ OPTIONAL - 0 by default ] - An indicator of what day count method to use.\n\n    \n      \n        0 indicates US (NASD) 30/360 - This assumes 30 day months and 360 day years as per the National Association of Securities Dealers standard, and performs specific adjustments to entered dates which fall at the end of months.\n      \n      \n        1 indicates Actual/Actual - This calculates based upon the actual number of days between the specified dates, and the actual number of days in the intervening years. Used for US Treasury Bonds and Bills, but also the most relevant for non-financial use.\n      \n      \n        2 indicates Actual/360 - This calculates based on the actual number of days between the specified dates, but assumes a 360 day year.\n      \n      \n        3 indicates Actual/365 - This calculates based on the actual number of days between the specified dates, but assumes a 365 day year.\n      \n      \n        4 indicates European 30/360 - Similar to 0, this calculates based on a 30 day month and 360 day year, but adjusts end-of-month dates according to European financial conventions."
      }
    ]
  },
  {
    "type": "Financial",
    "name": "YIELDMAT",
    "syntax": "YIELDMAT(settlement, maturity, issue, rate, price, [day_count_convention])",
    "description": "Calculates the annual yield of a security paying interest at maturity, based on price.",
    "link": "https://support.google.com/docs/answer/9000132",
    "notes": [],
    "sampleUsage": [
      "YIELDMAT",
      "YIELDMAT",
      "=YIELDMAT(settlement, maturity, issue, rate, price, [day_count_convention]).",
      "YIELDMAT(DATE(2010,01,02),DATE(2039,12,31),DATE(2010,01,01),3,100.47)"
    ],
    "related": ["PRICEMAT", "YIELDDISC"],
    "syntaxVariables": [
      {
        "name": "settlement",
        "description": ", maturity, and issue should be entered using DATE, TO_DATE, or other date parsing functions rather than by entering text."
      }
    ]
  },
  {
    "type": "Google",
    "name": "ARRAYFORMULA",
    "syntax": "ARRAYFORMULA(array_formula)",
    "description": "Enables the display of values returned from an array formula into multiple rows and/or columns and the use of non-array functions with arrays.",
    "link": "https://support.google.com/docs/answer/3093275",
    "notes": [
      "Many array formulas will be automatically expanded into neighboring cells, obviating the explicit use of ARRAYFORMULA.",
      "Pressing Ctrl+Shift+Enter while editing a formula will automatically add ARRAYFORMULA( to the beginning of the formula.",
      "Note that array formulas cannot be exported."
    ],
    "sampleUsage": [
      "ARRAYFORMULA(SUM(IF(A1:A10>5, A1:A10, 0)))",
      "ARRAYFORMULA(A1:C1+A2:C2)"
    ],
    "related": ["ARRAY_CONSTRAIN"],
    "syntaxVariables": [
      {
        "name": "array_formula",
        "description": "A range, mathematical expression using one cell range or multiple ranges of the same size, or a function that returns a result greater than one cell."
      }
    ]
  },
  {
    "type": "Google",
    "name": "DETECTLANGUAGE",
    "syntax": "DETECTLANGUAGE(text_or_range)",
    "description": "Identifies the language used in text within the specified range.",
    "link": "https://support.google.com/docs/answer/3093278",
    "notes": [
      "If the range specified contains multiple languages, the first text found will be evaluated."
    ],
    "sampleUsage": [
      "DETECTLANGUAGE(A2:A7)",
      "DETECTLANGUAGE(\"Bonjour\")",
      "DETECTLANGUAGE(A2)"
    ],
    "related": ["GOOGLETRANSLATE"],
    "syntaxVariables": [
      {
        "name": "text_or_range",
        "description": "The text or reference to cells containing text to evaluate.\n\n    \n      If text_or_range is specified as a range, it must be a one-dimensional column range."
      }
    ]
  },
  {
    "type": "Google",
    "name": "GOOGLEFINANCE",
    "syntax": "GOOGLEFINANCE(ticker, [attribute], [start_date], [end_date|num_days], [interval])",
    "description": "Fetches current or historical securities information from Google Finance.",
    "link": "https://support.google.com/docs/answer/3093281",
    "notes": [
      "All parameters must be enclosed in quotation marks or be references to cells containing text. \n      Note: A possible exception is when interval is specified as a number and when end_date|num_days is specified as a number of days.",
      "Real-time results will be returned as a value within a single cell. Historical data, even for a single day, will be returned as an expanded array with column headers.",
      "Some attributes may not yield results for all symbols.",
      "If any date parameters are specified, the request is considered historical and only the historical attributes are allowed.",
      "GOOGLEFINANCE is only available in English and does not support most international exchanges.",
      "Historical data cannot be downloaded or accessed via the Sheets API or Apps Script. If you attempt to do so, you'll see a #N/A error in place of the values in the corresponding cells of your spreadsheet.",
      "Quotes are not sourced from all markets and may be delayed up to 20 minutes. Information is provided 'as is' and solely for informational purposes, not for trading purposes or advice.",
      "Dates passed into GOOGLEFINANCE are treated as noon UTC time. Exchanges that close before that time may be shifted by a day."
    ],
    "sampleUsage": [
      "GOOGLEFINANCE(\"NASDAQ:GOOG\", \"price\", DATE(2014,1,1), DATE(2014,12,31), \"DAILY\")",
      "GOOGLEFINANCE(\"NASDAQ:GOOG\",\"price\",TODAY()-30,TODAY())",
      "GOOGLEFINANCE(A2,A3)",
      "GOOGLEFINANCE(ticker, [attribute], [start_date], [end_date|num_days], [interval])"
    ],
    "related": [],
    "syntaxVariables": [
      {
        "name": "ticker",
        "description": "The ticker symbol for the security to consider. It’s mandatory to use both the exchange symbol and ticker symbol for accurate results and to avoid discrepancies. For example, use “NASDAQ:GOOG” instead of “GOOG.”\n\n    \n      \n        If the exchange symbol is not specified, GOOGLEFINANCE will use its best judgement to choose one for you.\n      \n      \n        Note: Reuters Instrument Codes are no longer supported. For example, use TSE:123 or ASX:XYZ instead of ticker 123.TO or XYZ.AX."
      },
      {
        "name": "attribute",
        "description": "[ OPTIONAL - \"price\" by default ] - The attribute to fetch about ticker from Google Finance and is required if a date is specified.\n\n    \n      \n        attribute is one of the following for real-time data:\n\n        \n          \n            \"price\" - Real-time price quote, delayed by up to 20 minutes.\n          \n          \n            \"priceopen\" - The price as of market open.\n          \n          \n            \"high\" - The current day's high price.\n          \n          \n            \"low\" - The current day's low price.\n          \n          \n            \"volume\" - The current day's trading volume.\n          \n          \n            \"marketcap\" - The market capitalization of the stock.\n          \n          \n            \"tradetime\" - The time of the last trade.\n          \n          \n            \"datadelay\" - How far delayed the real-time data is.\n          \n          \n            \"volumeavg\" - The average daily trading volume.\n          \n          \n            \"pe\" - The price/earnings ratio.\n          \n          \n            \"eps\" - The earnings per share.\n          \n          \n            \"high52\" - The 52-week high price.\n          \n          \n            \"low52\" - The 52-week low price.\n          \n          \n            \"change\" - The price change since the previous trading day's close.\n          \n          \n            \"beta\" - The beta value.\n          \n          \n            \"changepct\" - The percentage change in price since the previous trading day's close.\n          \n          \n            \"closeyest\" - The previous day's closing price.\n          \n          \n            \"shares\" - The number of outstanding shares.\n          \n          \n            \"currency\" - The currency in which the security is priced. Currencies don't have trading windows, so open, low, high, and volume won't return for this argument.\n          \n        \n      \n      \n        attribute is one of the following for historical data:\n\n        \n          \n            \"open\" - The opening price for the specified date(s).\n          \n          \n            \"close\" - The closing price for the specified date(s).\n          \n          \n            \"high\" - The high price for the specified date(s).\n          \n          \n            \"low\" - The low price for the specified date(s).\n          \n          \n            \"volume\" - The volume for the specified date(s).\n          \n          \n            \"all\" - All of the above.\n          \n        \n      \n      \n        attribute is one of the following for mutual fund data:\n\n        \n          \n            \"closeyest\" - The previous day's closing price.\n          \n          \n            \"date\" - The date at which the net asset value was reported.\n          \n          \n            \"returnytd\" - The year-to-date return.\n          \n          \n            \"netassets\" - The net assets.\n          \n          \n            \"change\" - The change in the most recently reported net asset value and the one immediately prior.\n          \n          \n            \"changepct\" - The percentage change in the net asset value.\n          \n          \n            \"yieldpct\" - The distribution yield, the sum of the prior 12 months' income distributions (stock dividends and fixed income interest payments) and net asset value gains divided by the previous month's net asset value number.\n          \n          \n            \"returnday\" - One-day total return.\n          \n          \n            \"return1\" - One-week total return.\n          \n          \n            \"return4\" - Four-week total return.\n          \n          \n            \"return13\" - Thirteen-week total return.\n          \n          \n            \"return52\" - Fifty-two-week (annual) total return.\n          \n          \n            \"return156\" - 156-week (3-year) total return.\n          \n          \n            \"return260\" - 260-week (5-year) total return.\n          \n          \n            \"incomedividend\" - The amount of the most recent cash distribution.\n          \n          \n            \"incomedividenddate\" - The date of the most recent cash distribution.\n          \n          \n            \"capitalgain\" - The amount of the most recent capital gain distribution.\n          \n          \n            \"morningstarrating\" - The Morningstar \"star\" rating.\n          \n          \n            \"expenseratio\" - The fund's expense ratio."
      },
      {
        "name": "start_date",
        "description": "[ OPTIONAL ] - The start date when fetching historical data.\n\n    \n      If start_date is specified but end_date|num_days is not, only the single day's data is returned."
      },
      {
        "name": "end_date|num_days",
        "description": "[ OPTIONAL ] - The end date when fetching historical data, or the number of days from start_date for which to return data."
      },
      {
        "name": "interval",
        "description": "[ OPTIONAL ] - The frequency of returned data; either \"DAILY\" or \"WEEKLY\".\n\n    \n      interval can alternatively be specified as 1 or 7. Other numeric values are disallowed."
      }
    ]
  },
  {
    "type": "Google",
    "name": "GOOGLETRANSLATE",
    "syntax": "GOOGLETRANSLATE(text, [source_language], [target_language])",
    "description": "Translates text from one language into another Learn more",
    "link": "https://support.google.com/docs/answer/3093331",
    "notes": [],
    "sampleUsage": [
      "GOOGLETRANSLATE(\"Hello World\",\"en\",\"es\")",
      "GOOGLETRANSLATE(A2,B2,C2)",
      "GOOGLETRANSLATE(A2)"
    ],
    "related": ["DETECTLANGUAGE"],
    "syntaxVariables": [
      {
        "name": "text",
        "description": "The text to translate.\n\n    \n      The value for text must either be enclosed in quotation marks or be a reference to a cell containing the appropriate text."
      },
      {
        "name": "source_language",
        "description": "[ OPTIONAL - \"auto\" by default ] - The two-letter language code of the source language, e.g. \"en\" for English or \"ko\" for Korean, or \"auto\" to auto-detect the language.\n\n    \n      If source_language is omitted, target_language must also be omitted."
      },
      {
        "name": "target_language",
        "description": "[ OPTIONAL - system language by default ] - The two-letter language code of the target language, e.g. \"en\" for English or \"ja\" for Japanese."
      }
    ]
  },
  {
    "type": "Google",
    "name": "IMAGE",
    "syntax": "IMAGE(url, [mode], [height], [width])",
    "description": "Inserts an image into a cell.",
    "link": "https://support.google.com/docs/answer/3093333",
    "notes": [],
    "sampleUsage": [
      "IMAGE(\"https://www.google.com/images/srpr/logo3w.png\")",
      "IMAGE(A2,2)",
      "IMAGE(A2,4,120,200)"
    ],
    "related": [],
    "syntaxVariables": [
      {
        "name": "url",
        "description": "The URL of the image, including protocol (e.g. http://).\n\n    \n      The value for url must either be enclosed in quotation marks or be a reference to a cell containing the appropriate text."
      },
      {
        "name": "mode",
        "description": "[ OPTIONAL - 1 by default ] - The sizing mode for the image\n\n    \n      \n        1 resizes the image to fit inside the cell, maintaining aspect ratio.\n      \n      \n        2 stretches or compresses the image to fit inside the cell, ignoring aspect ratio.\n      \n      \n        3 leaves the image at original size, which may cause cropping.\n      \n      \n        4 allows the specification of a custom size.\n      \n      \n        Note that no mode causes the cell to be resized to fit the image."
      },
      {
        "name": "height",
        "description": "[ OPTIONAL ] - The height of the image in pixels. mode must be set to 4 in order to set a custom height."
      },
      {
        "name": "width",
        "description": "[ OPTIONAL ] - The width of the image in pixels. mode must be set to 4 in order to set a custom width."
      }
    ]
  },
  {
    "type": "Google",
    "name": "QUERY",
    "syntax": "QUERY(data, query, [headers])",
    "description": "Runs a Google Visualization API Query Language query across data.",
    "link": "https://support.google.com/docs/answer/3093343",
    "notes": [],
    "sampleUsage": [
      "QUERY(A2:E6,\"select avg(A) pivot B\")",
      "QUERY(A2:E6,F2,FALSE)",
      "QUERY(data, query, [headers])",
      "Select",
      "Where",
      "Salary",
      "Select",
      "Group by",
      "Dept"
    ],
    "related": [],
    "syntaxVariables": [
      {
        "name": "data",
        "description": "The range of cells to perform the query on.\n\n    \n      \n        Each column of data can only hold boolean, numeric (including date/time types) or string values.\n      \n      \n        In case of mixed data types in a single column, the majority data type determines the data type of the column for query purposes. Minority data types are considered null values."
      },
      {
        "name": "query",
        "description": "The query to perform, written in the Google Visualization API Query Language.\n\n    \n      \n        The value for query must either be enclosed in quotation marks or be a reference to a cell containing the appropriate text.\n      \n      \n        See https://developers.google.com/chart/interactive/docs/querylanguage for further details on the query language."
      },
      {
        "name": "headers",
        "description": "[ OPTIONAL ] - The number of header rows at the top of data. If omitted or set to -1, the value is guessed based on the content of data."
      }
    ]
  },
  {
    "type": "Google",
    "name": "SPARKLINE",
    "syntax": "SPARKLINE(data, [options])",
    "description": "Creates a miniature chart contained within a single cell.",
    "link": "https://support.google.com/docs/answer/3093289",
    "notes": [
      "Colors can be written using their names (e.g., \"green\") or as a hex code (e.g., \"#3D3D3D\").",
      "To modify the color of a line chart, change the font color of the cell."
    ],
    "sampleUsage": [
      "SPARKLINE(A1:F1)",
      "SPARKLINE(A2:E2,{\"charttype\",\"bar\";\"max\",40})",
      "SPARKLINE(A2:E2,A4:B5)",
      "SPARKLINE(A1:A5, {\"charttype\",\"column\"; \"axis\", true; \"axiscolor\", \"red\"})"
    ],
    "related": ["IMAGE", "GOOGLEFINANCE"],
    "syntaxVariables": [
      {
        "name": "data",
        "description": "The range or array containing the data to plot."
      },
      {
        "name": "options",
        "description": "[ OPTIONAL ] - A range or array of optional settings and associated values used to customize the chart.\n\n    \n      \n        If referencing a range, options should be two cells wide where the first cell is the option and the second cell is the value that option is set to.\n      \n      \n        The \"charttype\" option defines the type of chart to plot, which includes:\n\n        \n          \"line\" for a line graph (the default)\n          \"bar\" for a stacked bar chart\n          \"column\" for a column chart\n          \"winloss\" for a special type of column chart that plots 2 possible outcomes: positive and negative (like a coin toss, heads or tails).\n        \n      \n      \n        For line graphs:\n\n        \n          \n            \"xmin\" sets the minimum value along the horizontal axis.\n          \n          \n            \"xmax\" sets the maximum value along the horizontal axis.\n          \n          \n            \"ymin\" sets the minimum value along the vertical axis.\n          \n          \n            \"ymax\" sets the maximum value along the vertical axis.\n          \n          \"color\" sets the color of the line.\n          \"empty\" sets how to treat empty cells. Possible corresponding values include: \"zero\" or \"ignore\".\n          \"nan\" sets how to treat cells with non-numeric data. Options are: \"convert\" and \"ignore\".\n          \"rtl\" determines whether or not the chart is rendered right to left. Options are true or false.\n          \"linewidth\" determines how thick the line will be in the chart. A higher number means a thicker line.\n        \n      \n      \n        For column and winloss sparklines:\n\n        \n          \"color\" sets the color of chart columns.\n          \"lowcolor\" sets the color for the lowest value in the chart\n          \"highcolor\" sets the color for the higest value in the chart\n          \"firstcolor\" sets the color of the first column\n          \"lastcolor\" sets the color of the last column\n          \"negcolor\" sets the color of all negative columns\n          \"empty\" sets how to treat empty cells. Possible corresponding values include: \"zero\" or \"ignore\".\n          \"nan\" sets how to treat cells with non-numeric data. Options are: \"convert\" and \"ignore\".\n          \"axis\" decides if an axis needs to be drawn (true/false)\n          \"axiscolor\" sets the color of the axis (if applicable)\n          \"ymin\" sets the custom minimum data value that should be used for scaling the height of columns (not applicable for win/loss)\n          \"ymax\" sets the custom maximum data value that should be used for scaling the height of columns (not applicable for win/loss)\n          \"rtl\" determines whether or not the chart is rendered right to left. Options are true or false.\n        \n      \n      \n        For bar charts:\n\n        \n          \"max\" sets the maximum value along the horizontal axis.\n          \"color1\" sets the first color used for bars in the chart.\n          \"color2\" sets the second color used for bars in the chart.\n          \"empty\" sets how to treat empty cells. Possible corresponding values include: \"zero\" or \"ignore\".\n          \"nan\" sets how to treat cells with non-numeric data. Options are: \"convert\" and \"ignore\".\n          \"rtl\" determines whether or not the chart is rendered right to left. Options are true or false."
      }
    ]
  },
  {
    "type": "Info",
    "name": "ERROR.TYPE",
    "syntax": "ERROR.TYPE(reference)",
    "description": "Returns a number corresponding to the error value in a different cell.",
    "link": "https://support.google.com/docs/answer/3238305",
    "notes": [
      "ERROR.TYPE will return the following numbers for the corresponding error values:\n\n    \n      1 for #NULL!\n      2 for #DIV/0!\n      3 for #VALUE!\n      4 for #REF!\n      5 for #NAME?\n      6 for #NUM!\n      7 for #N/A\n      8 for all other errors",
      "1 for #NULL!",
      "2 for #DIV/0!",
      "3 for #VALUE!",
      "4 for #REF!",
      "5 for #NAME?",
      "6 for #NUM!",
      "7 for #N/A",
      "8 for all other errors"
    ],
    "sampleUsage": ["ERROR.TYPE(A3)"],
    "related": ["ISNA", "ISERROR", "ISERR"],
    "syntaxVariables": [
      {
        "name": "reference",
        "description": "The cell to find the error number for - you can also provide the error value directly."
      }
    ]
  },
  {
    "type": "Info",
    "name": "ISBLANK",
    "syntax": "ISBLANK(value)",
    "description": "Checks whether the referenced cell is empty.",
    "link": "https://support.google.com/docs/answer/3093290",
    "notes": [
      "ISBLANK returns FALSE if the referenced cell has any content, including spaces, the empty string (\"\"), and hidden characters. In case of unexpected FALSE results, try clearing the cell again to remove any hidden characters.",
      "This function is most often used in conjunction with IF in conditional statements."
    ],
    "sampleUsage": ["ISBLANK(A2)", "IF(ISBLANK(B1),,A1/B1)"],
    "related": [
      "ISTEXT",
      "ISREF",
      "ISNUMBER",
      "ISNONTEXT",
      "ISNA",
      "ISLOGICAL",
      "ISERROR",
      "ISERR"
    ],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "Reference to the cell that will be checked for emptiness.\n\n    \n      ISBLANK returns TRUE if value is empty or a reference to an empty cell, and FALSE if it contains data or a reference to data."
      }
    ]
  },
  {
    "type": "Info",
    "name": "ISDATE",
    "syntax": "ISDATE(value)",
    "description": "Returns whether a value is a date.",
    "link": "https://support.google.com/docs/answer/9061381",
    "notes": [],
    "sampleUsage": ["ISDATE(value)"],
    "related": [],
    "syntaxVariables": []
  },
  {
    "type": "Info",
    "name": "ISEMAIL",
    "syntax": "ISEMAIL(value)",
    "description": "Checks whether a value is a valid email address.",
    "link": "https://support.google.com/docs/answer/3256503",
    "notes": [],
    "sampleUsage": [
      "ISEMAIL(\"noreply@google.com\")",
      "ISEMAIL(\"johndoe@yourname.com\")"
    ],
    "related": ["ISURL", "ISERROR", "ISTEXT", "ISBLANK"],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The value to be verified as an email address."
      }
    ]
  },
  {
    "type": "Info",
    "name": "ISERR",
    "syntax": "ISERR(value)",
    "description": "Checks whether a value is an error other than `#N/A`.",
    "link": "https://support.google.com/docs/answer/3093348",
    "notes": [
      "ISERR returns FALSE on #N/A, unlike ISERROR, which returns TRUE on all errors. Ensure that the correct call is used.",
      "This function is most often used in conjunction with IF in conditional statements."
    ],
    "sampleUsage": ["ISERR(A2)"],
    "related": [
      "ISTEXT",
      "ISREF",
      "ISODD",
      "ISNUMBER",
      "ISNONTEXT",
      "ISNA",
      "ISLOGICAL",
      "ISEVEN",
      "ISERROR",
      "ISBLANK",
      "IF"
    ],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The value to be verified as an error type other than #N/A.\n\n    \n      ISERR returns TRUE if value is any error other than #N/A,including #DIV/0!, #NAME?, #NULL!, #NUM!, #VALUE!, and #REF!. This is useful in certain applications where #N/A may be a valid outcome, whereas the other error types always indicate a fundamental problem."
      }
    ]
  },
  {
    "type": "Info",
    "name": "ISERROR",
    "syntax": "ISERROR(value)",
    "description": "Checks whether a value is an error.",
    "link": "https://support.google.com/docs/answer/3093349",
    "notes": [
      "ISERROR returns TRUE on any error, unlike ISERR, which returns TRUE on all errors except for #N/A. Ensure that the correct call is used.",
      "This function is most often used in conjunction with IF in conditional statements."
    ],
    "sampleUsage": [
      "ISERROR(A2)",
      "ISERROR(A1/A2)",
      "IF(ISERROR(VLOOKUP(B1, A1:A100, 1, FALSE)), \"Result not found\", VLOOKUP(B1, A1:A100, 1, FALSE))"
    ],
    "related": [
      "ISTEXT",
      "ISREF",
      "ISODD",
      "ISNUMBER",
      "ISNONTEXT",
      "ISNA",
      "ISLOGICAL",
      "ISEVEN",
      "ISERR",
      "ISBLANK",
      "IF"
    ],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The value to be verified as an error type.\n\n    \n      ISERROR returns TRUE if value is any error, including #DIV/0!, #N/A, #NAME?,#NULL!, #NUM!, #VALUE!, and #REF!."
      }
    ]
  },
  {
    "type": "Info",
    "name": "ISFORMULA",
    "syntax": "ISFORMULA(cell)",
    "description": "Checks whether a formula is in the referenced cell.",
    "link": "https://support.google.com/docs/answer/6270316",
    "notes": [
      "cell can refer to a cell, a name associated with a cell, or a range (multiple cells).",
      "This function is most often used in conjunction with IF in conditional statements."
    ],
    "sampleUsage": ["ISFORMULA(A2)"],
    "related": [
      "ISERROR",
      "ISTEXT",
      "ISREF",
      "ISODD",
      "ISNUMBER",
      "ISNONTEXT",
      "ISNA",
      "ISLOGICAL",
      "ISEVEN",
      "ISERR",
      "ISBLANK",
      "IF"
    ],
    "syntaxVariables": [
      {
        "name": "cell",
        "description": "The cell to check for a formula.\n\n    \n      ISFORMULA returns TRUE if cell is a cell that contains a formula. If cell contains a range of cells then TRUE will be returned if the first cell in the range contains a formula. All other values will return FALSE."
      }
    ]
  },
  {
    "type": "Info",
    "name": "ISLOGICAL",
    "syntax": "ISLOGICAL(value)",
    "description": "Checks whether a value is `TRUE` or `FALSE`.",
    "link": "https://support.google.com/docs/answer/3093351",
    "notes": [
      "This function is most often used in conjunction with IF in conditional statements."
    ],
    "sampleUsage": ["ISLOGICAL(A2)"],
    "related": [
      "ISTEXT",
      "ISREF",
      "ISODD",
      "ISNUMBER",
      "ISNONTEXT",
      "ISNA",
      "ISEVEN",
      "ISERROR",
      "ISERR",
      "ISBLANK",
      "IF"
    ],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The value to be verified as a logical TRUE or FALSE.\n\n    *ISLOGICAL returns TRUE if value is either TRUE or FALSE or a reference to a cell whose value is either TRUE or FALSE."
      }
    ]
  },
  {
    "type": "Info",
    "name": "ISNA",
    "syntax": "ISNA(value)",
    "description": "Checks whether a value is the error `#N/A`.",
    "link": "https://support.google.com/docs/answer/3093293",
    "notes": [
      "This function is most often used in conjunction with IF in conditional statements."
    ],
    "sampleUsage": ["ISNA(A2)"],
    "related": [
      "ISTEXT",
      "ISREF",
      "ISODD",
      "ISNUMBER",
      "ISNONTEXT",
      "ISLOGICAL",
      "ISEVEN",
      "ISERROR",
      "ISERR",
      "ISBLANK",
      "IF"
    ],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The value to be compared with the error value #N/A.\n\n    *ISNA returns TRUE if value is #N/A or a reference to a cell containing #N/A and false otherwise."
      }
    ]
  },
  {
    "type": "Info",
    "name": "ISNONTEXT",
    "syntax": "ISNONTEXT(value)",
    "description": "Checks whether a value is non-textual.",
    "link": "https://support.google.com/docs/answer/3093295",
    "notes": [
      "Nonprinting characters and whitespace count as text, so when ISNONTEXT is called on a cell containing such characters, the function will return FALSE even though the cell appears empty.",
      "Numbers input as text, e.g. \"1234\" count as text, and will cause ISNONTEXT to return FALSE.",
      "ISNONTEXT(value) is the logical equivalent of NOT(ISTEXT(value))",
      "This function is most often used in conjunction with IF in conditional statements."
    ],
    "sampleUsage": ["ISNONTEXT(A2)", "ISNONTEXT(\"cat\")"],
    "related": [
      "ISTEXT",
      "ISREF",
      "ISODD",
      "ISNUMBER",
      "ISNA",
      "ISLOGICAL",
      "ISEVEN",
      "ISERROR",
      "ISERR",
      "ISBLANK",
      "IF"
    ],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The text to be checked.\n\n    \n      \n        ISNONTEXT returns FALSE if this is a text value or a reference to a cell containing a text value and TRUE otherwise.\n      \n      \n        When value is a reference to an empty cell, ISNONTEXT will return TRUE.\n      \n      \n        When value is an empty string, ISNONTEXT will return FALSE, as the empty string is considered text."
      }
    ]
  },
  {
    "type": "Info",
    "name": "ISNUMBER",
    "syntax": "ISNUMBER(value)",
    "description": "Checks whether a value is a number.",
    "link": "https://support.google.com/docs/answer/3093296",
    "notes": [
      "This function is most often used in conjunction with IF in conditional statements.",
      "Note that supplying a number enclosed in a string (e.g. ISNUMBER(\"123\")) will cause this function to return FALSE."
    ],
    "sampleUsage": ["ISNUMBER(A2)", "ISNUMBER(4)"],
    "related": [
      "ISTEXT",
      "ISREF",
      "ISODD",
      "ISNONTEXT",
      "ISNA",
      "ISLOGICAL",
      "ISEVEN",
      "ISERROR",
      "ISERR",
      "ISBLANK",
      "IF"
    ],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The value to be verified as a number.\n\n    *ISNUMBER returns TRUE if this is a number or a reference to a cell containing a numeric value and FALSE otherwise."
      }
    ]
  },
  {
    "type": "Info",
    "name": "ISREF",
    "syntax": "ISREF(value)",
    "description": "Checks whether a value is a valid cell reference.",
    "link": "https://support.google.com/docs/answer/3093354",
    "notes": [
      "This function is most often used in conjunction with IF in conditional statements."
    ],
    "sampleUsage": ["ISREF(A2)"],
    "related": [
      "ISTEXT",
      "ISODD",
      "ISNUMBER",
      "ISNONTEXT",
      "ISNA",
      "ISLOGICAL",
      "ISEVEN",
      "ISERROR",
      "ISERR",
      "ISBLANK",
      "IF"
    ],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The value to be verified as a cell reference.\n\n    *ISREF returns TRUE if this is a valid cell reference, and FALSE otherwise.\n\n    \n      Providing a string containing a valid cell reference (e.g. \"A2\") for value returns FALSE as the input is a string, not a reference."
      }
    ]
  },
  {
    "type": "Info",
    "name": "ISTEXT",
    "syntax": "ISTEXT(value)",
    "description": "Checks whether a value is text.",
    "link": "https://support.google.com/docs/answer/3093297",
    "notes": [
      "This function is most often used in conjunction with IF in conditional statements.",
      "Note that supplying the empty string to this function (e.g. ISTEXT(\"\")) will cause it to return TRUE whereas a reference to a blank cell will return FALSE."
    ],
    "sampleUsage": ["ISTEXT(A2)", "ISTEXT(\"cat\")"],
    "related": [
      "ISREF",
      "ISODD",
      "ISNUMBER",
      "ISNONTEXT",
      "ISNA",
      "ISLOGICAL",
      "ISEVEN",
      "ISERROR",
      "ISERR",
      "ISBLANK",
      "IF"
    ],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The value to be verified as text.\n\n    \n      ISTEXT returns TRUE if this is a text value or a reference to a cell containing a text value and FALSE otherwise."
      }
    ]
  },
  {
    "type": "Info",
    "name": "N",
    "syntax": "N(value)",
    "description": "Returns the argument provided as a number.",
    "link": "https://support.google.com/docs/answer/3093357",
    "notes": [
      "When using N on numeric values in other cells, formatting (into currencies, scientific notation, etc.) is lost. To specify formatting on the return value of N, simply apply the format desired to the cell containing the formula.",
      "This function is, in fact, rarely necessary as Google Spreadsheet automatically converts between most formats appropriately. It is provided primarily for compatibility with formulas used in other spreadsheet packages."
    ],
    "sampleUsage": ["N(A2)", "N(4)"],
    "related": ["TO_DATE", "T"],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The argument to be converted to a number.\n\n    \n      \n        If value is TRUE, N returns 1.\n      \n      \n        If value is a number, the number is returned.\n      \n      \n        If value is a date or time, N returns a generated serial number, based on the number of days since December 30, 1899.\n\n        \n          Negative values are interpreted as days before this date, and fractional values indicate time of day past midnight.\n        \n      \n      \n        If value is FALSE or any value not listed above, N returns 0."
      }
    ]
  },
  {
    "type": "Info",
    "name": "NA",
    "syntax": "NA()",
    "description": "Returns the \"value not available\" error, `#N/A`.",
    "link": "https://support.google.com/docs/answer/3093359",
    "notes": [],
    "sampleUsage": ["NA()"],
    "related": ["ISNA", "ISERROR", "ISERR"],
    "syntaxVariables": [
      {
        "name": "#N/A",
        "description": " is an error, so both the ISNA and ISERROR functions will return TRUE. Use ISERR to find errors which are not #N/A."
      },
      {
        "name": "=NA()",
        "description": "Typing  into a cell is equivalent to directly entering the error value #N/A."
      },
      {
        "name": "#N/A",
        "description": " is used to mark missing information and to indicate to functions operating on ranges or cells containing such values to halt calculation. For instance, if cell B2 contained the result of an IF statement: =IF(ISBLANK(A1),0,A1) and B2 was subsequently involved in a sum or other formula, that formula would assume that B2 held the correct information. By altering the formula in B2 to =IF(ISBLANK(A1),NA(),A1), any subsequent operation on B2 would halt upon encountering the #N/A error, and return that error."
      },
      {
        "name": "#N/A",
        "description": " errors indicate missing information and signal functions to cease calculation. Use the #N/A value instead of 0 or the cell's results. For example, if A1 contains the value #N/A or =NA(), the formula =A1+A2 will evaluate to #N/A."
      }
    ]
  },
  {
    "type": "Info",
    "name": "TYPE",
    "syntax": "TYPE(value)",
    "description": "Returns a number associated with the type of data passed into the function.",
    "link": "https://support.google.com/docs/answer/3267375",
    "notes": [
      "This function returns the following numbers:\n    \n      1: if value is a number\n      2: if value is text\n      4: if value is boolean\n      16: if value is an error\n      64: if value is an array\n      128: for any other type of cell. For example, in-cell images and sparklines.",
      "1: if value is a number",
      "2: if value is text",
      "4: if value is boolean",
      "16: if value is an error",
      "64: if value is an array",
      "128: for any other type of cell. For example, in-cell images and sparklines.",
      "The function cannot determine whether or not a cell or range of cells is using a formula, only returning the type of value being displayed in the cells."
    ],
    "sampleUsage": ["TYPE(C4)", "TYPE({1;2;3;4;5})"],
    "related": ["ISTEXT", "ISNUMBER", "ISLOGICAL", "ISERROR"],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The data whose type is to be determined."
      }
    ]
  },
  {
    "type": "Info",
    "name": "CELL",
    "syntax": "CELL(info_type, reference)",
    "description": "Returns the requested information about the specified cell.",
    "link": "https://support.google.com/docs/answer/3267071",
    "notes": [
      "info_type can be one of the following values:\n\n    \n      \"address\" - returns an absolute reference as plain text of the top left cell in reference.\n      \"col\" - returns the column number of the cell in reference.\n      \"contents\" - returns the value contained in the top left cell in reference.\n      \"prefix\" - returns a text value based on the horizontal text alignment in the cell in reference. A single quotation mark (') is used for left-aligned text, a double quotation mark (“) for right-aligned text, a carat (^) for centered text, and empty for everything else.\n      \"row\" - returns the row number of the top left cell in reference.\n      \"type\" - returns the type of data in the cell in reference. The following values are returned: \"b\" for a blank cell, \"l\" (for label) if the cell contains plain text, and \"v\" (for value) if the cell contains any other type of data.\n      \"width\" - returns the column width in terms of number of characters that can fit in the cell provided in reference. The number returned is determined based on the width of the zero (0) character at the default font size. Note that this is different from the cell width that Google Sheets uses elsewhere, which is defined in terms of pixels.",
      "\"address\" - returns an absolute reference as plain text of the top left cell in reference.",
      "\"col\" - returns the column number of the cell in reference.",
      "\"contents\" - returns the value contained in the top left cell in reference.",
      "\"prefix\" - returns a text value based on the horizontal text alignment in the cell in reference. A single quotation mark (') is used for left-aligned text, a double quotation mark (“) for right-aligned text, a carat (^) for centered text, and empty for everything else.",
      "\"row\" - returns the row number of the top left cell in reference.",
      "\"type\" - returns the type of data in the cell in reference. The following values are returned: \"b\" for a blank cell, \"l\" (for label) if the cell contains plain text, and \"v\" (for value) if the cell contains any other type of data.",
      "\"width\" - returns the column width in terms of number of characters that can fit in the cell provided in reference. The number returned is determined based on the width of the zero (0) character at the default font size. Note that this is different from the cell width that Google Sheets uses elsewhere, which is defined in terms of pixels."
    ],
    "sampleUsage": ["CELL(\"type\", C2)", "CELL(\"width\", A10)"],
    "related": ["TYPE", "ERROR.TYPE", "ROW", "COLUMN"],
    "syntaxVariables": [
      {
        "name": "info_type",
        "description": "The type of information requested."
      },
      { "name": "reference", "description": "The reference to the cell." }
    ]
  },
  {
    "type": "Logical",
    "name": "AND",
    "syntax": "AND(logical_expression1, [logical_expression2, ...])",
    "description": "Returns true if all of the provided arguments are logically true, and false if any of the provided arguments are logically false.",
    "link": "https://support.google.com/docs/answer/3093301",
    "notes": [
      "The number 0 is logically false; all other numbers (including negative numbers) are logically true."
    ],
    "sampleUsage": [
      "AND(A2 = \"foo\", A3 = \"bar\")",
      "AND(TRUE,FALSE,TRUE)",
      "AND(A1:A10,B1:B10)",
      "AND(0,1,2,3)",
      "AND(logical_expression1, [logical_expression2, ...])",
      "TRUE",
      "TRUE",
      "FALSE",
      "FALSE"
    ],
    "related": ["OR", "NOT"],
    "syntaxVariables": [
      {
        "name": "logical_expression1",
        "description": "An expression or reference to a cell containing an expression that represents some logical value, i.e. TRUE or FALSE, or an expression that can be coerced to a logical value."
      },
      {
        "name": "logical_expression2, ...",
        "description": "[ OPTIONAL ] - Additional expressions or references to cells containing expressions representing some logical values, i.e. TRUE or FALSE, or expressions that can be coerced to logical values."
      }
    ]
  },
  {
    "type": "Logical",
    "name": "FALSE",
    "syntax": "FALSE()",
    "description": "Returns the logical value `FALSE`.",
    "link": "https://support.google.com/docs/answer/3093302",
    "notes": [],
    "sampleUsage": ["FALSE()", "FALSE()"],
    "related": ["TRUE", "NOT"],
    "syntaxVariables": [
      {
        "name": "FALSE",
        "description": "In most cases, Google Sheets will automatically convert the  literal to the logical FALSE value, equivalent to this function."
      }
    ]
  },
  {
    "type": "Logical",
    "name": "IF",
    "syntax": "IF(logical_expression, value_if_true, value_if_false)",
    "description": "Returns one value if a logical expression is `TRUE` and another if it is `FALSE`.",
    "link": "https://support.google.com/docs/answer/3093364",
    "notes": [
      "Ensure that value_if_true and value_if_false are provided to the function in the correct order - this is the single most common source of problems with IF."
    ],
    "sampleUsage": [
      "IF(A2 = \"foo\",\"A2 is foo\")",
      "IF(A2,\"A2 was true\",\"A2 was false\")",
      "IF(TRUE,4,5)"
    ],
    "related": [],
    "syntaxVariables": [
      {
        "name": "logical_expression",
        "description": "An expression or reference to a cell containing an expression that represents some logical value, i.e. TRUE or FALSE."
      },
      {
        "name": "value_if_true",
        "description": "The value the function returns if logical_expression is TRUE."
      },
      {
        "name": "value_if_false",
        "description": "[ OPTIONAL - blank by default ] - The value the function returns if logical_expression is FALSE."
      }
    ]
  },
  {
    "type": "Logical",
    "name": "IFERROR",
    "syntax": "IFERROR(value, [value_if_error])",
    "description": "Returns the first argument if it is not an error value, otherwise returns the second argument if present, or a blank if the second argument is absent. Learn more",
    "link": "https://support.google.com/docs/answer/3093304",
    "notes": [
      "IFERROR(exp1,exp2) is logically equivalent to IF(NOT(ISERROR(exp1)),exp1,exp2). Ensure that this is the desired behavior."
    ],
    "sampleUsage": [
      "IFERROR(A1,\"Error in cell A1\")",
      "IFERROR(A2)",
      "test",
      "value",
      "value",
      "test",
      "value",
      "test",
      "unit price",
      "Quantity",
      "Grade",
      "Student ID"
    ],
    "related": ["ISNA", "ISERROR", "ISERR", "IF"],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The value to return if value itself is not an error."
      },
      {
        "name": "value_if_error",
        "description": "[ OPTIONAL - blank by default ] - The value the function returns if value is an error."
      }
    ]
  },
  {
    "type": "Logical",
    "name": "IFNA",
    "syntax": "IFNA(value, value_if_na)",
    "description": "Evaluates a value. If the value is an #N/A error, returns the specified value.",
    "link": "https://support.google.com/docs/answer/9365944",
    "notes": [
      "IFERROR: Returns the first argument if it is not an error value, otherwise returns the second argument if present, or a blank if the second argument is absent."
    ],
    "sampleUsage": ["IFNA(value, value_if_na)", "IFNA(205, “Na error”)"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "If value or value_if_na is an empty cell, IFNA treats the cell’s value as an empty string (“”)."
      },
      {
        "name": "",
        "description": "If value is a range reference, IFNA returns an array formula result with one entry for in-the-range reference."
      }
    ]
  },
  {
    "type": "Logical",
    "name": "IFS",
    "syntax": "IFS(condition1, value1, [condition2, value2], …)",
    "description": "Evaluates multiple conditions and returns a value that corresponds to the first true condition.",
    "link": "https://support.google.com/docs/answer/7014145",
    "notes": ["If all conditions are FALSE, #N/A is returned."],
    "sampleUsage": [
      "IFS(A1>90, \"A\", A1>80, \"B\", A1>70, \"C\")",
      "IFS({A1:A5} > 3, \"bigger\", {A1:A5} = 3, \"equal\")"
    ],
    "related": ["IF", "SWITCH", "MAXIFS", "MINIFS"],
    "syntaxVariables": [
      {
        "name": "condition1",
        "description": "The first condition to be evaluated. This can be a boolean, a number, an array, or a reference to any of those."
      },
      {
        "name": "value1",
        "description": "The returned value if condition1 is TRUE."
      },
      {
        "name": "condition2, value2, …",
        "description": "Additional conditions and values if the first one is evaluated to be false."
      }
    ]
  },
  {
    "type": "Logical",
    "name": "NOT",
    "syntax": "NOT(logical_expression)",
    "description": "Returns the opposite of a logical value - `NOT(TRUE)` returns `FALSE`; `NOT(FALSE)` returns `TRUE`.",
    "link": "https://support.google.com/docs/answer/3093305",
    "notes": [
      "Because 0 has a logical value of FALSE and any non-zero numeric value has a logical value of TRUE, NOT(0) returns TRUE and NOT(6) returns FALSE. However, when non-numeric values are input into NOT, the function returns the error #VALUE!."
    ],
    "sampleUsage": ["NOT(A2)", "NOT(ISERR(A2))"],
    "related": ["FALSE", "TRUE"],
    "syntaxVariables": [
      {
        "name": "logical_expression",
        "description": "An expression or reference to a cell holding an expression that represents some logical value, i.e. TRUE or FALSE."
      }
    ]
  },
  {
    "type": "Logical",
    "name": "OR",
    "syntax": "OR(logical_expression1, [logical_expression2, ...])",
    "description": "Returns true if any of the provided arguments are logically true, and false if all of the provided arguments are logically false.",
    "link": "https://support.google.com/docs/answer/3093306",
    "notes": [
      "The number 0 is logically false; all other numbers (including negative numbers) are logically true."
    ],
    "sampleUsage": [
      "OR(A2 = \"foo\", A3 = \"bar\")",
      "OR(TRUE,FALSE,TRUE)",
      "OR(A1:A10,B1:B10)",
      "OR(0,1,2,3)",
      "OR(logical_expression1, [logical_expression2, ...])",
      "TRUE",
      "TRUE"
    ],
    "related": ["NOT", "AND"],
    "syntaxVariables": [
      {
        "name": "logical_expression1",
        "description": "An expression or reference to a cell containing an expression that represents some logical value, i.e. TRUE or FALSE, or an expression that can be coerced to a logical value."
      },
      {
        "name": "logical_expression2, ...",
        "description": "[ OPTIONAL ] - Additional expressions or references to cells containing expressions representing some logical values, i.e. TRUE or FALSE, or expressions that can be coerced to logical values."
      }
    ]
  },
  {
    "type": "Logical",
    "name": "SWITCH",
    "syntax": "SWITCH(expression, case1, value1, [default or case2, value2], …)",
    "description": "Tests an expression against a list of cases and returns the corresponding value of the first matching case, with an optional default value if nothing else is met.",
    "link": "https://support.google.com/docs/answer/7013690",
    "notes": [],
    "sampleUsage": [
      "SWITCH(A1:A10, 0, “No”, 1, “Other”)",
      "SWITCH(A3:A8, 4, “Four”, 8, “Eight”)"
    ],
    "related": ["IFS", "IF"],
    "syntaxVariables": [
      { "name": "expression", "description": "Any valid values." },
      {
        "name": "case1",
        "description": "The first case to be checked against expression."
      },
      {
        "name": "value1",
        "description": "The corresponding value to be returned if case1 matches expression."
      },
      {
        "name": "case2, value2, … -",
        "description": " Optional: Additional cases and values if the first one doesn’t match the expression."
      },
      {
        "name": "default -",
        "description": " Optional: An optional value, specified as the last parameter, to be returned if none of the cases match the expression."
      }
    ]
  },
  {
    "type": "Logical",
    "name": "TRUE",
    "syntax": "TRUE()",
    "description": "Returns the logical value `TRUE`.",
    "link": "https://support.google.com/docs/answer/3093307",
    "notes": [],
    "sampleUsage": ["TRUE()", "TRUE()"],
    "related": ["NOT", "FALSE"],
    "syntaxVariables": [
      {
        "name": "TRUE",
        "description": "In most cases, Google Sheets will automatically convert the  literal to the logical TRUE value, equivalent to this function."
      }
    ]
  },
  {
    "type": "Logical",
    "name": "XOR",
    "syntax": "XOR(logical_expression1, [logical_expression2, ...])",
    "description": "The XOR function performs an exclusive or of 2 numbers that returns a 1 if the numbers are different, and a 0 otherwise.",
    "link": "https://support.google.com/docs/answer/9116491",
    "notes": [
      "OR: The OR function returns true if any of the provided arguments are logically true, and false if all of the provided arguments are logically false.",
      "AND: The AND function returns true if all of the provided arguments are logically true, and false if any of the provided arguments are logically false."
    ],
    "sampleUsage": [
      "XOR(logical_expression1, [logical_expression2, ...])",
      "XOR(TRUE, FALSE, TRUE)",
      "XOR(A2=TRUE, A3=FALSE)",
      "XOR(A1:A10, B1:B10)"
    ],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "The number 0 is logically false. All other numbers (including negative numbers) are logically true."
      },
      {
        "name": "",
        "description": "The XOR function accepts both logical value and range parameters."
      },
      {
        "name": "",
        "description": "Returns TRUE if an odd number of arguments are TRUE."
      }
    ]
  },
  {
    "type": "Lookup",
    "name": "ADDRESS",
    "syntax": "ADDRESS(row, column, [absolute_relative_mode], [use_a1_notation], [sheet])",
    "description": "Returns a cell reference as a string.",
    "link": "https://support.google.com/docs/answer/3093308",
    "notes": [
      "When using optional parameters such as sheet, ensure that commas are inserted to indicate which parameter is being set."
    ],
    "sampleUsage": [
      "ADDRESS(1,2)",
      "ADDRESS(1,2,4,FALSE)",
      "ADDRESS(1,2,,,\"Sheet2\")"
    ],
    "related": ["OFFSET", "MATCH", "INDEX"],
    "syntaxVariables": [
      { "name": "row", "description": "The row number of the cell reference" },
      {
        "name": "column",
        "description": "The column number (not name) of the cell reference. A is column number 1."
      },
      {
        "name": "absolute_relative_mode",
        "description": "[ OPTIONAL - 1 by default ] - An indicator of whether the reference is row/column absolute. 1 is row and column absolute (e.g. $A$1), 2 is row absolute and column relative (e.g. A$1), 3 is row relative and column absolute (e.g. $A1), and 4 is row and column relative (e.g. A1)."
      },
      {
        "name": "use_a1_notation",
        "description": "[ OPTIONAL - TRUE by default ] - A boolean indicating whether to use A1 style notation (TRUE) or R1C1 style notation (FALSE)."
      },
      {
        "name": "sheet",
        "description": "[ OPTIONAL - absent by default ] - A string indicating the name of the sheet into which the address points."
      }
    ]
  },
  {
    "type": "Lookup",
    "name": "CHOOSE",
    "syntax": "CHOOSE(index, choice1, [choice2, ...])",
    "description": "Returns an element from a list of choices based on index.",
    "link": "https://support.google.com/docs/answer/3093371",
    "notes": [],
    "sampleUsage": [
      "CHOOSE(2,\"A\",\"B\",\"C\")",
      "CHOOSE(index, choice1, [choice2, ...])"
    ],
    "related": ["OFFSET"],
    "syntaxVariables": [
      {
        "name": "index",
        "description": "Which choice (of the up to 29 provided) to return.\n\n    \n      If index is zero, negative, or greater than the number of choices provided, the #NUM! error is returned."
      },
      {
        "name": "choice1",
        "description": "A potential value to return. Required. May be a reference to a cell or an individual value."
      },
      {
        "name": "choice2, ...",
        "description": "Additional values among which to choose."
      }
    ]
  },
  {
    "type": "Lookup",
    "name": "COLUMN",
    "syntax": "COLUMN([cell_reference])",
    "description": "Returns the column number of a specified cell, with `A=1`.",
    "link": "https://support.google.com/docs/answer/3093373",
    "notes": [],
    "sampleUsage": ["COLUMN(A9)"],
    "related": ["ROWS", "ROW", "COLUMNS"],
    "syntaxVariables": [
      {
        "name": "cell_reference",
        "description": "[ OPTIONAL - By default, the cell containing the formula ] - The cell whose column number will be returned. Column A corresponds to 1.\n\n    \n      if cell_reference is a range more than one cell wide and the formula is not used as an array formula, the position of the first column in cell_reference is returned."
      }
    ]
  },
  {
    "type": "Lookup",
    "name": "COLUMNS",
    "syntax": "COLUMNS(range)",
    "description": "Returns the number of columns in a specified array or range.",
    "link": "https://support.google.com/docs/answer/3093374",
    "notes": [],
    "sampleUsage": ["COLUMNS(A9:W62)", "COLUMNS({1,2,3,4,5})"],
    "related": ["ROWS", "ROW", "COLUMN"],
    "syntaxVariables": [
      {
        "name": "range",
        "description": "The range whose column count will be returned"
      }
    ]
  },
  {
    "type": "Lookup",
    "name": "FORMULATEXT",
    "syntax": "FORMULATEXT(cell)",
    "description": "Returns the formula as a string. Learn more.",
    "link": "https://support.google.com/docs/answer/9365792",
    "notes": [],
    "sampleUsage": [],
    "related": [],
    "syntaxVariables": [
      {
        "name": "FORMULATEXT",
        "description": " returns what is displayed in the formula bar when selecting a cell."
      },
      {
        "name": "FORMULATEXT",
        "description": "If the cell passed into  references the cell that contains the FORMULATEXT formula, then FORMULATEXT will properly handle this and avoid a circular reference."
      },
      {
        "name": "FORMULATEXT",
        "description": "If a range is passed into , only the top left most cell is evaluated."
      }
    ]
  },
  {
    "type": "Lookup",
    "name": "GETPIVOTDATA",
    "syntax": "GETPIVOTDATA(value_name, any_pivot_table_cell, [original_column, ...], [pivot_item, ...]",
    "description": "Extracts an aggregated value from a pivot table that corresponds to the specified row and column headings.",
    "link": "https://support.google.com/docs/answer/6167538",
    "notes": [
      "Text provided to the arguments is not case-sensitive, except when referring to field names. You can use any combination of uppercase or lowercase letters.",
      "If you use a custom heading for a field in your pivot table, GETPIVOTDATA will only work with the custom heading instead of the column name in the source data.",
      "While any cell in the pivot table may be chosen for any_pivot_table_cell, it's best to choose the cell in the top corner.  If the pivot table decreases in size as data is modified, and the chosen cell is no longer in the pivot table, then GETPIVOTDATA will result in an error.",
      "A value must appear in the pivot table itself in order for it to be returned by GETPIVOTDATA."
    ],
    "sampleUsage": [
      "GETPIVOTDATA(\"SUM of number of units\", 'Pivot table'!A1)",
      "GETPIVOTDATA(\"AVERAGE of price per unit\", A1, \"division\", \"east\")",
      "GETPIVOTDATA(\"price per unit\", B2, \"division\", \"east\", \"subdivision\", 2)",
      "GETPIVOTDATA(A1, 'Pivot table'!A1, \"division\", A2)",
      "GETPIVOTDATA(value_name, any_pivot_table_cell, [original_column, ...], [pivot_item, ...])"
    ],
    "related": ["QUERY", "FILTER", "DATE", "TIME"],
    "syntaxVariables": [
      {
        "name": "value_name",
        "description": " - The name of the value in the pivot table for which you want to get data.\n\n    \n      value_name must be enclosed in quotation marks or be a reference to any cell containing the appropriate text.\n      If there is more than one value field, you have to use the exact name that appears in the pivot table (For example, “SUM of Sales”)."
      },
      {
        "name": "any_pivot_table_cell",
        "description": " - Any reference to a cell in the desired pivot table (top corner recommended)."
      },
      {
        "name": "original_column",
        "description": " - [ OPTIONAL ] - The name of the column in the source data set (not the pivot table)."
      },
      {
        "name": "pivot_item",
        "description": " - [ OPTIONAL ] - The name of the row or column shown in the pivot table corresponding to original_column that you want to retrieve."
      }
    ]
  },
  {
    "type": "Lookup",
    "name": "HLOOKUP",
    "syntax": "HLOOKUP(search_key, range, index, [is_sorted])",
    "description": "Horizontal lookup. Searches across the first row of a range for a key and returns the value of a specified cell in the column found.",
    "link": "https://support.google.com/docs/answer/3093375",
    "notes": [
      "When searching for numeric or date values, make sure that the first row in the range is not sorted by text values. For example, correctly sorted numbers should appear as (1, 2, 10, 100) rather than (1, 10, 100, 2) as they would be if they were sorted as strings. Using an incorrect sort type may cause incorrect values to be returned.",
      "Search keys based on regular expressions or wildcard patterns are NOT supported. Use QUERY instead.",
      "HLOOKUP has much better performance with sorted ranges and is_sorted set to TRUE. Consider sorting the row being searched."
    ],
    "sampleUsage": [
      "HLOOKUP(10003, A2:Z6, 2, FALSE)",
      "HLOOKUP(search_key, range, index, [is_sorted])",
      "HLOOKUP",
      "HLOOKUP",
      "is_sorted",
      "TRUE",
      "HLOOKUP"
    ],
    "related": ["QUERY", "VLOOKUP"],
    "syntaxVariables": [
      {
        "name": "search_key",
        "description": "The value to search for. For example, 42, \"Cats\", or I24."
      },
      {
        "name": "range",
        "description": "The range to consider for the search. The first row in the range is searched for the key specified in search_key."
      },
      {
        "name": "index",
        "description": "The row index of the value to be returned, where the first row in range is numbered 1.\n\n    \n      If index is not between 1 and the number of rows in range, #VALUE! is returned."
      },
      {
        "name": "is_sorted",
        "description": "[OPTIONAL - TRUE by default] - Indicates whether the row to be searched (the first row of the specified range) is sorted.\n\n    \n      \n        If is_sorted is TRUE or omitted, the nearest match (less than or equal to the search key) is returned. If all values in the search row are greater than the search key, #N/A is returned.\n      \n      \n        If is_sorted is set to TRUE or omitted, and the first row of the range is not in sorted order, an incorrect value might be returned.\n      \n      \n        If is_sorted is FALSE, only an exact match is returned. If there are multiple matching values, the content of the cell corresponding to the first value found is returned, and #N/A is returned if no such value is found."
      }
    ]
  },
  {
    "type": "Lookup",
    "name": "INDEX",
    "syntax": "INDEX(reference, [row], [column])",
    "description": "Returns the content of a cell, specified by row and column offset.",
    "link": "https://support.google.com/docs/answer/3098242",
    "notes": [
      "If you set row or column to 0, INDEX returns the array of values for the entire column or row, respectively."
    ],
    "sampleUsage": ["INDEX(A1:C20, 5, 1)"],
    "related": ["MATCH", "OFFSET"],
    "syntaxVariables": [
      {
        "name": "reference",
        "description": "The array of cells to be offset into."
      },
      {
        "name": "row",
        "description": "[OPTIONAL - 0 by default] - The number of offset rows."
      },
      {
        "name": "column",
        "description": "[OPTIONAL - 0 by default] - The number of offset columns."
      }
    ]
  },
  {
    "type": "Lookup",
    "name": "INDIRECT",
    "syntax": "INDIRECT(cell_reference_as_string, [is_A1_notation])",
    "description": "Returns a cell reference specified by a string.",
    "link": "https://support.google.com/docs/answer/3093377",
    "notes": [],
    "sampleUsage": [
      "INDIRECT(\"Sheet2!\"&B10)",
      "INDIRECT(\"A2\")",
      "INDIRECT(\"R2C3\", FALSE)"
    ],
    "related": [],
    "syntaxVariables": [
      {
        "name": "cell_reference_as_string",
        "description": "A cell reference, written as a string with surrounding quotation marks."
      },
      {
        "name": "is_A1_notation",
        "description": "[OPTIONAL - TRUE by default] - Indicates if the cell reference is in A1 notation or R1C1 notation."
      }
    ]
  },
  {
    "type": "Lookup",
    "name": "LOOKUP",
    "syntax": "LOOKUP(search_key, search_range|search_result_array, [result_range])",
    "description": "Looks through a row or column for a key and returns the value of the cell in a result range located in the same position as the search row or column.",
    "link": "https://support.google.com/docs/answer/3256570",
    "notes": [],
    "sampleUsage": [
      "LOOKUP(10003, A1:A100, B1:B100)",
      "LOOKUP(10003, A1:B100)",
      "LOOKUP(\"foo\", A1:Z10)",
      "LOOKUP(search_key, search_range|search_result_array, [result_range])",
      "LOOKUP",
      "search_range",
      "search_result_array",
      "VLOOKUP",
      "HLOOKUP",
      "search_key",
      "search_key",
      "search_result_array",
      "VLOOKUP",
      "HLOOKUP"
    ],
    "related": ["VLOOKUP", "HLOOKUP", "MATCH"],
    "syntaxVariables": [
      {
        "name": "search_key",
        "description": "The value to search for in the row or column. For example, 42, \"Cats\", or I24."
      },
      {
        "name": "search_range|search_result_array",
        "description": "One method of using LOOKUP is to provide a single row or column search_range to look through for the search with a second argument result_range. The other way is to combine these two arguments into one search_result_array where the first row or column is searched and a value is returned from the last row or column in the array."
      },
      {
        "name": "result_range",
        "description": "[ OPTIONAL ] - The range from which to return a result. The value returned corresponds to the location where search_key is found in search_range. This range must be only a single row or column and should not be used if using the search_result_array method."
      }
    ]
  },
  {
    "type": "Lookup",
    "name": "MATCH",
    "syntax": "MATCH(search_key, range, [search_type])",
    "description": "Returns the relative position of an item in a range that matches a specified value.",
    "link": "https://support.google.com/docs/answer/3093378",
    "notes": [
      "MATCH returns the position in an array or range of a matched value rather than the value itself. To return the value itself or another value corresponding to the row or column the match is found in, use INDEX, HLOOKUP, or VLOOKUP."
    ],
    "sampleUsage": [
      "MATCH(\"Sunday\",A2:A9,0)",
      "MATCH(DATE(2012,1,1),A2:F2)",
      "MATCH(search_key, range, [search_type])"
    ],
    "related": ["VLOOKUP", "HLOOKUP", "INDEX", "INDEX", "HLOOKUP", "VLOOKUP"],
    "syntaxVariables": [
      {
        "name": "search_key",
        "description": "The value to search for. For example, 42, \"Cats\", or I24."
      },
      {
        "name": "range",
        "description": "The one-dimensional array to be searched.\n\n    \n      If a range with both height and width greater than 1 is used, MATCH will return #N/A!."
      },
      {
        "name": "search_type",
        "description": "[ OPTIONAL - 1 by default ] - The manner in which to search.\n\n    \n      \n        1, the default, causes MATCH to assume that the range is sorted in ascending order and return the largest value less than or equal to search_key.\n      \n      \n        0 indicates exact match, and is required in situations where range is not sorted.\n      \n      \n        -1 causes MATCH to assume that the range is sorted in descending order and return the smallest value greater than or equal to search_key."
      }
    ]
  },
  {
    "type": "Lookup",
    "name": "OFFSET",
    "syntax": "OFFSET(cell_reference, offset_rows, offset_columns, [height], [width])",
    "description": "Returns a range reference shifted a specified number of rows and columns from a starting cell reference.",
    "link": "https://support.google.com/docs/answer/3093379",
    "notes": [
      "If offset_rows or offset_columns is negative, it is possible for the offset target to to be outside the upper or left edge of the spreadsheet. If this occurs, the #REF! error will be returned.",
      "If OFFSET is used as an array formula, it is possible for the value returned by the array formula to overwrite part of the offset target, causing a circular reference. If this occurs, the #REF! error will be returned."
    ],
    "sampleUsage": ["OFFSET(A2,3,4,2,2)", "OFFSET(A2,1,1)"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "cell_reference",
        "description": "The starting point from which to count the offset rows and columns."
      },
      {
        "name": "offset_rows",
        "description": "The number of rows to shift by.\n\n    \n      offset_rows must be an integer, but may be negative. If a decimal value is provided, the decimal part will be truncated."
      },
      {
        "name": "offset_columns",
        "description": "The number of columns to shift by.\n\n    \n      offset_columns must be an integer, but may be negative. If a decimal value is provided, the decimal part will be truncated."
      },
      {
        "name": "height",
        "description": "[ OPTIONAL ] - The height of the range to return starting at the offset target."
      },
      {
        "name": "width",
        "description": "[ OPTIONAL ] - The width of the range to return starting at the offset target."
      }
    ]
  },
  {
    "type": "Lookup",
    "name": "ROW",
    "syntax": "ROW([cell_reference])",
    "description": "Returns the row number of a specified cell.",
    "link": "https://support.google.com/docs/answer/3093316",
    "notes": [],
    "sampleUsage": ["ROW(A9)"],
    "related": ["ROWS", "COLUMNS", "COLUMN"],
    "syntaxVariables": [
      {
        "name": "cell_reference",
        "description": "[ OPTIONAL - The cell in which the formula is entered by default ] - The cell whose row number will be returned.\n\n    \n      if cell_reference is a range more than one cell wide and the formula is not used as an array formula, only the numeric value of the first row in cell_reference is returned."
      }
    ]
  },
  {
    "type": "Lookup",
    "name": "ROWS",
    "syntax": "ROWS(range)",
    "description": "Returns the number of rows in a specified array or range.",
    "link": "https://support.google.com/docs/answer/3093382",
    "notes": [],
    "sampleUsage": ["ROWS(A9:A62)", "ROWS({1;2;3;4;5})"],
    "related": ["ROW", "COLUMNS", "COLUMN"],
    "syntaxVariables": [
      {
        "name": "range",
        "description": "The range whose row count will be returned"
      }
    ]
  },
  {
    "type": "Lookup",
    "name": "VLOOKUP",
    "syntax": "VLOOKUP(search_key, range, index, [is_sorted])",
    "description": "Vertical lookup. Searches down the first column of a range for a key and returns the value of a specified cell in the row found.",
    "link": "https://support.google.com/docs/answer/3093318",
    "notes": [
      "If is_sorted is set to TRUE or omitted, and the first column of the range is not in sorted order, an incorrect value might be returned. If VLOOKUP doesn’t appear to be giving correct results, check that the last argument is set to FALSE. If the data is sorted and you need to optimize for performance, set it to TRUE. In most cases it should be set to FALSE.",
      "When searching for numeric or date values, make sure that the first column in the range is not sorted by text values. For example, correctly sorted numbers should appear as (1, 2, 10, 100) rather than (1, 10, 100, 2) as they would be if they were sorted as strings. Using an incorrect sort type may cause incorrect values to be returned.",
      "Search keys based on regular expressions are NOT supported. Use QUERY instead.",
      "VLOOKUP has much better performance with sorted ranges and is_sorted set to TRUE. Consider sorting the column being searched.",
      "You can also find matches using pattern strings that include wildcards. The question mark (?) and asterisk (*) are the wildcards for search_key, with the question mark standing in for a single character and the asterisk standing in for any series of characters. If you need to match an actual question mark or asterisk, add a tilde (~) before the character and add an extra tilde if you're looking for something with an actual tilde in it."
    ],
    "sampleUsage": [
      "VLOOKUP(10003, A2:B26, 2, FALSE)",
      "VLOOKUP(search_key, range, index, [is_sorted])",
      "VLOOKUP",
      "VLOOKUP",
      "is_sorted",
      "TRUE",
      "VLOOKUP"
    ],
    "related": ["QUERY", "HLOOKUP"],
    "syntaxVariables": [
      {
        "name": "search_key",
        "description": "The value to search for. For example, 42, \"Cats\", or I24."
      },
      {
        "name": "range",
        "description": "The range to consider for the search. The first column in the range is searched for the key specified in search_key."
      },
      {
        "name": "index",
        "description": "The column index of the value to be returned, where the first column in range is numbered 1.\n\n    \n      If index is not between 1 and the number of columns in range, #VALUE! is returned."
      },
      {
        "name": "is_sorted",
        "description": "[TRUE by default] - Indicates whether the column to be searched (the first column of the specified range) is sorted. FALSE is recommended in most cases.\n\n    \n      \n        It’s recommended to set is_sorted to FALSE. If set to FALSE, an exact match is returned. If there are multiple matching values, the content of the cell corresponding to the first value found is returned, and #N/A is returned if no such value is found.\n      \n      \n        If is_sorted is TRUE or omitted, the nearest match (less than or equal to the search key) is returned. If all values in the search column are greater than the search key, #N/A is returned."
      }
    ]
  },
  {
    "type": "Math",
    "name": "ABS",
    "syntax": "ABS(value)",
    "description": "Returns the absolute value of a number.",
    "link": "https://support.google.com/docs/answer/3093459",
    "notes": [],
    "sampleUsage": ["ABS(-2)", "ABS(A2)"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The number of which to return the absolute value."
      }
    ]
  },
  {
    "type": "Math",
    "name": "ACOS",
    "syntax": "ACOS(value)",
    "description": "Returns the inverse cosine of a value, in radians.",
    "link": "https://support.google.com/docs/answer/3093461",
    "notes": [
      "Use the DEGREES function to convert the result of ACOS into degrees.",
      "Cosine is periodic, therefore there are many solutions to the inverse. ACOS returns the solution between 0 and Pi."
    ],
    "sampleUsage": ["ACOS(0)", "ACOS(A2)", "ACOS(1)"],
    "related": [
      "TANH",
      "TAN",
      "SINH",
      "SIN",
      "RADIANS",
      "PI",
      "DEGREES",
      "COSH",
      "COS",
      "ATANH",
      "ATAN2",
      "ATAN",
      "ASINH",
      "ASIN",
      "ACOSH"
    ],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The value for which to calculate the inverse cosine. Must be between -1 and 1, inclusive."
      }
    ]
  },
  {
    "type": "Math",
    "name": "ACOSH",
    "syntax": "ACOSH(value)",
    "description": "Returns the inverse hyperbolic cosine of a number.",
    "link": "https://support.google.com/docs/answer/3093391",
    "notes": [
      "Google Sheets does not support imaginary or complex numbers, so these are not valid inputs or outputs from hyperbolic functions."
    ],
    "sampleUsage": ["ACOSH(2)", "ACOSH(A1)"],
    "related": [
      "TANH",
      "TAN",
      "SINH",
      "SIN",
      "RADIANS",
      "PI",
      "DEGREES",
      "COSH",
      "COS",
      "ATANH",
      "ATAN2",
      "ATAN",
      "ASINH",
      "ASIN",
      "ACOS"
    ],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The value for which to calculate the inverse hyperbolic cosine. Must be greater than or equal to 1."
      }
    ]
  },
  {
    "type": "Math",
    "name": "ACOT",
    "syntax": "ACOT(value)",
    "description": "Returns the inverse cotangent of a value, in radians.",
    "link": "https://support.google.com/docs/answer/9084227",
    "notes": [
      "ACOTH: The ACOTH function returns the inverse hyperbolic cotangent of a value in radians.",
      "COT: The COT function returns the cotangent of an angle provided in radians.",
      "COTH: The COTH function returns the hyperbolic cotangent of any real number.",
      "ATANH: The ATANH function returns the inverse hyperbolic tangent of a number.",
      "ATAN: The ATAN function returns the inverse tangent of a value in radians.",
      "ASINH: The ASINH function returns the inverse hyperbolic sine of a number.",
      "ASIN: The ASIN function returns the inverse sine of a value in radians.",
      "ACOSH: The ACOSH function returns the inverse hyperbolic cosine of a number.",
      "ACOS: The ACOS function returns the inverse cosine of a value in radians.",
      "DEGREES: The DEGREES function converts an angle value in radians to degrees.",
      "RADIANS: The RADIANS function converts an angle value in degrees to radians.",
      "PI: The PI function returns the value of pi to 9 decimal places."
    ],
    "sampleUsage": ["ACOT(value)", "ACOT(0)", "ACOT(-1)"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "ACOT returns results that are between 0 and π (pi)."
      },
      {
        "name": "",
        "description": "ACOT is sometimes written as \"arccot\" or \"cot-1(x)\" in mathematics or other programs."
      },
      {
        "name": "",
        "description": "Use the DEGREES function to convert the result of ACOT from radians to degrees."
      }
    ]
  },
  {
    "type": "Math",
    "name": "ACOTH",
    "syntax": "ACOTH(value)",
    "description": "Returns the inverse hyperbolic cotangent of a value, in radians. Must not be between -1 and 1, inclusive.",
    "link": "https://support.google.com/docs/answer/9084097",
    "notes": [
      "ACOT: The ACOT function returns the inverse cotangent of a value in radians.",
      "COTH: The COTH function returns the hyperbolic cotangent of any real number.",
      "COT: The COT function returns the cotangent of an angle provided in radians.",
      "ATANH: The ATANH function returns the inverse hyperbolic tangent of a number.",
      "ATAN: The ATAN function returns the inverse tangent of a value in radians.",
      "ASINH: The ASINH function returns the inverse hyperbolic sine of a number.",
      "ASIN: The ASIN function returns the inverse sine of a value in radians.",
      "ACOSH: The ACOSH function returns the inverse hyperbolic cosine of a number.",
      "ACOS: The ACOS function returns the inverse cosine of a value in radians.",
      "DEGREES: The DEGREES function converts an angle value in radians to degrees.",
      "RADIANS: The RADIANS function converts an angle value in degrees to radians.",
      "PI: The PI function returns the value of pi to 9 decimal places."
    ],
    "sampleUsage": ["ACOTH(value)", "ACOTH(2)", "ACOTH(10)"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "If a number between -1 and 1 is passed to ACOTH, then the #NUM error is returned."
      },
      {
        "name": "",
        "description": "ACOTH is sometimes written as \"arccoth\" or \"coth-1(x)\" in mathematics or other programs."
      },
      {
        "name": "",
        "description": "Use the DEGREES function to convert the result of ACOTH from radians to degrees."
      }
    ]
  },
  {
    "type": "Math",
    "name": "ASIN",
    "syntax": "ASIN(value)",
    "description": "Returns the inverse sine of a value, in radians.",
    "link": "https://support.google.com/docs/answer/3093464",
    "notes": [
      "Use the DEGREES function to convert the result of ASIN into degrees.",
      "Sine is periodic, therefore there are many solutions to the inverse. ASIN returns the solution between -Pi/2 and Pi/2."
    ],
    "sampleUsage": ["ASIN(0)", "ASIN(A2)", "ASIN(1)"],
    "related": [
      "TANH",
      "TAN",
      "SINH",
      "SIN",
      "RADIANS",
      "PI",
      "DEGREES",
      "COSH",
      "COS",
      "ATANH",
      "ATAN2",
      "ATAN",
      "ASINH",
      "ACOSH",
      "ACOS"
    ],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The value for which to calculate the inverse sine. Must be between -1 and 1, inclusive."
      }
    ]
  },
  {
    "type": "Math",
    "name": "ASINH",
    "syntax": "ASINH(value)",
    "description": "Returns the inverse hyperbolic sine of a number.",
    "link": "https://support.google.com/docs/answer/3093393",
    "notes": [
      "Google Sheets does not support imaginary or complex numbers, so these are not valid inputs or outputs from hyperbolic functions."
    ],
    "sampleUsage": ["ASINH(0.9)", "ASINH(A1)"],
    "related": [
      "TANH",
      "TAN",
      "SINH",
      "SIN",
      "RADIANS",
      "PI",
      "DEGREES",
      "COSH",
      "COS",
      "ATANH",
      "ATAN2",
      "ATAN",
      "ASIN",
      "ACOSH",
      "ACOS"
    ],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The value for which to calculate the inverse hyperbolic sine."
      }
    ]
  },
  {
    "type": "Math",
    "name": "ATAN",
    "syntax": "ATAN(value)",
    "description": "Returns the inverse tangent of a value, in radians.",
    "link": "https://support.google.com/docs/answer/3093395",
    "notes": [
      "Use the DEGREES function to convert the result of ATAN into degrees.",
      "Tangent is periodic, therefore there are many solutions to the inverse. ATAN returns the solution between -Pi/2 and Pi/2."
    ],
    "sampleUsage": ["ATAN(0)", "ATAN(A2)", "ATAN(1)"],
    "related": [
      "TANH",
      "TAN",
      "SINH",
      "SIN",
      "RADIANS",
      "PI",
      "DEGREES",
      "COSH",
      "COS",
      "ATANH",
      "ATAN2",
      "ASINH",
      "ASIN",
      "ACOSH",
      "ACOS"
    ],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The value for which to calculate the inverse tangent."
      }
    ]
  },
  {
    "type": "Math",
    "name": "ATAN2",
    "syntax": "ATAN2(x, y)",
    "description": "Returns the angle between the x-axis and a line segment from the origin (0,0) to specified coordinate pair (`x`,`y`), in radians.",
    "link": "https://support.google.com/docs/answer/3093468",
    "notes": [
      "Use the DEGREES function to convert the result of ATAN into degrees."
    ],
    "sampleUsage": ["ATAN2(4,3)", "ATAN2(A2)"],
    "related": [
      "TANH",
      "TAN",
      "SINH",
      "SIN",
      "RADIANS",
      "PI",
      "DEGREES",
      "COSH",
      "COS",
      "ATANH",
      "ATAN",
      "ASINH",
      "ASIN",
      "ACOSH",
      "ACOS"
    ],
    "syntaxVariables": [
      {
        "name": "x",
        "description": "The x coordinate of the endpoint of the line segment for which to calculate the angle from the x-axis."
      },
      {
        "name": "y",
        "description": "The y coordinate of the endpoint of the line segment for which to calculate the angle from the x-axis."
      }
    ]
  },
  {
    "type": "Math",
    "name": "ATANH",
    "syntax": "ATANH(value)",
    "description": "Returns the inverse hyperbolic tangent of a number.",
    "link": "https://support.google.com/docs/answer/3093397",
    "notes": [
      "Google Sheets does not support imaginary or complex numbers, so these are not valid inputs or outputs from hyperbolic functions."
    ],
    "sampleUsage": ["ATANH(0.9)", "ATANH(A1)"],
    "related": [
      "TANH",
      "TAN",
      "SINH",
      "SIN",
      "RADIANS",
      "PI",
      "DEGREES",
      "COSH",
      "COS",
      "ATAN2",
      "ATAN",
      "ASINH",
      "ASIN",
      "ACOSH",
      "ACOS"
    ],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The value for which to calculate the inverse hyperbolic tangent. Must be between -1 and 1, exclusive."
      }
    ]
  },
  {
    "type": "Math",
    "name": "BASE",
    "syntax": "BASE(value, base, [min_length])",
    "description": "Converts a number into a text representation in another base, for example, base 2 for binary.",
    "link": "https://support.google.com/docs/answer/9084167",
    "notes": [
      "DECIMAL: The DECIMAL function converts the text representation of a number in another base, to base 10 (decimal).",
      "BIN2DEC:  The BIN2DEC function converts a signed binary number to decimal format.",
      "BIN2HEX: The BIN2HEX function converts a signed binary number to signed hexadecimal format.",
      "BIN2OCT: The BIN2OCT function converts a signed binary number to signed octal format.",
      "OCT2BIN: The OCT2BIN function converts a signed octal number to signed binary format.",
      "OCT2DEC: The OCT2DEC function converts a signed octal number to decimal format.",
      "OCT2HEX: The OCT2HEX function converts a signed octal number to signed hexadecimal format.",
      "DEC2BIN: The DEC2BIN function converts a decimal number to signed binary format.",
      "DEC2OCT: The DEC2OCT function converts a decimal number to signed octal format.",
      "DEC2HEX: The DEC2HEX function converts a decimal number to signed hexadecimal format.",
      "HEX2BIN: The HEX2BIN function converts a signed hexadecimal number to signed binary format.",
      "HEX2DEC: The HEX2DEC function converts a signed hexadecimal number to decimal format.",
      "HEX2OCT: The HEX2OCT function converts a signed hexadecimal number to signed octal format."
    ],
    "sampleUsage": [
      "BASE(value, base, [min_length])",
      "BASE(255, 16)",
      "BASE(A2, 2)"
    ],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "Non-integer numeric argument values are truncated to an integer."
      },
      {
        "name": "",
        "description": "Make sure that any calculations using the result of the BASE function take into account that it may be in a non-decimal base. Results are silently converted by Google Sheets. For example, if cell A2 contains 1111 (the binary equivalent of the decimal value 31), and B2 contains a formula such as \"=A2+9,\" the result will be 11120, which is incorrect in binary calculation."
      }
    ]
  },
  {
    "type": "Math",
    "name": "CEILING",
    "syntax": "CEILING(value, [factor])",
    "description": "Rounds a number up to the nearest integer multiple of specified significance.",
    "link": "https://support.google.com/docs/answer/3093471",
    "notes": [
      "When value is positive, factor must also be positive.",
      "When value is negative, factor can be either negative or positive to determine which direction to round.",
      "CEILING is most often used with factor set to a \"round\" number, such as 0.1 or 0.01, in order to round to a particular decimal place."
    ],
    "sampleUsage": ["CEILING(23.25,0.1)", "CEILING(A2,1)"],
    "related": [
      "FLOOR",
      "TRUNC",
      "ROUNDUP",
      "ROUNDDOWN",
      "ROUND",
      "MROUND",
      "INT"
    ],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The value to round up to the nearest integer multiple of factor."
      },
      {
        "name": "factor",
        "description": "[OPTIONAL: 1 by default] - The number to whose multiples value will be rounded.\n\n    \n      factor may not be equal to 0."
      }
    ]
  },
  {
    "type": "Math",
    "name": "CEILING.MATH",
    "syntax": "CEILING.MATH(number, [significance], [mode])",
    "description": "Rounds a number up to the nearest integer multiple of specified significance, with negative numbers rounding toward or away from 0 depending on the mode.",
    "link": "https://support.google.com/docs/answer/9061515",
    "notes": [
      "CEILING: The CEILING function rounds a number up to the nearest integer multiple of specified significance.",
      "ROUNDUP: Rounds a number to a certain number of decimal places, always rounding up to the next valid increment.",
      "ROUND: The ROUND function rounds a number to a certain number of decimal places according to standard rules.",
      "FLOOR.MATH: Rounds a number down to the nearest integer multiple of specified significance, with negative numbers rounding toward or away from zero depending on the mode.",
      "FLOOR: The FLOOR function rounds a number down to the nearest integer multiple of specified significance."
    ],
    "sampleUsage": ["CEILING.MATH(number, [significance], [mode])"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "By default, positive numbers with decimal places are rounded up to the nearest integer. For example, 4.3 is rounded up to 5."
      },
      {
        "name": "",
        "description": "By default, negative numbers with decimal places are rounded up towards zero to the nearest integer. For example, -4.7 is rounded up to -4."
      }
    ]
  },
  {
    "type": "Math",
    "name": "CEILING.PRECISE",
    "syntax": "CEILING.PRECISE(number, [significance])",
    "description": "Rounds a number up to the nearest integer multiple of specified significance. If the number is positive or negative, it is rounded up.",
    "link": "https://support.google.com/docs/answer/9061294",
    "notes": [
      "CEILING: The CEILING function rounds a number up to the nearest integer multiple of specified significance.",
      "CEILING.MATH: The CEILING.MATH function rounds a number up to the nearest integer or to the nearest multiple of specified significance. It also specifies whether the number is rounded toward or away from 0 depending on the mode.",
      "ROUNDUP: Rounds a number to a certain number of decimal places, always rounding up to the next valid increment.",
      "ROUND: The ROUND function rounds a number to a certain number of decimal places according to standard rules.",
      "FLOOR: The FLOOR function rounds a number down to the nearest integer multiple of specified significance.",
      "FLOOR.MATH: The FLOOR.MATH function rounds a number down to the nearest integer or a multiple of specified significance, with negative numbers rounding toward or away from zero depending on the mode.",
      "FLOOR.PRECISE: The FLOOR.PRECISE functions rounds a number down to the nearest integer or multiple of specified significance."
    ],
    "sampleUsage": ["CEILING.PRECISE(number, [significance])"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "By default, positive numbers with decimal places are rounded up to the nearest integer. For example, 4.3 is rounded up to 5."
      },
      {
        "name": "",
        "description": "Negative numbers are rounded up (toward zero). For example, -4.3 is rounded up to -4."
      }
    ]
  },
  {
    "type": "Math",
    "name": "COMBIN",
    "syntax": "COMBIN(n, k)",
    "description": "Returns the number of ways to choose some number of objects from a pool of a given size of objects.",
    "link": "https://support.google.com/docs/answer/3093400",
    "notes": [
      "COMBIN is the standard combinatorics function typically notated nCk and read \"n choose k\". This is equivalent to FACT(n)/(FACT(k)*FACT(n-k))."
    ],
    "sampleUsage": ["COMBIN(4,2)", "COMBIN(A2,B2)"],
    "related": ["MULTINOMIAL", "FACTDOUBLE", "FACT"],
    "syntaxVariables": [
      {
        "name": "n",
        "description": "The size of the pool of objects to choose from."
      },
      { "name": "k", "description": "The number of objects to choose." }
    ]
  },
  {
    "type": "Math",
    "name": "COMBINA",
    "syntax": "COMBINA(n, k)",
    "description": "Returns the number of ways to choose some number of objects from a pool of a given size of objects, including ways that choose the same object multiple times.",
    "link": "https://support.google.com/docs/answer/9084101",
    "notes": [
      "FACT: The FACT function returns the factorial of a number.",
      "COMBIN: The COMBIN function returns the number of ways to choose some number of objects from a pool of a given size of objects."
    ],
    "sampleUsage": ["COMBINA(n, k)", "COMBINA(5, 3)"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "The order of the chosen objects within the COMBINA function doesn't matter."
      },
      {
        "name": "COMBINA(n, k)",
        "description": " is equivalent to COMBIN(n+k-1), which can be read as \"(n+k-1)choose k\" or ."
      },
      {
        "name": "COMBINA(n, k)",
        "description": " is also equivalent to FACT(n+k-1)/(FACT(k)*FACT(n-1)), but supports larger numbers as arguments."
      },
      {
        "name": "",
        "description": "If a number (or reference to a number) with a decimal part is provided to COMBINA, the decimal part is silently truncated before calculation."
      },
      {
        "name": "",
        "description": "If the some of arguments n+k is greater than or equal to 1031, a #NUM! error is returned."
      }
    ]
  },
  {
    "type": "Math",
    "name": "COS",
    "syntax": "COS(angle)",
    "description": "Returns the cosine of an angle provided in radians.",
    "link": "https://support.google.com/docs/answer/3093476",
    "notes": [],
    "sampleUsage": ["COS(PI())", "COS(A2)", "COS(1)"],
    "related": [
      "TANH",
      "TAN",
      "SINH",
      "SIN",
      "RADIANS",
      "PI",
      "DEGREES",
      "COSH",
      "ATANH",
      "ATAN2",
      "ATAN",
      "ASINH",
      "ASIN",
      "ACOSH",
      "ACOS"
    ],
    "syntaxVariables": [
      {
        "name": "angle",
        "description": "The angle to find the cosine of, in radians."
      }
    ]
  },
  {
    "type": "Math",
    "name": "COSH",
    "syntax": "COSH(value)",
    "description": "Returns the hyperbolic cosine of any real number.",
    "link": "https://support.google.com/docs/answer/3093477",
    "notes": [
      "Google Sheets does not support imaginary or complex numbers, so these are not valid inputs or outputs from hyperbolic functions."
    ],
    "sampleUsage": ["COSH(A2)", "COSH(1)"],
    "related": [
      "TANH",
      "TAN",
      "SINH",
      "SIN",
      "RADIANS",
      "PI",
      "DEGREES",
      "COS",
      "ATANH",
      "ATAN2",
      "ATAN",
      "ASINH",
      "ASIN",
      "ACOSH",
      "ACOS"
    ],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "Any real value to calculate the hyperbolic cosine of."
      }
    ]
  },
  {
    "type": "Math",
    "name": "COT",
    "syntax": "COT(angle)",
    "description": "Cotangent of an angle provided in radians.",
    "link": "https://support.google.com/docs/answer/9084169",
    "notes": [],
    "sampleUsage": ["COT(angle)", "COT(3.14)", "COT(A1)"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "ACOT: The ACOT function returns the inverse cotangent of a value in radians."
      },
      {
        "name": "",
        "description": "COTH: The COTH function returns the hyperbolic cotangent of any real number."
      },
      {
        "name": "",
        "description": "ATANH: The ATANH function returns the inverse hyperbolic tangent of a number."
      },
      {
        "name": "",
        "description": "ATAN: The ATAN function returns the inverse tangent of a value in radians."
      },
      {
        "name": "",
        "description": "ATAN2: The ATAN2 function returns the angle between the x-axis and a line segment from the origin (0,0) to the specified coordinate pair (`x`,`y`), in radians."
      },
      {
        "name": "",
        "description": "ASINH: The ASINH function returns the inverse hyperbolic sine of a number."
      },
      {
        "name": "",
        "description": "ASIN: The ASIN function returns the inverse sine of a value in radians."
      },
      {
        "name": "",
        "description": "SIN: The SIN function returns the sine of an angle provided in radians."
      },
      {
        "name": "",
        "description": "COS: The COS function returns the cosine of an angle provided in radians."
      },
      {
        "name": "",
        "description": "ACOSH: The ACOSH function returns the inverse hyperbolic cosine of a number."
      },
      {
        "name": "",
        "description": "ACOS: The ACOS function returns the inverse cosine of a value in radians."
      },
      {
        "name": "",
        "description": "DEGREES: The DEGREES function converts an angle value in radians to degrees."
      },
      {
        "name": "",
        "description": "RADIANS: The RADIANS function converts an angle value in degrees to radians."
      },
      {
        "name": "",
        "description": "PI: The PI function returns the value of pi to 9 decimal places."
      }
    ]
  },
  {
    "type": "Math",
    "name": "COTH",
    "syntax": "COTH(value)",
    "description": "Returns the hyperbolic cotangent of any real number.",
    "link": "https://support.google.com/docs/answer/9084102",
    "notes": [],
    "sampleUsage": ["COTH(value)", "COTH(A1)"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "COT: The COT function returns the cotangent of an angle provided in radians."
      },
      {
        "name": "",
        "description": "ACOT: The ACOT function returns the inverse cotangent of a value in radians."
      },
      {
        "name": "",
        "description": "ATANH: The ATANH function returns the inverse hyperbolic tangent of a number."
      },
      {
        "name": "",
        "description": "ATAN: The ATAN function returns the inverse tangent of a value in radians."
      },
      {
        "name": "",
        "description": "ATAN2: The ATAN2 function returns the angle between the x-axis and a line segment from the origin (0,0) to the specified coordinate pair (`x`,`y`), in radians."
      },
      {
        "name": "",
        "description": "ASINH: The ASINH function returns the inverse hyperbolic sine of a number."
      },
      {
        "name": "",
        "description": "ASIN: The ASIN function returns the inverse sine of a value in radians."
      },
      {
        "name": "",
        "description": "SIN: The SIN function returns the sine of an angle provided in radians."
      },
      {
        "name": "",
        "description": "COS: The COS function returns the cosine of an angle provided in radians."
      },
      {
        "name": "",
        "description": "ACOSH: The ACOSH function returns the inverse hyperbolic cosine of a number."
      },
      {
        "name": "",
        "description": "ACOS: The ACOS function returns the inverse cosine of a value in radians."
      },
      {
        "name": "",
        "description": "DEGREES: The DEGREES function converts an angle value in radians to degrees."
      },
      {
        "name": "",
        "description": "RADIANS: The RADIANS function converts an angle value in degrees to radians."
      },
      {
        "name": "",
        "description": "PI: The PI function returns the value of pi to 9 decimal places."
      }
    ]
  },
  {
    "type": "Math",
    "name": "COUNTBLANK",
    "syntax": "COUNTBLANK(range)",
    "description": "Returns the number of empty cells in a given range.",
    "link": "https://support.google.com/docs/answer/3093403",
    "notes": [],
    "sampleUsage": ["COUNTBLANK(A2:C100)"],
    "related": [
      "DCOUNTA",
      "DCOUNT",
      "COUNTUNIQUE",
      "COUNTIF",
      "COUNTA",
      "COUNT"
    ],
    "syntaxVariables": [
      {
        "name": "",
        "description": "value1 - The first value or range in which to count the number of blanks."
      },
      {
        "name": "",
        "description": "value2 - [OPTIONAL ] - Additional values or ranges in which to count the number of blanks."
      }
    ]
  },
  {
    "type": "Math",
    "name": "COUNTIF",
    "syntax": "COUNTIF(range, criterion)",
    "description": "Returns a conditional count across a range.",
    "link": "https://support.google.com/docs/answer/3093480",
    "notes": [
      "COUNTIF can only perform conditional counts with a single criterion. To use multiple criteria, use COUNTIFS or the database functions DCOUNT or DCOUNTA."
    ],
    "sampleUsage": ["COUNTIF(A1:A10,\">20\")", "COUNTIF(A1:A10,\"Paid\")"],
    "related": [
      "COUNTIFS",
      "SUMIF",
      "DCOUNTA",
      "DCOUNT",
      "COUNTUNIQUE",
      "COUNTA",
      "COUNTBLANK",
      "COUNT"
    ],
    "syntaxVariables": [
      {
        "name": "range",
        "description": "The range that is tested against criterion."
      },
      {
        "name": "criterion",
        "description": "The pattern or test to apply to range.\n\n    \n      \n        If range contains text to check against, criterion must be a string. criterion can contain wildcards including ? to match any single character or * to match zero or more contiguous characters. To match an actual question mark or asterisk, prefix the character with the tilde (~) character (i.e. ~? and ~*). A string criterion must be enclosed in quotation marks. Each cell in range is then checked against criterion for equality (or match, if wildcards are used).\n      \n      \n        If range contains numbers to check against, criterion may be either a string or a number. If a number is provided, each cell in range is checked for equality with criterion. Otherwise, criterion may be a string containing a number (which also checks for equality), or a number prefixed with any of the following operators: =, >, >=, <, or <=, which check whether the range cell is equal to, greater than, greater than or equal to, less than, or less than or equal to the criterion value, respectively."
      }
    ]
  },
  {
    "type": "Math",
    "name": "COUNTIFS",
    "syntax": "COUNTIFS(criteria_range1, criterion1, [criteria_range2, criterion2, ...])",
    "description": "Returns the count of a range depending on multiple criteria.",
    "link": "https://support.google.com/docs/answer/3256550",
    "notes": [
      "Any additional ranges must contain the same number of rows and columns as criteria_range1."
    ],
    "sampleUsage": [
      "COUNTIFS(A1:A10, \">20\", B1:B10, \"<30\")",
      "COUNTIFS(A7:A24, \">6\", B7:B24, \"<\"&DATE(1969,7,20))",
      "COUNTIFS(B8:B27, \">\" & B12, C8:C27, \"<\" & C13, D8:D27, “<>10”)",
      "COUNTIFS(C1:C100, \"Yes\")"
    ],
    "related": ["COUNTIF", "COUNT", "SUMIFS", "AVERAGEIFS", "IF"],
    "syntaxVariables": [
      {
        "name": "criteria_range1",
        "description": "The range to check against criterion1."
      },
      {
        "name": "criterion1",
        "description": "The pattern or test to apply to criteria_range1."
      },
      {
        "name": "criteria_range2, criterion2...",
        "description": "[ OPTIONAL ] - Additional ranges and criteria to check; repeatable."
      }
    ]
  },
  {
    "type": "Math",
    "name": "COUNTUNIQUE",
    "syntax": "COUNTUNIQUE(value1, [value2, ...])",
    "description": "Counts the number of unique values in a list of specified values and ranges.",
    "link": "https://support.google.com/docs/answer/3093405",
    "notes": [
      "Although COUNTUNIQUE is specified as taking a maximum of 30 arguments, Google Sheets supports an arbitrary number of arguments for this function."
    ],
    "sampleUsage": [
      "COUNTUNIQUE(A1:C100)",
      "COUNTUNIQUE(1,1,2,3,5,8,13,A2,B6:B9)"
    ],
    "related": [
      "DCOUNTA",
      "DCOUNT",
      "COUNTIF",
      "COUNTA",
      "COUNTBLANK",
      "COUNT"
    ],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The first value or range to consider for uniqueness."
      },
      {
        "name": "value2, ...",
        "description": "[ OPTIONAL ] - Additional values or ranges to consider for uniqueness."
      }
    ]
  },
  {
    "type": "Math",
    "name": "CSC",
    "syntax": "CSC(angle)",
    "description": "Returns the cosecant of an angle provided in radians.",
    "link": "https://support.google.com/docs/answer/9084103",
    "notes": [],
    "sampleUsage": ["CSC(angle)", "CSC(PI())", "CSC(A1)"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "COT: The COT function returns the cotangent of an angle provided in radians."
      },
      {
        "name": "",
        "description": "COTH: The COTH function returns the hyperbolic cotangent of any real number."
      },
      {
        "name": "",
        "description": "ACOT: The ACOT function returns the inverse cotangent of a value in radians."
      },
      {
        "name": "",
        "description": "ATANH: The ATANH function returns the inverse hyperbolic tangent of a number."
      },
      {
        "name": "",
        "description": "ATAN: The ATAN function returns the inverse tangent of a value in radians."
      },
      {
        "name": "",
        "description": "ATAN2: The ATAN2 function returns the angle between the x-axis and a line segment from the origin (0,0) to the specified coordinate pair (`x`,`y`), in radians."
      },
      {
        "name": "",
        "description": "ASINH: The ASINH function returns the inverse hyperbolic sine of a number."
      },
      {
        "name": "",
        "description": "ASIN: The ASIN function returns the inverse sine of a value in radians."
      },
      {
        "name": "",
        "description": "SIN: The SIN function returns the sine of an angle provided in radians."
      },
      {
        "name": "",
        "description": "COS: The COS function returns the cosine of an angle provided in radians."
      },
      {
        "name": "",
        "description": "ACOSH: The ACOSH function returns the inverse hyperbolic cosine of a number."
      },
      {
        "name": "",
        "description": "ACOS: The ACOS function returns the inverse cosine of a value in radians."
      },
      {
        "name": "",
        "description": "DEGREES: The DEGREES function converts an angle value in radians to degrees."
      },
      {
        "name": "",
        "description": "RADIANS: The RADIANS function converts an angle value in degrees to radians."
      },
      {
        "name": "",
        "description": "PI: The PI function returns the value of pi to 9 decimal places."
      }
    ]
  },
  {
    "type": "Math",
    "name": "CSCH",
    "syntax": "CSCH(value)",
    "description": "The CSCH function returns the hyperbolic cosecant of any real number.",
    "link": "https://support.google.com/docs/answer/9116336",
    "notes": [],
    "sampleUsage": ["CSCH(value)", "CSCH(A1)"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "CSC: The CSC function returns the cosecant of an angle provided in radians."
      },
      {
        "name": "",
        "description": "TANH: The TANH function returns the hyperbolic tangent of any real number."
      },
      {
        "name": "",
        "description": "TAN: The TAN function returns the tangent of an angle provided in radians."
      },
      {
        "name": "",
        "description": "SINH: The SINH function returns the hyperbolic sine of any real number."
      },
      {
        "name": "",
        "description": "SIN: The SIN function returns the sine of an angle provided in radians."
      },
      {
        "name": "",
        "description": "COSH: The COSH function returns the hyperbolic cosine of any real number."
      },
      {
        "name": "",
        "description": "COS: The COS function returns the cosine of an angle provided in radians."
      },
      {
        "name": "",
        "description": "ATANH: The ATANH function returns the inverse hyperbolic tangent of a number."
      },
      {
        "name": "",
        "description": "ATAN2: The ATAN2 function returns the angle between the x-axis and a line segment from the origin (0,0) to the specified coordinate pair (`x`,`y`), in radians."
      },
      {
        "name": "",
        "description": "ATAN: The ATAN function returns the inverse tangent of a value in radians."
      },
      {
        "name": "",
        "description": "ASINH: The ASINH function returns the inverse hyperbolic sine of a number."
      },
      {
        "name": "",
        "description": "ASIN: The ASIN function returns the inverse sine of a value in radians."
      },
      {
        "name": "",
        "description": "ACOSH: The ACOSH function returns the inverse hyperbolic cosine of a number."
      },
      {
        "name": "",
        "description": "ACOS: The ACOS function returns the inverse cosine of a value in radians."
      },
      {
        "name": "",
        "description": "RADIANS: The RADIANS function converts an angle value in degrees to radians."
      },
      {
        "name": "",
        "description": "DEGREES: The DEGREES function converts an angle value in radians to degrees."
      },
      {
        "name": "",
        "description": "PI: The PI function returns the value of pi to 9 decimal places."
      }
    ]
  },
  {
    "type": "Math",
    "name": "DECIMAL",
    "syntax": "DECIMAL(value, base)",
    "description": "The DECIMAL function converts the text representation of a number in another base, to base 10 (decimal).",
    "link": "https://support.google.com/docs/answer/9116090",
    "notes": [
      "BASE: The BASE function converts a decimal number into a text representation in another base.",
      "BIN2DEC: The BIN2DEC function converts a signed binary number to decimal format.",
      "BIN2HEX: The BIN2HEX function converts a signed binary number to signed hexadecimal format.",
      "BIN2OCT: The BIN2OCT function converts a signed binary number to signed octal format.",
      "OCT2BIN: The OCT2BIN function converts a signed octal number to signed binary format.",
      "OCT2DEC: The OCT2DEC function converts a signed octal number to decimal format.",
      "OCT2HEX: The OCT2HEX function converts a signed octal number to signed hexadecimal format.",
      "DEC2BIN: The DEC2BIN function converts a decimal number to signed binary format.",
      "DEC2OCT: The DEC2OCT function converts a decimal number to signed octal format.",
      "DEC2HEX: The DEC2HEX function converts a decimal number to signed hexadecimal format.",
      "HEX2DEC: The HEX2DEC function converts a signed hexadecimal number to decimal format.",
      "HEX2BIN: The HEX2BIN function converts a signed hexadecimal number to signed binary format.",
      "HEX2OCT: The HEX2OCT function converts a signed hexadecimal number to signed octal format."
    ],
    "sampleUsage": ["DECIMAL(value, base)"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "The string representation of the value is used, which should only contain numeric characters (i.e. scientific notation isn't permitted). The text of a string should be no longer than 255 characters."
      },
      {
        "name": "",
        "description": "The DECIMAL function only converts to positive integers."
      }
    ]
  },
  {
    "type": "Math",
    "name": "DEGREES",
    "syntax": "DEGREES(angle)",
    "description": "Converts an angle value in radians to degrees.",
    "link": "https://support.google.com/docs/answer/3093481",
    "notes": [],
    "sampleUsage": ["DEGREES(PI())", "DEGREES(6)", "DEGREES(A2)"],
    "related": [
      "TANH",
      "TAN",
      "SINH",
      "SIN",
      "RADIANS",
      "PI",
      "COSH",
      "COS",
      "ATANH",
      "ATAN2",
      "ATAN",
      "ASINH",
      "ASIN",
      "ACOSH",
      "ACOS"
    ],
    "syntaxVariables": [
      {
        "name": "angle",
        "description": "The angle to convert from radians to degrees."
      }
    ]
  },
  {
    "type": "Math",
    "name": "ERFC",
    "syntax": "ERFC(z)",
    "description": "Returns the complementary Gauss error function of a value.",
    "link": "https://support.google.com/docs/answer/3093407",
    "notes": [],
    "sampleUsage": ["ERFC(2)", "ERFC(A2)"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "z",
        "description": "The number for which to calculate the complementary Gauss error function."
      }
    ]
  },
  {
    "type": "Math",
    "name": "ERFC.PRECISE",
    "syntax": "ERFC.PRECISE(z)",
    "description": "See ERFC",
    "link": "https://support.google.com/docs/answer/3093407",
    "notes": [],
    "sampleUsage": ["ERFC(2)", "ERFC(A2)"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "z",
        "description": "The number for which to calculate the complementary Gauss error function."
      }
    ]
  },
  {
    "type": "Math",
    "name": "EVEN",
    "syntax": "EVEN(value)",
    "description": "Rounds a number up to the nearest even integer.",
    "link": "https://support.google.com/docs/answer/3093409",
    "notes": [],
    "sampleUsage": ["EVEN(3)", "EVEN(-0.6)", "EVEN(A2)"],
    "related": [
      "TRUNC",
      "ROUNDUP",
      "ROUNDDOWN",
      "ROUND",
      "ODD",
      "MROUND",
      "INT",
      "FLOOR",
      "CEILING"
    ],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The value to round to the next greatest even number.\n\n    \n      If value is negative, it will be rounded down to the next negative even number with greater absolute value."
      }
    ]
  },
  {
    "type": "Math",
    "name": "EXP",
    "syntax": "EXP(exponent)",
    "description": "Returns Euler's number, e (~2.718) raised to a power.",
    "link": "https://support.google.com/docs/answer/3093411",
    "notes": [],
    "sampleUsage": ["EXP(2)", "EXP(A2)"],
    "related": ["SQRTPI", "SQRT", "POWER", "LOG10", "LOG", "LN", "GAMMALN"],
    "syntaxVariables": [
      { "name": "exponent", "description": "The exponent to raise e to." }
    ]
  },
  {
    "type": "Math",
    "name": "FACT",
    "syntax": "FACT(value)",
    "description": "Returns the factorial of a number.",
    "link": "https://support.google.com/docs/answer/3093412",
    "notes": [
      "If a number or reference to a number with a decimal part is provided to FACT, the decimal part will be silently truncated before calculation."
    ],
    "sampleUsage": ["FACT(3)", "FACT(A2)"],
    "related": ["MULTINOMIAL", "FACTDOUBLE", "COMBIN"],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The number or reference to a number whose factorial will be calculated and returned."
      }
    ]
  },
  {
    "type": "Math",
    "name": "FACTDOUBLE",
    "syntax": "FACTDOUBLE(value)",
    "description": "Returns the \"double factorial\" of a number.",
    "link": "https://support.google.com/docs/answer/3093414",
    "notes": [
      "The double factorial is similar to the factorial, except instead of multiplying by each integer value less than or equal to the provided value, it decrements by 2. Thus the double factorial of 8 is 384 and the double factorial of 7 is 105.",
      "If a number or reference to a number with a decimal part is provided to FACTDOUBLE, the decimal part will be silently truncated before calculation."
    ],
    "sampleUsage": ["FACTDOUBLE(6)", "FACTDOUBLE(A2)"],
    "related": ["MULTINOMIAL", "FACT", "COMBIN"],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The number or reference to a number whose double factorial will be calculated and returned."
      }
    ]
  },
  {
    "type": "Math",
    "name": "FLOOR",
    "syntax": "FLOOR(value, [factor])",
    "description": "Rounds a number down to the nearest integer multiple of specified significance.",
    "link": "https://support.google.com/docs/answer/3093487",
    "notes": [
      "value can be positive or negative, but factor must be positive.",
      "FLOOR is most often used with factor set to a 'round' number such as 0.1 or 0.01 in order to round to a particular decimal place. However, factor can, in fact, be any number of the same sign as value, e.g. FLOOR(23.25,0.18) which results in 23.22, which is 0.18 * 129. This can be used, for instance, to round down to a particular denomination of currency (e.g. 0.25 or 0.05 USD)."
    ],
    "sampleUsage": ["FLOOR(23.25,0.1)", "FLOOR(A2,1)"],
    "related": [
      "CEILING",
      "TRUNC",
      "ROUNDUP",
      "ROUNDDOWN",
      "ROUND",
      "MROUND",
      "INT"
    ],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The value to round down to the nearest integer multiple of factor."
      },
      {
        "name": "factor",
        "description": "[OPTIONAL - 1 by default] - The number to whose multiples value will be rounded.\n\n    \n      factor may not be equal to 0."
      }
    ]
  },
  {
    "type": "Math",
    "name": "FLOOR.MATH",
    "syntax": "FLOOR.MATH(number, [significance], [mode])",
    "description": "Rounds a number down to the nearest integer multiple of specified significance, with negative numbers rounding toward or away from 0 depending on the mode.",
    "link": "https://support.google.com/docs/answer/9061444",
    "notes": [
      "CEILING: The CEILING function rounds a number up to the nearest integer multiple of specified significance.",
      "ROUNDDOWN: The ROUNDDOWN function rounds a number to a certain number of decimal places, always rounding down to the next valid increment.",
      "ROUND: The ROUND function rounds a number to a certain number of decimal places according to standard rules.",
      "CEILING.MATH: The CEILING.MATH function rounds a number up to the nearest integer or to the nearest multiple of specified significance. It also specifies whether the number is rounded toward or away from 0 depending on the mode.",
      "FLOOR: The FLOOR function rounds a number down to the nearest integer multiple of specified significance."
    ],
    "sampleUsage": ["FLOOR.MATH(number, [significance], [mode])"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "By default, positive numbers with decimal places are rounded down to the nearest integer. For example, 4.3 is rounded down to 4."
      },
      {
        "name": "",
        "description": "By default, negative numbers with decimal places are rounded away from zero to the nearest integer. For example, -4.7 is rounded down to -5."
      }
    ]
  },
  {
    "type": "Math",
    "name": "FLOOR.PRECISE",
    "syntax": "FLOOR.PRECISE(number, [significance])",
    "description": "The FLOOR.PRECISE function rounds a number down to the nearest integer or multiple of specified significance.",
    "link": "https://support.google.com/docs/answer/9116270",
    "notes": [
      "FLOOR: The FLOOR function rounds a number down to the nearest integer multiple of specified significance.",
      "FLOOR.MATH: The FLOOR.MATH function rounds a number down to the nearest integer or a multiple of specified significance, with negative numbers rounding toward or away from zero depending on the mode.",
      "CEILING: The CEILING function rounds a number up to the nearest integer multiple of specified significance.",
      "CEILING.MATH: The CEILING.MATH function rounds a number up to the nearest integer or to the nearest multiple of specified significance. It also specifies whether the number is rounded toward or away from 0 depending on the mode.",
      "CEILING.PRECISE:The CEILING.PRECISE function rounds a number up to the nearest integer or multiple of specified significance. If the number is positive or negative, it's rounded up.",
      "ROUNDDOWN: The ROUNDDOWN function rounds a number to a certain number of decimal places, always rounding down to the next valid increment.",
      "ROUND: The ROUND function rounds a number to a certain number of decimal places according to standard rules."
    ],
    "sampleUsage": [
      "FLOOR.PRECISE(number, [significance])",
      "FLOOR.PRECISE(-10.5, 1)",
      "FLOOR.PRECISE(96, 10)"
    ],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "By default, positive numbers with decimal places are rounded down to the nearest integer. For example, 4.8 is rounded down to 4."
      },
      {
        "name": "",
        "description": "Negative numbers are rounded down (away from zero). For example, -4.8 is rounded down to -5."
      }
    ]
  },
  {
    "type": "Math",
    "name": "GAMMALN",
    "syntax": "GAMMALN(value)",
    "description": "Returns the the logarithm of a specified Gamma function, base e (Euler's number).",
    "link": "https://support.google.com/docs/answer/3093416",
    "notes": [
      "GAMMALN is used for certain types of analysis or as a component to other functions and is rarely used by itself."
    ],
    "sampleUsage": ["GAMMALN(4)", "GAMMALN(A2)"],
    "related": ["SQRTPI", "SQRT", "POWER", "LOG10", "LOG", "LN", "EXP"],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The input to the Gamma function. The natural logarithm of Gamma (value) will be returned.\n\n    \n      value must be positive."
      }
    ]
  },
  {
    "type": "Math",
    "name": "GAMMALN.PRECISE",
    "syntax": "GAMMALN.PRECISE(value)",
    "description": "See GAMMALN",
    "link": "https://support.google.com/docs/answer/3093416",
    "notes": [
      "GAMMALN is used for certain types of analysis or as a component to other functions and is rarely used by itself."
    ],
    "sampleUsage": ["GAMMALN(4)", "GAMMALN(A2)"],
    "related": ["SQRTPI", "SQRT", "POWER", "LOG10", "LOG", "LN", "EXP"],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The input to the Gamma function. The natural logarithm of Gamma (value) will be returned.\n\n    \n      value must be positive."
      }
    ]
  },
  {
    "type": "Math",
    "name": "GCD",
    "syntax": "GCD(value1, value2)",
    "description": "Returns the greatest common divisor of one or more integers.",
    "link": "https://support.google.com/docs/answer/3093489",
    "notes": [
      "Any input with a decimal part provided to GCD will be silently truncated."
    ],
    "sampleUsage": ["GCD(A2:A5)", "GCD(24,96,A4)"],
    "related": ["LCM"],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The first value or range whose factors to consider in a calculation to find the greatest common divisor."
      },
      {
        "name": "value2, ...",
        "description": "[ OPTIONAL ] - Additional values or ranges whose factors to consider to find the greatest common divisor."
      }
    ]
  },
  {
    "type": "Math",
    "name": "IMLN",
    "syntax": "IMLN(complex_value)",
    "description": "Returns the logarithm of a complex number, base e (Euler's number).",
    "link": "https://support.google.com/docs/answer/9000651",
    "notes": [],
    "sampleUsage": [
      "IMLN",
      "IMLN",
      "=IIMLN(number).",
      "IMLN(\"3+4i\")",
      "IMLN(A2)"
    ],
    "related": ["LN", "COMPLEX", "IMAGINARY", "IMREAL", "LOG10", "LOG", "EXP"],
    "syntaxVariables": [
      {
        "name": "IMLN",
        "description": " is equivalent to LN for all non-complex values that are greater than zero."
      },
      {
        "name": "IMLN",
        "description": " is equivalent to LOG given base of e, or EXP(1), for all non-complex values that are greater than zero."
      },
      {
        "name": "",
        "description": "The natural logarithm of a complex number is defined as follows:\n    \n      ln(x+yi) = √(x2+y2) + i tan-1(y/x)"
      }
    ]
  },
  {
    "type": "Math",
    "name": "IMPOWER",
    "syntax": "IMPOWER(complex_base, exponent)",
    "description": "Returns a complex number raised to a power.",
    "link": "https://support.google.com/docs/answer/9003065",
    "notes": [
      "The exponentiation of a complex number is defined as follows:\n    \n      (a+bi)n = rn(cosθ + isinθ), where\n      r = √(x2 + y2) and θ = arctan(b/a)",
      "(a+bi)n = rn(cosθ + isinθ), where",
      "r = √(x2 + y2) and θ = arctan(b/a)"
    ],
    "sampleUsage": [
      "IMPOWER",
      "IMPOWER",
      "=IMPOWER(complex_base, exponent).",
      "IMPOWER(\"4-3i\",0.5)",
      "IMPOWER(A2,B2)"
    ],
    "related": ["COMPLEX", "IMREAL", "IMAGINARY", "POWER"],
    "syntaxVariables": []
  },
  {
    "type": "Math",
    "name": "IMSQRT",
    "syntax": "IMSQRT(complex_number)",
    "description": "Computes the square root of a complex number.",
    "link": "https://support.google.com/docs/answer/9003168",
    "notes": [],
    "sampleUsage": [
      "IMSQRT",
      "IMSQRT",
      "=IMSQRT(complex_number).",
      "IMSQRT(2)",
      "IMSQRT(\"3+2i\")"
    ],
    "related": ["IMPOWER", "COMPLEX"],
    "syntaxVariables": [
      {
        "name": "IMPOWER(complex_number, 0.5).",
        "description": "This function is equivalent to using "
      },
      {
        "name": "SQRT",
        "description": "While it is not possible to use the  function to take the square root of a negative real number, it is possible to use IMSQRT to take the square root of a complex number with a negative real number component."
      }
    ]
  },
  {
    "type": "Math",
    "name": "INT",
    "syntax": "INT(value)",
    "description": "Rounds a number down to the nearest integer that is less than or equal to it.",
    "link": "https://support.google.com/docs/answer/3093490",
    "notes": [
      "INT is not equivalent to ROUNDDOWN with places set to 0. INT rounds down using value, whereas ROUNDDOWN rounds down using absolute value, which causes differences for negative values of value.",
      "INT is also not equivalent to FLOOR with significance -1 for negative values of value for the same reason as above. It is, however, equivalent to FLOOR with significance 1 for positive values of value and CEILING with significance -1 for negative values of value."
    ],
    "sampleUsage": ["INT(99.44)", "INT(A2)"],
    "related": [
      "TRUNC",
      "ROUNDUP",
      "ROUNDDOWN",
      "ROUND",
      "MROUND",
      "FLOOR",
      "CEILING"
    ],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The value to round down to the nearest integer.."
      }
    ]
  },
  {
    "type": "Math",
    "name": "ISEVEN",
    "syntax": "ISEVEN(value)",
    "description": "Checks whether the provided value is even.",
    "link": "https://support.google.com/docs/answer/3093419",
    "notes": [
      "This function is most often used in conjunction with IF in conditional statements."
    ],
    "sampleUsage": ["ISEVEN(4)", "ISEVEN(A2)"],
    "related": [
      "ISTEXT",
      "ISREF",
      "ISODD",
      "ISNUMBER",
      "ISNONTEXT",
      "ISNA",
      "ISLOGICAL",
      "ISERROR",
      "ISERR",
      "ISBLANK",
      "IF"
    ],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The value to be verified as even.\n\n    \n      ISEVEN returns TRUE if value is an even integer or a reference to a cell containing an even integer, and FALSE otherwise."
      }
    ]
  },
  {
    "type": "Math",
    "name": "ISO.CEILING",
    "syntax": "ISO.CEILING(number, [significance])",
    "description": "See CEILING.PRECISE",
    "link": "https://support.google.com/docs/answer/9061294",
    "notes": [
      "CEILING: The CEILING function rounds a number up to the nearest integer multiple of specified significance.",
      "CEILING.MATH: The CEILING.MATH function rounds a number up to the nearest integer or to the nearest multiple of specified significance. It also specifies whether the number is rounded toward or away from 0 depending on the mode.",
      "ROUNDUP: Rounds a number to a certain number of decimal places, always rounding up to the next valid increment.",
      "ROUND: The ROUND function rounds a number to a certain number of decimal places according to standard rules.",
      "FLOOR: The FLOOR function rounds a number down to the nearest integer multiple of specified significance.",
      "FLOOR.MATH: The FLOOR.MATH function rounds a number down to the nearest integer or a multiple of specified significance, with negative numbers rounding toward or away from zero depending on the mode.",
      "FLOOR.PRECISE: The FLOOR.PRECISE functions rounds a number down to the nearest integer or multiple of specified significance."
    ],
    "sampleUsage": ["CEILING.PRECISE(number, [significance])"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "By default, positive numbers with decimal places are rounded up to the nearest integer. For example, 4.3 is rounded up to 5."
      },
      {
        "name": "",
        "description": "Negative numbers are rounded up (toward zero). For example, -4.3 is rounded up to -4."
      }
    ]
  },
  {
    "type": "Math",
    "name": "ISODD",
    "syntax": "ISODD(value)",
    "description": "Checks whether the provided value is odd.",
    "link": "https://support.google.com/docs/answer/3093491",
    "notes": [
      "This function is most often used in conjunction with IF in conditional statements."
    ],
    "sampleUsage": ["ISODD(4)", "ISODD(A2)"],
    "related": [
      "ISTEXT",
      "ISREF",
      "ISNUMBER",
      "ISNONTEXT",
      "ISNA",
      "ISLOGICAL",
      "ISEVEN",
      "ISERROR",
      "ISERR",
      "ISBLANK",
      "IF"
    ],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The value to be verified as odd.\n\n    \n      ISODD returns TRUE if value is an odd integer or a reference to a cell containing an odd integer, and FALSE otherwise."
      }
    ]
  },
  {
    "type": "Math",
    "name": "LCM",
    "syntax": "LCM(value1, value2)",
    "description": "Returns the least common multiple of one or more integers.",
    "link": "https://support.google.com/docs/answer/3093421",
    "notes": [
      "Any input with a decimal part provided to LCM will be silently truncated."
    ],
    "sampleUsage": ["LCM(A2:A5)", "LCM(2,3,A4)"],
    "related": ["GCD"],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The first value or range whose factors to consider in a calculation to find the least common multiple."
      },
      {
        "name": "value2, ...",
        "description": "[ OPTIONAL ] - Additional values or ranges whose factors to consider to find the least common multiple."
      }
    ]
  },
  {
    "type": "Math",
    "name": "LN",
    "syntax": "LN(value)",
    "description": "Returns the the logarithm of a number, base e (Euler's number).",
    "link": "https://support.google.com/docs/answer/3093422",
    "notes": ["LN is equivalent to LOG given base of e, or EXP(1)."],
    "sampleUsage": ["LN(100)", "LN(A2)"],
    "related": ["SQRTPI", "SQRT", "POWER", "LOG10", "LOG", "GAMMALN", "EXP"],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The value for which to calculate the logarithm, base e.\n\n    \n      value must be positive."
      }
    ]
  },
  {
    "type": "Math",
    "name": "LOG",
    "syntax": "LOG(value, base)",
    "description": "Returns the the logarithm of a number given a base.",
    "link": "https://support.google.com/docs/answer/3093495",
    "notes": [],
    "sampleUsage": ["LOG(128,2)", "LOG(A2,3)"],
    "related": ["SQRTPI", "SQRT", "POWER", "LOG10", "LN", "GAMMALN", "EXP"],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The value for which to calculate the logarithm given base.\n\n    \n      value must be positive."
      },
      {
        "name": "base",
        "description": "The base to use for calculation of the logarithm."
      }
    ]
  },
  {
    "type": "Math",
    "name": "LOG10",
    "syntax": "LOG10(value)",
    "description": "Returns the the logarithm of a number, base 10.",
    "link": "https://support.google.com/docs/answer/3093423",
    "notes": [
      "Google Sheets does not support complex or imaginary values.",
      "LOG10 is equivalent to LOG given base of 10."
    ],
    "sampleUsage": ["LOG10(100)", "LOG10(A2)"],
    "related": ["SQRTPI", "SQRT", "POWER", "LOG", "LN", "GAMMALN", "EXP"],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The value for which to calculate the logarithm, base 10.\n\n    \n      value must be positive."
      }
    ]
  },
  {
    "type": "Math",
    "name": "MOD",
    "syntax": "MOD(dividend, divisor)",
    "description": "Returns the result of the modulo operator, the remainder after a division operation.",
    "link": "https://support.google.com/docs/answer/3093497",
    "notes": [],
    "sampleUsage": ["MOD(10,4)", "MOD(A2,B2)"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "dividend",
        "description": "The number to be divided to find the remainder."
      },
      { "name": "divisor", "description": "The number to divide by." }
    ]
  },
  {
    "type": "Math",
    "name": "MROUND",
    "syntax": "MROUND(value, factor)",
    "description": "Rounds one number to the nearest integer multiple of another. Learn more",
    "link": "https://support.google.com/docs/answer/3093426",
    "notes": [
      "Both value and factor may be non-integral.",
      "value and factor must have the same sign; that is, they must both be positive or both negative. If either is zero, MROUND will return 0.",
      "If value is equally close to two multiples of factor, the multiple with the greater absolute value will be returned."
    ],
    "sampleUsage": ["MROUND(21,14)", "MROUND(A2,3)"],
    "related": [
      "TRUNC",
      "ROUNDUP",
      "ROUNDDOWN",
      "ROUND",
      "INT",
      "FLOOR",
      "CEILING"
    ],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The number to round to the nearest integer multiple of another."
      },
      {
        "name": "factor",
        "description": "The number to whose multiples value will be rounded."
      }
    ]
  },
  {
    "type": "Math",
    "name": "MULTINOMIAL",
    "syntax": "MULTINOMIAL(value1, value2)",
    "description": "Returns the factorial of the sum of values divided by the product of the values' factorials.",
    "link": "https://support.google.com/docs/answer/3093429",
    "notes": [
      "Although MULTINOMIAL is specified as taking a maximum of 30 arguments, Google Sheets supports an arbitrary number of arguments for this function."
    ],
    "sampleUsage": ["MULTINOMIAL(1,2,3)", "MULTINOMIAL(A2:A9)"],
    "related": ["FACTDOUBLE", "FACT", "COMBIN"],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The first value or range to consider."
      },
      {
        "name": "value2, ...",
        "description": "Additional values or ranges to consider."
      }
    ]
  },
  {
    "type": "Math",
    "name": "MUNIT",
    "syntax": "MUNIT(dimension)",
    "description": "Returns a unit matrix of size dimension x dimension. Learn more.",
    "link": "https://support.google.com/docs/answer/9368156",
    "notes": [],
    "sampleUsage": [
      "MUNIT(dimension)",
      "Example 1:  MUNIT(1)",
      "Example 2: MUNIT(3)",
      "MUNIT",
      "MUNIT(1)"
    ],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "MMULT: Calculates the matrix product of two matrices specified as arrays or ranges."
      },
      {
        "name": "",
        "description": "RANDARRAY: The RANDARRAY function generates an array of random numbers between 0 and 1."
      }
    ]
  },
  {
    "type": "Math",
    "name": "ODD",
    "syntax": "ODD(value)",
    "description": "Rounds a number up to the nearest odd integer.",
    "link": "https://support.google.com/docs/answer/3093499",
    "notes": [],
    "sampleUsage": ["ODD(2)", "ODD(-0.6)", "ODD(A2)"],
    "related": [
      "TRUNC",
      "ROUNDUP",
      "ROUNDDOWN",
      "ROUND",
      "MROUND",
      "INT",
      "FLOOR",
      "EVEN",
      "CEILING"
    ],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The value to round to the next greatest odd number.\n\n    \n      If value is negative, it will be rounded down to the next negative odd number with greater absolute value."
      }
    ]
  },
  {
    "type": "Math",
    "name": "PI",
    "syntax": "PI()",
    "description": "Returns the value of Pi to 14 decimal places.",
    "link": "https://support.google.com/docs/answer/3093432",
    "notes": [],
    "sampleUsage": ["PI()"],
    "related": [
      "TANH",
      "TAN",
      "SINH",
      "SIN",
      "RADIANS",
      "DEGREES",
      "COSH",
      "COS",
      "ATANH",
      "ATAN2",
      "ATAN",
      "ASINH",
      "ASIN",
      "ACOSH",
      "ACOS"
    ],
    "syntaxVariables": []
  },
  {
    "type": "Math",
    "name": "POWER",
    "syntax": "POWER(base, exponent)",
    "description": "Returns a number raised to a power.",
    "link": "https://support.google.com/docs/answer/3093433",
    "notes": [],
    "sampleUsage": ["POWER(4,0.5)", "POWER(A2,B2)", "POWER(2,5)"],
    "related": ["SQRTPI", "SQRT", "LOG10", "LOG", "LN", "GAMMALN", "EXP"],
    "syntaxVariables": [
      {
        "name": "base",
        "description": "The number to raise to the exponent power.\n\n    \n      If base is negative, exponent must be an integer."
      },
      { "name": "exponent", "description": "The exponent to raise base to." }
    ]
  },
  {
    "type": "Math",
    "name": "PRODUCT",
    "syntax": "PRODUCT(factor1, [factor2, ...])",
    "description": "Returns the result of multiplying a series of numbers together.",
    "link": "https://support.google.com/docs/answer/3093502",
    "notes": [
      "If only a single number for factor1 is supplied, PRODUCT returns factor1.",
      "Each factor may be a number or a range. If a range, empty cells are ignored.",
      "Although PRODUCT is specified as taking a maximum of 30 arguments, Google Sheets supports an arbitrary number of arguments for this function."
    ],
    "sampleUsage": ["PRODUCT(A2:A100)", "PRODUCT(1,2,3,4,5,A2:A100)"],
    "related": ["SUM", "QUOTIENT", "MULTIPLY", "MINUS", "DIVIDE", "ADD"],
    "syntaxVariables": [
      {
        "name": "factor1",
        "description": "The first number or range to calculate for the product."
      },
      {
        "name": "factor2 ... factor 30",
        "description": "[ OPTIONAL ] - Additional values to multiply by."
      }
    ]
  },
  {
    "type": "Math",
    "name": "QUOTIENT",
    "syntax": "QUOTIENT(dividend, divisor)",
    "description": "Returns one number divided by another.",
    "link": "https://support.google.com/docs/answer/3093436",
    "notes": [
      "QUOTIENT performs a division, but will only return the quotient and not the remainder. To see the full result (quotient and remainder), use the DIVIDE function or the '/' operator."
    ],
    "sampleUsage": ["QUOTIENT(4,2)", "QUOTIENT(A2,B2)"],
    "related": ["SUM", "PRODUCT", "MULTIPLY", "MINUS", "DIVIDE", "ADD"],
    "syntaxVariables": [
      { "name": "dividend", "description": "The number to be divided." },
      {
        "name": "divisor",
        "description": "The number to divide by (cannot equal 0)."
      }
    ]
  },
  {
    "type": "Math",
    "name": "RADIANS",
    "syntax": "RADIANS(angle)",
    "description": "Converts an angle value in degrees to radians.",
    "link": "https://support.google.com/docs/answer/3093437",
    "notes": [],
    "sampleUsage": ["RADIANS(180)", "RADIANS(6)", "RADIANS(A2)"],
    "related": [
      "TANH",
      "TAN",
      "SINH",
      "SIN",
      "PI",
      "DEGREES",
      "COSH",
      "COS",
      "ATANH",
      "ATAN2",
      "ATAN",
      "ASINH",
      "ASIN",
      "ACOSH",
      "ACOS"
    ],
    "syntaxVariables": [
      {
        "name": "angle",
        "description": "The angle to convert from degrees to radians."
      }
    ]
  },
  {
    "type": "Math",
    "name": "RAND",
    "syntax": "RAND()",
    "description": "Returns a random number between 0 inclusive and 1 exclusive.",
    "link": "https://support.google.com/docs/answer/3093438",
    "notes": [],
    "sampleUsage": ["RAND()"],
    "related": ["RANDBETWEEN"],
    "syntaxVariables": []
  },
  {
    "type": "Math",
    "name": "RANDARRAY",
    "syntax": "RANDARRAY(rows, columns)",
    "description": "Generates an array of random numbers between 0 and 1. Learn more.",
    "link": "https://support.google.com/docs/answer/9211904",
    "notes": [
      "RAND Returns a random number between 0 inclusive and 1 exclusive."
    ],
    "sampleUsage": ["RANDARRAY(rows, columns)", "Example 1 RANDARRAY()"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "If rows and columns are omitted, RANDARRAY returns a 1 x 1 sized grid."
      },
      {
        "name": "",
        "description": "Like the RAND function, hitting enter will cause RANDARRAY’s results to update."
      }
    ]
  },
  {
    "type": "Math",
    "name": "RANDBETWEEN",
    "syntax": "RANDBETWEEN(low, high)",
    "description": "Returns a uniformly random integer between two values, inclusive.",
    "link": "https://support.google.com/docs/answer/3093507",
    "notes": [
      "Values with decimal parts may be used for low and/or high; this will cause the least and greatest possible values to be the next integer greater than low and/or the next integer less than high, respectively."
    ],
    "sampleUsage": ["RANDBETWEEN(1,10)", "RANDBETWEEN(A2,A3)"],
    "related": ["RAND"],
    "syntaxVariables": [
      { "name": "low", "description": "The low end of the random range." },
      { "name": "high", "description": "The high end of the random range." }
    ]
  },
  {
    "type": "Math",
    "name": "ROUND",
    "syntax": "ROUND(value, [places])",
    "description": "Rounds a number to a certain number of decimal places according to standard rules.",
    "link": "https://support.google.com/docs/answer/3093440",
    "notes": [
      "Standard rules indicate that when rounding to a particular place, the next most significant digit (the digit to the right) is considered. If this digit is greater than or equal to 5, the digit is rounded up, otherwise it is rounded down. This occurs irrespective of sign; that is, 'up' and 'down' are in terms of magnitude."
    ],
    "sampleUsage": ["ROUND(99.44,1)", "ROUND(A2)"],
    "related": [
      "TRUNC",
      "ROUNDUP",
      "ROUNDDOWN",
      "MROUND",
      "INT",
      "FLOOR",
      "CEILING"
    ],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The value to round to places number of places."
      },
      {
        "name": "places",
        "description": "[ OPTIONAL - 0 by default ] - The number of decimal places to which to round.\n\n    \n      places may be negative, in which case value is rounded at the specified number of digits to the left of the decimal point."
      }
    ]
  },
  {
    "type": "Math",
    "name": "ROUNDDOWN",
    "syntax": "ROUNDDOWN(value, [places])",
    "description": "Rounds a number to a certain number of decimal places, always rounding down to the next valid increment.",
    "link": "https://support.google.com/docs/answer/3093442",
    "notes": [
      "ROUNDDOWN operates like ROUND except that it always rounds down."
    ],
    "sampleUsage": ["ROUNDDOWN(99.44,1)", "ROUNDDOWN(A2)"],
    "related": [
      "TRUNC",
      "ROUNDUP",
      "ROUND",
      "MROUND",
      "INT",
      "FLOOR",
      "CEILING"
    ],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The value to round to places number of places, always rounding down."
      },
      {
        "name": "places",
        "description": "[ OPTIONAL - 0 by default ] - The number of decimal places to which to round.\n\n    \n      places may be negative, in which case value is rounded at the specified number of digits to the left of the decimal point."
      }
    ]
  },
  {
    "type": "Math",
    "name": "ROUNDUP",
    "syntax": "ROUNDUP(value, [places])",
    "description": "Rounds a number to a certain number of decimal places, always rounding up to the next valid increment.",
    "link": "https://support.google.com/docs/answer/3093443",
    "notes": ["ROUNDUP operates like ROUND except that it always rounds up."],
    "sampleUsage": ["ROUNDUP(99.44,1)", "ROUNDUP(A2)"],
    "related": [
      "TRUNC",
      "ROUNDDOWN",
      "ROUND",
      "MROUND",
      "INT",
      "FLOOR",
      "CEILING"
    ],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The value to round to places number of places, always rounding up."
      },
      {
        "name": "places",
        "description": "[ OPTIONAL - 0 by default ] - The number of decimal places to which to round.\n\n    \n      places may be negative, in which case value is rounded at the specified number of digits to the left of the decimal point."
      }
    ]
  },
  {
    "type": "Math",
    "name": "SEC",
    "syntax": "SEC(angle)",
    "description": "The SEC function returns the secant of an angle, measured in radians.",
    "link": "https://support.google.com/docs/answer/9116395",
    "notes": [],
    "sampleUsage": ["SEC(angle)", "SEC(3.14)", "SEC(A1)"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "SECH: The SECH function returns the hyperbolic secant of an angle."
      },
      {
        "name": "",
        "description": "COT: The COT function returns the cotangent of an angle provided in radians."
      },
      {
        "name": "",
        "description": "COTH: The COTH function returns the hyperbolic cotangent of any real number."
      },
      {
        "name": "",
        "description": "ACOT: The ACOT function returns the inverse cotangent of a value in radians."
      },
      {
        "name": "",
        "description": "ATANH: The ATANH function returns the inverse hyperbolic tangent of a number."
      },
      {
        "name": "",
        "description": "ATAN: The ATAN function returns the inverse tangent of a value in radians."
      },
      {
        "name": "",
        "description": "ATAN2: The ATAN2 function returns the angle between the x-axis and a line segment from the origin (0,0) to the specified coordinate pair (`x`,`y`), in radians."
      },
      {
        "name": "",
        "description": "ASINH: The ASINH function returns the inverse hyperbolic sine of a number."
      },
      {
        "name": "",
        "description": "ASIN: The ASIN function returns the inverse sine of a value in radians."
      },
      {
        "name": "",
        "description": "SIN: The SIN function returns the sine of an angle provided in radians."
      },
      {
        "name": "",
        "description": "COS: The COS function returns the cosine of an angle provided in radians."
      },
      {
        "name": "",
        "description": "ACOSH: The ACOSH function returns the inverse hyperbolic cosine of a number."
      },
      {
        "name": "",
        "description": "ACOS: The ACOS function returns the inverse cosine of a value in radians."
      },
      {
        "name": "",
        "description": "DEGREES: The DEGREES function converts an angle value in radians to degrees."
      },
      {
        "name": "",
        "description": "RADIANS: The RADIANS function converts an angle value in degrees to radians."
      },
      {
        "name": "",
        "description": "PI: The PI function returns the value of pi to 9 decimal places."
      }
    ]
  },
  {
    "type": "Math",
    "name": "SECH",
    "syntax": "SECH(value)",
    "description": "The SECH function returns the hyperbolic secant of an angle.",
    "link": "https://support.google.com/docs/answer/9116560",
    "notes": [],
    "sampleUsage": ["SECH(value)", "SECH(A1)"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "SEC: The SEC function returns the secant of an angle measured in radians."
      },
      {
        "name": "",
        "description": "COT: The COT function returns the cotangent of an angle provided in radians."
      },
      {
        "name": "",
        "description": "COTH: The COTH function returns the hyperbolic cotangent of any real number."
      },
      {
        "name": "",
        "description": "ACOT: The ACOT function returns the inverse cotangent of a value in radians."
      },
      {
        "name": "",
        "description": "ATANH: The ATANH function returns the inverse hyperbolic tangent of a number."
      },
      {
        "name": "",
        "description": "ATAN: The ATAN function returns the inverse tangent of a value in radians."
      },
      {
        "name": "",
        "description": "ATAN2: The ATAN2 function returns the angle between the x-axis and a line segment from the origin (0,0) to the specified coordinate pair (`x`,`y`), in radians."
      },
      {
        "name": "",
        "description": "ASINH: The ASINH function returns the inverse hyperbolic sine of a number."
      },
      {
        "name": "",
        "description": "ASIN: The ASIN function returns the inverse sine of a value in radians."
      },
      {
        "name": "",
        "description": "SIN: The SIN function returns the sine of an angle provided in radians."
      },
      {
        "name": "",
        "description": "COS: The COS function returns the cosine of an angle provided in radians."
      },
      {
        "name": "",
        "description": "ACOSH: The ACOSH function returns the inverse hyperbolic cosine of a number."
      },
      {
        "name": "",
        "description": "ACOS: The ACOS function returns the inverse cosine of a value in radians."
      },
      {
        "name": "",
        "description": "DEGREES: The DEGREES function converts an angle value in radians to degrees."
      },
      {
        "name": "",
        "description": "RADIANS: The RADIANS function converts an angle value in degrees to radians."
      },
      {
        "name": "",
        "description": "PI: The PI function returns the value of pi to 9 decimal places."
      }
    ]
  },
  {
    "type": "Math",
    "name": "SEQUENCE",
    "syntax": "SEQUENCE(rows, columns, start, step)",
    "description": "Returns an array of sequential numbers, such as 1, 2, 3, 4. Learn more.",
    "link": "https://support.google.com/docs/answer/9368244",
    "notes": [],
    "sampleUsage": [
      "SEQUENCE(rows, columns, start, step)",
      "Example 1: SEQUENCE(2)",
      "Example 2: SEQUENCE(2, 3)",
      "Example 3: SEQUENCE(2, 3, 3, 2)",
      "Example 4: SEQUENCE(2, 3, 10, -1)",
      "SEQUENCE(2)",
      "SEQUENCE(2, 3)",
      "SEQUENCE(2, 3, 3, 2)"
    ],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "MUNIT: The MUNIT function returns a unit matrix of size dimension x dimension."
      },
      {
        "name": "",
        "description": "RANDARRAY: The RANDARRAY function generates an array of random numbers between 0 and 1."
      }
    ]
  },
  {
    "type": "Math",
    "name": "SERIESSUM",
    "syntax": "SERIESSUM(x, n, m, a)",
    "description": "Given parameters x, n, m, and a, returns the power series sum a1xn + a2x(n+m) + ... + aix(n+(i-1)m), where i is the number of entries in range `a`.",
    "link": "https://support.google.com/docs/answer/3093444",
    "notes": [
      "Power series may be used to approximate various constants and functions, including e (Euler's number), logarithms, integrals, trigonometric functions, etc. However, this function is usually used for custom user-defined models."
    ],
    "sampleUsage": [
      "SERIESSUM(1,0,1,{FACT(0),FACT(1),FACT(2),FACT(3),FACT(4)})",
      "SERIESSUM(A2,0,2,B2:B10)"
    ],
    "related": [
      "SUMSQ",
      "SUMIF",
      "SUM",
      "QUOTIENT",
      "PRODUCT",
      "MULTIPLY",
      "MINUS",
      "DIVIDE",
      "ADD"
    ],
    "syntaxVariables": [
      {
        "name": "x",
        "description": "The input to the power series. Varies depending on the type of approximation, may be angle, exponent, or some other value."
      },
      {
        "name": "n",
        "description": "The initial power to which to raise x in the power series."
      },
      {
        "name": "m",
        "description": "The additive increment by which to increase x."
      },
      {
        "name": "a",
        "description": "The array or range containing the coefficients of the power series."
      }
    ]
  },
  {
    "type": "Math",
    "name": "SIGN",
    "syntax": "SIGN(value)",
    "description": "Given an input number, returns `-1` if it is negative, `1` if positive, and `0` if it is zero.",
    "link": "https://support.google.com/docs/answer/3093513",
    "notes": [],
    "sampleUsage": ["SIGN(-42)", "SIGN(A2)"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The value whose sign will be evaluated."
      }
    ]
  },
  {
    "type": "Math",
    "name": "SIN",
    "syntax": "SIN(angle)",
    "description": "Returns the sine of an angle provided in radians.",
    "link": "https://support.google.com/docs/answer/3093447",
    "notes": [],
    "sampleUsage": ["SIN(PI())", "SIN(1)", "SIN(A2)"],
    "related": [
      "TANH",
      "TAN",
      "SINH",
      "RADIANS",
      "PI",
      "DEGREES",
      "COSH",
      "COS",
      "ATANH",
      "ATAN2",
      "ATAN",
      "ASINH",
      "ASIN",
      "ACOSH",
      "ACOS"
    ],
    "syntaxVariables": [
      {
        "name": "angle",
        "description": "The angle to find the sine of, in radians."
      }
    ]
  },
  {
    "type": "Math",
    "name": "SINH",
    "syntax": "SINH(value)",
    "description": "Returns the hyperbolic sine of any real number.",
    "link": "https://support.google.com/docs/answer/3093517",
    "notes": [
      "Google Sheets does not support imaginary or complex numbers, so these are not valid inputs or outputs from hyperbolic functions."
    ],
    "sampleUsage": ["SINH(A2)", "SINH(1)"],
    "related": [
      "TANH",
      "TAN",
      "SIN",
      "RADIANS",
      "PI",
      "DEGREES",
      "COSH",
      "COS",
      "ATANH",
      "ATAN2",
      "ATAN",
      "ASINH",
      "ASIN",
      "ACOSH",
      "ACOS"
    ],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "Any real value to calculate the hyperbolic sine of."
      }
    ]
  },
  {
    "type": "Math",
    "name": "SQRT",
    "syntax": "SQRT(value)",
    "description": "Returns the positive square root of a positive number.",
    "link": "https://support.google.com/docs/answer/3093577",
    "notes": [
      "To find the negative root of value, simply multiply the result of the SQRT function call by -1."
    ],
    "sampleUsage": ["SQRT(9)", "SQRT(A2)"],
    "related": ["SQRTPI", "POWER", "LOG10", "LOG", "LN", "GAMMALN", "EXP"],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The number for which to calculate the positive square root.\n\n    \n      value must be positive; if it is negative, SQRT will return the #NUM! error."
      }
    ]
  },
  {
    "type": "Math",
    "name": "SQRTPI",
    "syntax": "SQRTPI(value)",
    "description": "Returns the positive square root of the product of Pi and the given positive number.",
    "link": "https://support.google.com/docs/answer/3093579",
    "notes": [
      "To find the negative root of value * Pi, simply multiply the result of the SQRTPI function call by -1.",
      "SQRTPI is used for certain types of analysis or as a component to other functions (e.g. an estimation of the Gamma function) and is rarely used by itself."
    ],
    "sampleUsage": ["SQRTPI(9)", "SQRTPI(A2)"],
    "related": ["SQRT", "POWER", "LOG10", "LOG", "LN", "GAMMALN", "EXP"],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The number which will be multiplied by Pi and have the product's square root returned\n\n    \n      value must be positive; if it is negative, SQRTPI will return the #NUM! error."
      }
    ]
  },
  {
    "type": "Math",
    "name": "SUBTOTAL",
    "syntax": "SUBTOTAL(function_code, range1, [range2, ...])",
    "description": "Returns a subtotal for a vertical range of cells using a specified aggregation function.",
    "link": "https://support.google.com/docs/answer/3093649",
    "notes": [
      "Cells that are hidden due to autofilter criteria are never included in SUBTOTAL, irrespective of the function_code used.",
      "Cells within any of the specified range arguments that contain SUBTOTAL calls are ignored to prevent double-counting.",
      "SUBTOTAL can be used to created dynamic dashboards by having the function code argument refer to another cell. When combined with list-based data validation, this cell can become a drop-down list that instantly updates the entire dashboard.",
      "SUBTOTAL can be used for quick analysis of different subsets of data by building a subtotal dashboard above a filtered region. Each time the filter criteria change, the dashboard will automatically update with new aggregations.",
      "Using SUBTOTAL helps prevent double-counting associated with simple SUM formulas."
    ],
    "sampleUsage": ["SUBTOTAL(1,A2:A5,B2:B8)"],
    "related": [
      "VARP",
      "VAR",
      "SUM",
      "STDEVP",
      "STDEV",
      "PRODUCT",
      "MIN",
      "MAX",
      "COUNTA",
      "COUNT",
      "AVERAGE"
    ],
    "syntaxVariables": [
      {
        "name": "function_code",
        "description": "The function to use in subtotal aggregation.\n\n    \n      \n        1 is AVERAGE\n      \n      \n        2 is COUNT\n      \n      \n        3 is COUNTA\n      \n      \n        4 is MAX\n      \n      \n        5 is MIN\n      \n      \n        6 is PRODUCT\n      \n      \n        7 is STDEV\n      \n      \n        8 is STDEVP\n      \n      \n        9 is SUM\n      \n      \n        10 is VAR\n      \n      \n        11 is VARP\n      \n      \n        Hidden values can be skipped for any of these codes by prepending 10 (to the single-digit codes) or 1 (to the 2-digit codes). e.g. 102 for COUNT while skipping hidden cells, and 110 for VAR while doing so."
      },
      {
        "name": "range1",
        "description": "The first range over which to calculate a subtotal."
      },
      {
        "name": "range2, ...",
        "description": "Additional ranges over which to calculate subtotals."
      }
    ]
  },
  {
    "type": "Math",
    "name": "SUM",
    "syntax": "SUM(value1, [value2, ...])",
    "description": "Returns the sum of a series of numbers and/or cells.",
    "link": "https://support.google.com/docs/answer/3093669",
    "notes": [
      "If only a single number for value1 is supplied, SUM returns value1.",
      "Although SUM is specified as taking a maximum of 30 arguments, Google Sheets supports an arbitrary number of arguments for this function."
    ],
    "sampleUsage": [
      "SUM(A2:A100)",
      "SUM(1,2,3,4,5)",
      "SUM(1,2,A2:A50)",
      "SUM(value1, [value2, ...])",
      "x",
      "n",
      "m"
    ],
    "related": [
      "SUMSQ",
      "SUMIF",
      "SERIESSUM",
      "QUOTIENT",
      "PRODUCT",
      "MULTIPLY",
      "MINUS",
      "DIVIDE",
      "ADD"
    ],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The first number or range to add together."
      },
      {
        "name": "value2, ...",
        "description": "[ OPTIONAL ] - Additional numbers or ranges to add to value1."
      }
    ]
  },
  {
    "type": "Math",
    "name": "SUMIF",
    "syntax": "SUMIF(range, criterion, [sum_range])",
    "description": "Returns a conditional sum across a range. Learn more",
    "link": "https://support.google.com/docs/answer/3093583",
    "notes": [
      "SUMIF can only perform conditional sums with a single criterion. To use multiple criteria, use the database function DSUM."
    ],
    "sampleUsage": [
      "SUMIF(A1:A10,\">20\")",
      "SUMIF(A1:A10,\"Paid\",B1:B10)",
      "SUMIF(range, criterion, [sum_range])",
      "x",
      "n",
      "m"
    ],
    "related": [
      "SUMSQ",
      "SUM",
      "SERIESSUM",
      "QUOTIENT",
      "PRODUCT",
      "MULTIPLY",
      "MINUS",
      "DSUM",
      "DIVIDE",
      "COUNTIF",
      "ADD"
    ],
    "syntaxVariables": [
      {
        "name": "range",
        "description": "The range which is tested against criterion."
      },
      {
        "name": "criterion",
        "description": "The pattern or test to apply to range.\n\n    \n      \n        If range contains text to check against, criterion must be a string. criterion can contain wildcards including ? to match any single character or * to match zero or more contiguous characters. To match an actual question mark or asterisk, prefix the character with the tilde (~) character (i.e. ~? and ~*). A string criterion must be enclosed in quotation marks. Each cell in range is then checked against criterion for equality (or match, if wildcards are used).\n      \n      \n        If range contains numbers to check against, criterion may be either a string or a number. If a number is provided, each cell in range is checked for equality with criterion. Otherwise, criterion may be a string containing a number (which also checks for equality), or a number prefixed with any of the following operators: = (checks for equality), > (checks that the range cell value is greater than the criterion value), or < (checks that the range cell value is less than the criterion value)"
      },
      {
        "name": "sum_range",
        "description": "The range to be summed, if different from range."
      }
    ]
  },
  {
    "type": "Math",
    "name": "SUMIFS",
    "syntax": "SUMIFS(sum_range, criteria_range1, criterion1, [criteria_range2, criterion2, ...])",
    "description": "Returns the sum of a range depending on multiple criteria.",
    "link": "https://support.google.com/docs/answer/3238496",
    "notes": [],
    "sampleUsage": [
      "SUMIFS(A1:A10, B1:B10, \">20\")",
      "SUMIFS(A1:A10, B1:B10, \">20\", C1:C10, \"<30\")",
      "SUMIFS(C1:C100, E1:E100, \"Yes\")",
      "SUMIFS(sum_range, criteria_range1, criterion1, [criteria_range2, criterion2, ...])",
      "x",
      "n",
      "m"
    ],
    "related": [
      "SUM",
      "SUMIF",
      "SUMSQ",
      "SERIESSUM",
      "QUOTIENT",
      "PRODUCT",
      "MULTIPLY",
      "MINUS",
      "DSUM",
      "DIVIDE",
      "COUNTIF",
      "ADD"
    ],
    "syntaxVariables": [
      { "name": "sum_range", "description": "The range to be summed." },
      {
        "name": "criteria_range1",
        "description": "The range to check against criterion1."
      },
      {
        "name": "criterion1",
        "description": "The pattern or test to apply to criteria_range1."
      },
      {
        "name": "criteria_range2, criterion2, ...",
        "description": "[ OPTIONAL ] - Additional ranges and criteria to check."
      }
    ]
  },
  {
    "type": "Math",
    "name": "SUMSQ",
    "syntax": "SUMSQ(value1, [value2, ...])",
    "description": "Returns the sum of the squares of a series of numbers and/or cells.",
    "link": "https://support.google.com/docs/answer/3093714",
    "notes": [
      "If only a single number for value1 is supplied, SUMSQ returns value1 squared.",
      "Although SUMSQ is specified as taking a maximum of 30 arguments, Google Sheets supports an arbitrary number of arguments for this function."
    ],
    "sampleUsage": [
      "SUMSQ(A2:A100)",
      "SUMSQ(1,2,3,4,5)",
      "SUMSQ(1,2,A2:A50)",
      "SUMSQ(value1, [value2, ...])",
      "x",
      "n",
      "m"
    ],
    "related": [
      "SUM",
      "SUMIF",
      "SERIESSUM",
      "QUOTIENT",
      "PRODUCT",
      "MULTIPLY",
      "MINUS",
      "DIVIDE",
      "ADD"
    ],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The first number or range whose squares to add together."
      },
      {
        "name": "value2, ...",
        "description": "[ OPTIONAL ] - Additional numbers or ranges whose squares to add to the square(s) of value1."
      }
    ]
  },
  {
    "type": "Math",
    "name": "TAN",
    "syntax": "TAN(angle)",
    "description": "Returns the tangent of an angle provided in radians.",
    "link": "https://support.google.com/docs/answer/3093586",
    "notes": [],
    "sampleUsage": ["TAN(PI())", "TAN(A2)", "TAN(1)"],
    "related": [
      "TANH",
      "SINH",
      "SIN",
      "RADIANS",
      "PI",
      "DEGREES",
      "COSH",
      "COS",
      "ATANH",
      "ATAN2",
      "ATAN",
      "ASINH",
      "ASIN",
      "ACOSH",
      "ACOS"
    ],
    "syntaxVariables": [
      {
        "name": "angle",
        "description": "The angle to find the tangent of, in radians."
      }
    ]
  },
  {
    "type": "Math",
    "name": "TANH",
    "syntax": "TANH(value)",
    "description": "Returns the hyperbolic tangent of any real number.",
    "link": "https://support.google.com/docs/answer/3093755",
    "notes": [
      "Google Sheets does not support imaginary or complex numbers, so these are not valid inputs or outputs from hyperbolic functions."
    ],
    "sampleUsage": ["TANH(A2)", "TANH(1)"],
    "related": [
      "TAN",
      "SINH",
      "SIN",
      "RADIANS",
      "PI",
      "DEGREES",
      "COSH",
      "COS",
      "ATANH",
      "ATAN2",
      "ATAN",
      "ASINH",
      "ASIN",
      "ACOSH",
      "ACOS"
    ],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "Any real value to calculate the hyperbolic tangent of."
      }
    ]
  },
  {
    "type": "Math",
    "name": "TRUNC",
    "syntax": "TRUNC(value, [places])",
    "description": "Truncates a number to a certain number of significant digits by omitting less significant digits.",
    "link": "https://support.google.com/docs/answer/3093588",
    "notes": ["TRUNC performs no rounding, simply discarding unwanted digits."],
    "sampleUsage": ["TRUNC(3.141592654,2)", "TRUNC(A2,0)", "TRUNC(1.23)"],
    "related": [
      "ROUNDUP",
      "ROUNDDOWN",
      "ROUND",
      "MROUND",
      "INT",
      "FLOOR",
      "CEILING"
    ],
    "syntaxVariables": [
      { "name": "value", "description": "The value to be truncated." },
      {
        "name": "places",
        "description": "[ OPTIONAL - 0 by default ] - The number of significant digits to the right of the decimal point to retain.\n\n    \n      \n        If places is greater than the number of significant digits in value, value is returned without modification.\n      \n      \n        places may be negative, in which case the specified number of digits to the left of the decimal place are changed to zero. All digits to the right of the decimal place are discarded. If all digits of value are changed to zero, TRUNC simply returns 0."
      }
    ]
  },
  {
    "type": "Operator",
    "name": "ADD",
    "syntax": "ADD(value1, value2)",
    "description": "Returns the sum of two numbers. Equivalent to the `+` operator.",
    "link": "https://support.google.com/docs/answer/3093590",
    "notes": [
      "Unlike SUM, ADD only supports the addition of two scalar values and takes neither ranges nor more than two arguments."
    ],
    "sampleUsage": ["ADD(A2,A3)", "ADD(3,4)"],
    "related": ["SUM", "QUOTIENT", "PRODUCT", "MULTIPLY", "MINUS", "DIVIDE"],
    "syntaxVariables": [
      { "name": "value1", "description": "The first addend." },
      { "name": "value2", "description": "The second addend." }
    ]
  },
  {
    "type": "Operator",
    "name": "CONCAT",
    "syntax": "CONCAT(value1, value2)",
    "description": "Returns the concatenation of two values. Equivalent to the `&` operator.",
    "link": "https://support.google.com/docs/answer/3093592",
    "notes": [
      "value1 and value2 can be any scalar value or reference to a scalar value, including numeric and text types."
    ],
    "sampleUsage": ["CONCAT(\"de\",\"mystify\")", "CONCAT(17,76)"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The value to which value2 will be appended."
      },
      { "name": "value2", "description": "The value to append to value1." }
    ]
  },
  {
    "type": "Operator",
    "name": "DIVIDE",
    "syntax": "DIVIDE(dividend, divisor)",
    "description": "Returns one number divided by another. Equivalent to the `/` operator.",
    "link": "https://support.google.com/docs/answer/3093973",
    "notes": ["DIVIDE is equivalent to QUOTIENT."],
    "sampleUsage": ["DIVIDE(4,2)", "DIVIDE(A2,B2)"],
    "related": ["SUM", "PRODUCT", "QUOTIENT", "MULTIPLY", "MINUS", "ADD"],
    "syntaxVariables": [
      { "name": "dividend", "description": "The number to be divided." },
      {
        "name": "divisor",
        "description": "The number to divide by.\n\n    \n      divisor cannot equal 0."
      }
    ]
  },
  {
    "type": "Operator",
    "name": "EQ",
    "syntax": "EQ(value1, value2)",
    "description": "Returns `TRUE` if two specified values are equal and `FALSE` otherwise. Equivalent to the `=` operator.",
    "link": "https://support.google.com/docs/answer/3093593",
    "notes": [],
    "sampleUsage": ["EQ(A2,A3)", "EQ(2,3)"],
    "related": ["NE", "LTE", "LT", "GTE", "GT"],
    "syntaxVariables": [
      { "name": "value1", "description": "The first value." },
      {
        "name": "value2",
        "description": "The value to test against value1 for equality."
      }
    ]
  },
  {
    "type": "Operator",
    "name": "GT",
    "syntax": "GT(value1, value2)",
    "description": "Returns `TRUE` if the first argument is strictly greater than the second, and `FALSE` otherwise. Equivalent to the `>` operator.",
    "link": "https://support.google.com/docs/answer/3098240",
    "notes": [],
    "sampleUsage": ["GT(A2,A3)", "GT(2,3)"],
    "related": ["NE", "LTE", "LT", "GTE", "EQ"],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The value to test as being greater than value2."
      },
      { "name": "value2", "description": "The second value." }
    ]
  },
  {
    "type": "Operator",
    "name": "GTE",
    "syntax": "GTE(value1, value2)",
    "description": "Returns `TRUE` if the first argument is greater than or equal to the second, and `FALSE` otherwise. Equivalent to the `>=` operator.",
    "link": "https://support.google.com/docs/answer/3093975",
    "notes": [],
    "sampleUsage": ["GTE(A2,A3)", "GTE(2,3)"],
    "related": ["NE", "LTE", "LT", "GT", "EQ"],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The value to test as being greater than or equal to value2."
      },
      { "name": "value2", "description": "The second value." }
    ]
  },
  {
    "type": "Operator",
    "name": "LT",
    "syntax": "LT(value1, value2)",
    "description": "Returns `TRUE` if the first argument is strictly less than the second, and `FALSE` otherwise. Equivalent to the `<` operator.",
    "link": "https://support.google.com/docs/answer/3093596",
    "notes": [],
    "sampleUsage": ["LT(A2,A3)", "LT(2,3)"],
    "related": ["NE", "LTE", "GTE", "GT", "EQ"],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The value to test as being less than value2."
      },
      { "name": "value2", "description": "The second value." }
    ]
  },
  {
    "type": "Operator",
    "name": "LTE",
    "syntax": "LTE(value1, value2)",
    "description": "Returns `TRUE` if the first argument is less than or equal to the second, and `FALSE` otherwise. Equivalent to the `<=` operator.",
    "link": "https://support.google.com/docs/answer/3093976",
    "notes": [],
    "sampleUsage": ["LTE(A2,A3)", "LTE(2,3)"],
    "related": ["NE", "LT", "GTE", "GT", "EQ"],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The value to test as being less than or equal to value2."
      },
      { "name": "value2", "description": "The second value." }
    ]
  },
  {
    "type": "Operator",
    "name": "MINUS",
    "syntax": "MINUS(value1, value2)",
    "description": "Returns the difference of two numbers. Equivalent to the `-` operator.",
    "link": "https://support.google.com/docs/answer/3093977",
    "notes": [],
    "sampleUsage": ["MINUS(A2,A3)", "MINUS(3,4)"],
    "related": ["SUM", "QUOTIENT", "PRODUCT", "MULTIPLY", "DIVIDE", "ADD"],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The minuend, or number to be subtracted from."
      },
      {
        "name": "value2",
        "description": "The subtrahend, or number to subtract from value1."
      }
    ]
  },
  {
    "type": "Operator",
    "name": "MULTIPLY",
    "syntax": "MULTIPLY(factor1, factor2)",
    "description": "Returns the product of two numbers. Equivalent to the `*` operator.",
    "link": "https://support.google.com/docs/answer/3093978",
    "notes": [
      "Unlike PRODUCT, MULTIPLY only supports the multiplication of two scalar values and takes neither ranges nor more than two arguments."
    ],
    "sampleUsage": ["MULTIPLY(A2,B2)", "MULTIPLY(2,3)"],
    "related": ["SUM", "QUOTIENT", "PRODUCT", "MINUS", "DIVIDE", "ADD"],
    "syntaxVariables": [
      { "name": "factor1", "description": "The first multiplicand." },
      { "name": "factor2", "description": "The second multiplicand." }
    ]
  },
  {
    "type": "Operator",
    "name": "NE",
    "syntax": "NE(value1, value2)",
    "description": "Returns `TRUE` if two specified values are not equal and `FALSE` otherwise. Equivalent to the `<>` operator.",
    "link": "https://support.google.com/docs/answer/3093981",
    "notes": [],
    "sampleUsage": ["NE(A2,A3)", "NE(2,3)"],
    "related": ["LTE", "LT", "GTE", "GT", "EQ"],
    "syntaxVariables": [
      { "name": "value1", "description": "The first value." },
      {
        "name": "value2",
        "description": "The value to test against value1 for inequality."
      }
    ]
  },
  {
    "type": "Operator",
    "name": "POW",
    "syntax": "POW(base, exponent)",
    "description": "Returns a number raised to a power.",
    "link": "https://support.google.com/docs/answer/3093603",
    "notes": ["POW is equivalent to the POWER function."],
    "sampleUsage": ["POW(4,0.5)", "POW(A2,B2)", "POW(2,5)"],
    "related": [
      "SQRTPI",
      "SQRT",
      "POWER",
      "LOG10",
      "LOG",
      "LN",
      "GAMMALN",
      "EXP"
    ],
    "syntaxVariables": [
      {
        "name": "base",
        "description": "The number to raise to the exponent power.\n\n    \n      If base is negative, exponent must be an integer."
      },
      { "name": "exponent", "description": "The exponent to raise base to." }
    ]
  },
  {
    "type": "Operator",
    "name": "UMINUS",
    "syntax": "UMINUS(value)",
    "description": "Returns a number with the sign reversed.",
    "link": "https://support.google.com/docs/answer/3093606",
    "notes": [],
    "sampleUsage": ["UMINUS(-4)", "UMINUS(A2)"],
    "related": ["UPLUS", "UNARY_PERCENT"],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The number to have its sign reversed. Equivalently, the number to multiply by -1."
      }
    ]
  },
  {
    "type": "Operator",
    "name": "UNARY_PERCENT",
    "syntax": "UNARY_PERCENT(percentage)",
    "description": "Returns a value interpreted as a percentage; that is, `UNARY_PERCENT(100)` equals `1`.",
    "link": "https://support.google.com/docs/answer/3093982",
    "notes": [
      "UNARY_PERCENT is roughly equivalent to the inverse of TO_PERCENT."
    ],
    "sampleUsage": ["UNARY_PERCENT(A2)", "UNARY_PERCENT(93)"],
    "related": ["TO_PERCENT"],
    "syntaxVariables": [
      {
        "name": "percentage",
        "description": "The value to interpret as a percentage."
      }
    ]
  },
  {
    "type": "Operator",
    "name": "UPLUS",
    "syntax": "UPLUS(value)",
    "description": "Returns a specified number, unchanged. Learn more",
    "link": "https://support.google.com/docs/answer/3093608",
    "notes": [],
    "sampleUsage": ["UPLUS(-4)", "UPLUS(A2)"],
    "related": ["UNARY_PERCENT", "UMINUS"],
    "syntaxVariables": [
      { "name": "value", "description": "The number to return." }
    ]
  },
  {
    "type": "Statistical",
    "name": "AVEDEV",
    "syntax": "AVEDEV(value1, [value2, ...])",
    "description": "Calculates the average of the magnitudes of deviations of data from a dataset's mean.",
    "link": "https://support.google.com/docs/answer/3093613",
    "notes": [
      "AVEDEV will ignore any text values in value arguments.",
      "The average deviation is the sum of the absolute values of the difference of each data point and the mean of the dataset, divided by the number of elements in the dataset."
    ],
    "sampleUsage": ["AVEDEV(1,2,3,4,5,6,7,8,9,10)", "AVEDEV(A2:A100)"],
    "related": [
      "VARPA",
      "VARP",
      "VARA",
      "VAR",
      "STDEVPA",
      "STDEVP",
      "STDEVA",
      "STDEV",
      "SKEW",
      "KURT",
      "DVARP",
      "DVAR",
      "DSTDEVP",
      "DSTDEV",
      "DEVSQ"
    ],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The first value or range of the sample."
      },
      {
        "name": "value2, ...",
        "description": "Additional values or ranges to include in the sample."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "AVERAGE",
    "syntax": "AVERAGE(value1, [value2, ...])",
    "description": "Returns the numerical average value in a dataset, ignoring text.",
    "link": "https://support.google.com/docs/answer/3093615",
    "notes": [
      "Although AVERAGE is specified as taking a maximum of 30 arguments, Google Sheets supports an arbitrary number of arguments for this function.",
      "Any text encountered in the value arguments will be ignored. To have text values considered as 0 values, use AVERAGEA.",
      "AVERAGE returns the mean of the combined value arguments; that is, the sum of the values in the value arguments divided by the number of such values. To calculate the median use MEDIAN."
    ],
    "sampleUsage": [
      "AVERAGE(A2:A100,B2:B100,4,26)",
      "AVERAGE(1,2,3,4,5,C6:C20)"
    ],
    "related": [
      "TRIMMEAN",
      "SMALL",
      "RANK",
      "QUARTILE",
      "PERCENTRANK",
      "PERCENTILE",
      "MINA",
      "MIN",
      "MEDIAN",
      "MAXA",
      "LARGE",
      "HARMEAN",
      "GEOMEAN",
      "AVERAGEA"
    ],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The first value or range to consider when calculating the average value."
      },
      {
        "name": "value2, ...",
        "description": "[ OPTIONAL ] - Additional values or ranges to consider when calculating the average value."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "AVERAGE.WEIGHTED",
    "syntax": "AVERAGE.WEIGHTED(values, weights, [additional values], [additional weights])",
    "description": "Finds the weighted average of a set of values, given the values and the corresponding weights.",
    "link": "https://support.google.com/docs/answer/9084098",
    "notes": [],
    "sampleUsage": [
      "AVERAGE.WEIGHTED(values, weights, [additional values], [additional weights])",
      "AVERAGE.WEIGHTED(10, 1, 20, 3)",
      "AVERAGE.WEIGHTED(A1:A2, B1:B2)"
    ],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "SUMPRODUCT: The SUMPRODUCT function calculates the sum of the products of corresponding entries in 2 equally sized arrays or ranges."
      },
      {
        "name": "",
        "description": "AVERAGE: The AVERAGE function returns the numerical average value in a dataset, ignoring text."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "AVERAGEA",
    "syntax": "AVERAGEA(value1, [value2, ...])",
    "description": "Returns the numerical average value in a dataset.",
    "link": "https://support.google.com/docs/answer/3093617",
    "notes": [
      "Although AVERAGEA is specified as taking a maximum of 30 arguments, Google Sheets supports an arbitrary number of arguments for this function.",
      "Any text encountered in the value arguments will be set to 0 and included in calculation. To have text values ignored, use AVERAGE.",
      "AVERAGEA returns the mean of the combined value arguments; that is, the sum of the values in the value arguments divided by the number of such values. To calculate the median use MEDIAN."
    ],
    "sampleUsage": [
      "AVERAGEA(A2:A100,B2:B100,4,26)",
      "AVERAGEA(1,2,3,4,5,C6:C20)"
    ],
    "related": [
      "TRIMMEAN",
      "SMALL",
      "RANK",
      "QUARTILE",
      "PERCENTRANK",
      "PERCENTILE",
      "MINA",
      "MIN",
      "MEDIAN",
      "MAXA",
      "LARGE",
      "HARMEAN",
      "GEOMEAN",
      "AVERAGE"
    ],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The first value or range to consider when calculating the average value."
      },
      {
        "name": "value2, ...",
        "description": "[ OPTIONAL ] - Additional values or ranges to consider when calculating the average value."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "AVERAGEIF",
    "syntax": "AVERAGEIF(criteria_range, criterion, [average_range])",
    "description": "Returns the average of a range depending on criteria.",
    "link": "https://support.google.com/docs/answer/3256529",
    "notes": [],
    "sampleUsage": [
      "AVERAGEIF(A1:A10, \">20\", B1:B10)",
      "AVERAGEIF(A1:A10, \"<10\")",
      "AVERAGEIF(A1:A10, \"Paid\", B1:B10)",
      "AVERAGEIF(A1:A10, \"<\"&B1)"
    ],
    "related": [
      "AVERAGE",
      "AVERAGEA",
      "AVERAGEIFS",
      "SUMIF",
      "COUNTIF",
      "IF",
      "MEDIAN"
    ],
    "syntaxVariables": [
      {
        "name": "criteria_range",
        "description": "The range to check against criterion."
      },
      {
        "name": "criterion",
        "description": "The pattern or test to apply to criteria_range.\n\n    \n      Equals: \"text\" or 1 or \"=text\" or \"=1\"\n      Greater than: \">1\"\n      Greater than or equal to: \">=1\"\n      Less than: \"<1\"\n      Less than or equal to: \"<=1\"\n      Not equal to: \"<>1\" or \"<>text\""
      },
      {
        "name": "average_range",
        "description": "[ OPTIONAL ] - The range to average. If not included, criteria_range is used for the average instead."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "AVERAGEIFS",
    "syntax": "AVERAGEIFS(average_range, criteria_range1, criterion1, [criteria_range2, criterion2, ...])",
    "description": "Returns the average of a range depending on multiple criteria.",
    "link": "https://support.google.com/docs/answer/3256534",
    "notes": [],
    "sampleUsage": [
      "AVERAGEIFS(A1:A10, B1:B10, \">20\")",
      "AVERAGEIFS(A1:A10, B1:B10, \">20\", C1:C10, \"<30\")",
      "AVERAGEIFS(C1:C100, E1:E100, \"Yes\")"
    ],
    "related": [
      "AVERAGE",
      "AVERAGEA",
      "AVERAGEIF",
      "SUMIFS",
      "COUNTIFS",
      "IF",
      "MEDIAN"
    ],
    "syntaxVariables": [
      { "name": "average_range", "description": "The range to average." },
      {
        "name": "criteria_range1",
        "description": "The range to check against criterion1."
      },
      {
        "name": "criterion1",
        "description": "The pattern or test to apply to criteria_range1."
      },
      {
        "name": "criteria_range2, criterion2, ...",
        "description": "[ OPTIONAL ] - Additional ranges and criteria to check."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "BETA.DIST",
    "syntax": "BETA.DIST(value, alpha, beta, cumulative, lower_bound, upper_bound)",
    "description": "Returns the probability of a given value as defined by the beta distribution function.",
    "link": "https://support.google.com/docs/answer/9084228",
    "notes": [],
    "sampleUsage": [
      "BETA.DIST(value, alpha, beta, lower_bound, upper_bound)",
      "BETA.DIST(0.65, 1.234, 7, 0.5, 3)",
      "BETA.DIST(0.42, 3, 8)",
      "BETA.DIST(0.92, 0.5, 0.7)"
    ],
    "related": [],
    "syntaxVariables": [
      {
        "name": "BETADIST",
        "description": "You can use  or BETA.DIST to perform this function."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "BETA.INV",
    "syntax": "BETA.INV(probability, alpha, beta, lower_bound, upper_bound)",
    "description": "Returns the value of the inverse beta distribution function for a given probability.",
    "link": "https://support.google.com/docs/answer/9061377",
    "notes": [],
    "sampleUsage": [
      "BETA.INV(probability, alpha, beta, lower_bound, upper_bound)"
    ],
    "related": [],
    "syntaxVariables": []
  },
  {
    "type": "Statistical",
    "name": "BETADIST",
    "syntax": "BETADIST(value, alpha, beta, lower_bound, upper_bound)",
    "description": "See BETA.DIST.",
    "link": "https://support.google.com/docs/answer/9084099",
    "notes": [],
    "sampleUsage": [
      "BETA.DIST(value, alpha, beta, lower_bound, upper_bound)",
      "BETA.DIST(0.65, 1.234, 7, 0.5, 3)",
      "BETA.DIST(0.42, 3, 8)",
      "BETA.DIST(0.92, 0.5, 0.7)"
    ],
    "related": [],
    "syntaxVariables": [
      {
        "name": "BETADIST",
        "description": "You can use  or BETA.DIST to perform this function."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "BETAINV",
    "syntax": "BETAINV(probability, alpha, beta, lower_bound, upper_bound)",
    "description": "See BETA.INV",
    "link": "https://support.google.com/docs/answer/9061377",
    "notes": [],
    "sampleUsage": [
      "BETA.INV(probability, alpha, beta, lower_bound, upper_bound)"
    ],
    "related": [],
    "syntaxVariables": []
  },
  {
    "type": "Statistical",
    "name": "BINOM.DIST",
    "syntax": "BINOM.DIST(num_successes, num_trials, prob_success, cumulative)",
    "description": "See BINOMDIST",
    "link": "https://support.google.com/docs/answer/3093987",
    "notes": [
      "HYPGEOMDIST describes the probability of drawing a certain number of successes in a certain number of tries given a population of a certain size containing a certain number of successes, without replacement of draws."
    ],
    "sampleUsage": ["BINOMDIST(4,100,0.005,FALSE)", "BINOMDIST(A2,A3,A4,TRUE)"],
    "related": [
      "WEIBULL",
      "PROB",
      "POISSON",
      "NORMSINV",
      "NORMSDIST",
      "NORMINV",
      "NORMDIST",
      "NEGBINOMDIST",
      "LOGNORMDIST",
      "LOGINV",
      "HYPGEOMDIST",
      "EXPONDIST",
      "CRITBINOM"
    ],
    "syntaxVariables": [
      {
        "name": "num_successes",
        "description": "The number of successes for which to calculate the probability in num_trials trials.\n\n    \n      If cumulative is TRUE then BINOMDIST returns the probability of num_successes or fewer successes, otherwise the probability of exactly num_successes successes."
      },
      {
        "name": "num_trials",
        "description": "The number of independent trials."
      },
      {
        "name": "prob_success",
        "description": "The probability of success in any given trial."
      },
      {
        "name": "cumulative",
        "description": "[ FALSE by default ] - Whether to use the binomial cumulative distribution."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "BINOM.INV",
    "syntax": "BINOM.INV(num_trials, prob_success, target_prob)",
    "description": "See CRITBINOM",
    "link": "https://support.google.com/docs/answer/3093623",
    "notes": [],
    "sampleUsage": ["CRITBINOM(100,0.005,0.8)", "CRITBINOM(A2,A3,A4)"],
    "related": ["PROB", "BINOMDIST"],
    "syntaxVariables": [
      {
        "name": "num_trials",
        "description": "The number of independent trials."
      },
      {
        "name": "prob_success",
        "description": "The probability of success in any given trial."
      },
      {
        "name": "target_prob",
        "description": "The desired threshold probability."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "BINOMDIST",
    "syntax": "BINOMDIST(num_successes, num_trials, prob_success, cumulative)",
    "description": "Calculates the probability of drawing a certain number of successes (or a maximum number of successes) in a certain number of tries given a population of a certain size containing a certain number of successes, with replacement of draws.",
    "link": "https://support.google.com/docs/answer/3093987",
    "notes": [
      "HYPGEOMDIST describes the probability of drawing a certain number of successes in a certain number of tries given a population of a certain size containing a certain number of successes, without replacement of draws."
    ],
    "sampleUsage": ["BINOMDIST(4,100,0.005,FALSE)", "BINOMDIST(A2,A3,A4,TRUE)"],
    "related": [
      "WEIBULL",
      "PROB",
      "POISSON",
      "NORMSINV",
      "NORMSDIST",
      "NORMINV",
      "NORMDIST",
      "NEGBINOMDIST",
      "LOGNORMDIST",
      "LOGINV",
      "HYPGEOMDIST",
      "EXPONDIST",
      "CRITBINOM"
    ],
    "syntaxVariables": [
      {
        "name": "num_successes",
        "description": "The number of successes for which to calculate the probability in num_trials trials.\n\n    \n      If cumulative is TRUE then BINOMDIST returns the probability of num_successes or fewer successes, otherwise the probability of exactly num_successes successes."
      },
      {
        "name": "num_trials",
        "description": "The number of independent trials."
      },
      {
        "name": "prob_success",
        "description": "The probability of success in any given trial."
      },
      {
        "name": "cumulative",
        "description": "[ FALSE by default ] - Whether to use the binomial cumulative distribution."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "CHIDIST",
    "syntax": "CHIDIST(x, degrees_freedom)",
    "description": "Calculates the right-tailed chi-squared distribution, often used in hypothesis testing.",
    "link": "https://support.google.com/docs/answer/7003346",
    "notes": [
      "degrees_freedom is truncated to an integer if a non-integer is provided.",
      "degrees_freedom must be at least 1 and may not exceed 10^10.",
      "All arguments must be numeric.",
      "CHIDIST is synonymous with CHISQ.DIST.RT."
    ],
    "sampleUsage": ["CHIDIST(3.45, 2)", "CHIDIST(A2, B2)"],
    "related": [
      "CHIINV",
      "CHISQ.DIST",
      "CHISQ.DIST.RT",
      "CHITEST",
      "FDIST",
      "GAMMADIST",
      "TDIST"
    ],
    "syntaxVariables": [
      {
        "name": "x",
        "description": "The input to the chi-squared probability distribution function. The value at which to evaluate the function.\n\n    \n      \n        Must be a positive number."
      },
      {
        "name": "degrees_freedom",
        "description": "The number of degrees of freedom of the distribution."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "CHIINV",
    "syntax": "CHIINV(probability, degrees_freedom)",
    "description": "Calculates the inverse of the right-tailed chi-squared distribution.",
    "link": "https://support.google.com/docs/answer/7003198",
    "notes": [
      "degrees_freedom is truncated to an integer if a non-integer is provided.",
      "degrees_freedom must be at least 1.",
      "All arguments must be numeric.",
      "CHIINV is synonymous with CHISQ.INV.RT."
    ],
    "sampleUsage": [
      "CHIINV(0.42, 2)",
      "CHIINV(A2, B2)",
      "CHIINV(probability, degrees_freedom)",
      "0.05",
      "4"
    ],
    "related": [
      "CHIDIST",
      "CHISQ.INV",
      "CHISQ.INV.RT",
      "CHITEST",
      "FINV",
      "TINV"
    ],
    "syntaxVariables": [
      {
        "name": "probability",
        "description": "The probability associated with the right-tailed chi-squared distribution.\n\n    \n      \n        Must be greater than 0 and less than 1."
      },
      {
        "name": "degrees_freedom",
        "description": "The number of degrees of freedom of the distribution."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "CHISQ.DIST",
    "syntax": "CHISQ.DIST(x, degrees_freedom, cumulative)",
    "description": "Calculates the left-tailed chi-squared distribution, often used in hypothesis testing.",
    "link": "https://support.google.com/docs/answer/7003347",
    "notes": [
      "degrees_freedom is truncated to an integer if a non-integer is provided.",
      "degrees_freedom must be at least 1 and may not exceed 10^10.",
      "x and degrees_freedom must be numeric."
    ],
    "sampleUsage": ["CHISQ.DIST(3.45, 2, TRUE)", "CHISQ.DIST(A2, B2, TRUE)"],
    "related": ["CHIDIST", "CHIINV", "CHISQ.DIST.RT", "CHITEST", "GAMMADIST"],
    "syntaxVariables": [
      {
        "name": "x",
        "description": "The input to the chi-squared probability distribution function. The value at which to evaluate the function.\n\n    \n      \n        Must be a positive number."
      },
      {
        "name": "degrees_freedom",
        "description": "The number of degrees of freedom of the distribution."
      },
      {
        "name": "cumulative",
        "description": "Logical value that determines the form of the function.\n\n    \n      \n        If TRUE: CHI.DIST returns the left-tailed cumulative distribution function.\n      \n      \n        If FALSE: CHI.DIST returns the probability density function."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "CHISQ.DIST.RT",
    "syntax": "CHISQ.DIST.RT(x, degrees_freedom)",
    "description": "Calculates the right-tailed chi-squared distribution, which is commonly used in hypothesis testing.",
    "link": "https://support.google.com/docs/answer/7003199",
    "notes": [
      "degrees_freedom is truncated to an integer if a non-integer is provided.",
      "degrees_freedom must be at least 1 and may not exceed 10^10.",
      "All arguments must be numeric.",
      "CHISQ.DIST.RT is synonymous with CHIDIST."
    ],
    "sampleUsage": ["CHISQ.DIST.RT(3.45, 2)", "CHISQ.DIST.RT(A2, B2)"],
    "related": ["CHIDIST", "CHIINV", "CHISQ.DIST", "CHITEST"],
    "syntaxVariables": [
      {
        "name": "x",
        "description": "The input to the chi-squared probability distribution function. The value at which to evaluate the function.\n\n    \n      \n        Must be a positive number."
      },
      {
        "name": "degrees_freedom",
        "description": "The number of degrees of freedom of the distribution."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "CHISQ.INV",
    "syntax": "CHISQ.INV(probability, degrees_freedom)",
    "description": "Calculates the inverse of the left-tailed chi-squared distribution.",
    "link": "https://support.google.com/docs/answer/7004181",
    "notes": [
      "degrees_freedom is truncated to an integer if a non-integer is provided.",
      "degrees_freedom must be at least 1.",
      "All arguments must be numeric."
    ],
    "sampleUsage": [
      "CHISQ.INV(0.42, 2)",
      "CHISQ.INV(A2, B2)",
      "CHISQ.INV(probability, degrees_freedom)",
      "0.95",
      "4"
    ],
    "related": [
      "CHIDIST",
      "CHIINV",
      "CHISQ.INV.RT",
      "CHITEST",
      "F.INV",
      "T.INV"
    ],
    "syntaxVariables": [
      {
        "name": "probability",
        "description": "The probability associated with the left-tailed chi-squared distribution.\n\n    \n      \n        Must be greater than 0 and less than 1."
      },
      {
        "name": "degrees_freedom",
        "description": "The number of degrees of freedom of the distribution."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "CHISQ.INV.RT",
    "syntax": "CHISQ.INV.RT(probability, degrees_freedom)",
    "description": "Calculates the inverse of the right-tailed chi-squared distribution.",
    "link": "https://support.google.com/docs/answer/7003348",
    "notes": [
      "degrees_freedom is truncated to an integer if a non-integer is provided.",
      "degrees_freedom must be at least 1.",
      "All arguments must be numeric.",
      "CHISQ.INV.RT is synonymous with CHIINV."
    ],
    "sampleUsage": [
      "CHISQ.INV.RT(0.42, 2)",
      "CHISQ.INV.RT(A2, B2)",
      "CHISQ.INV.RT(probability, degrees_freedom)",
      "0.05",
      "4"
    ],
    "related": ["CHIDIST", "CHIINV", "CHISQ.INV", "CHITEST", "F.INV", "T.INV"],
    "syntaxVariables": [
      {
        "name": "probability",
        "description": "The probability associated with the right-tailed chi-squared distribution.\n\n    \n      \n        Must be greater than 0 and less than 1."
      },
      {
        "name": "degrees_freedom",
        "description": "The number of degrees of freedom of the distribution."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "CHISQ.TEST",
    "syntax": "CHISQ.TEST(observed_range, expected_range)",
    "description": "See CHITEST",
    "link": "https://support.google.com/docs/answer/7004263",
    "notes": [
      "observed_range and expected_range must both be ranges with the same number of rows and columns.",
      "If any cell in either range is non-numeric, it and the corresponding cell in the other range do not count toward the calculation."
    ],
    "sampleUsage": ["CHITEST(A1:A5, B1:B5)", "CHITEST(A1:D3, A5:D7)"],
    "related": [
      "CHIDIST",
      "CHIINV",
      "CHISQ.DIST",
      "CHISQ.DIST.RT",
      "FTEST",
      "TTEST"
    ],
    "syntaxVariables": [
      {
        "name": "observed_range",
        "description": "The counts associated with each category of data."
      },
      {
        "name": "expected_range",
        "description": "The expected counts for each category under the null hypothesis."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "CHITEST",
    "syntax": "CHITEST(observed_range, expected_range)",
    "description": "Returns the probability associated with a Pearson’s chi-squared test on the two ranges of data. Determines the likelihood that the observed categorical data is drawn from an expected distribution.",
    "link": "https://support.google.com/docs/answer/7004263",
    "notes": [
      "observed_range and expected_range must both be ranges with the same number of rows and columns.",
      "If any cell in either range is non-numeric, it and the corresponding cell in the other range do not count toward the calculation."
    ],
    "sampleUsage": ["CHITEST(A1:A5, B1:B5)", "CHITEST(A1:D3, A5:D7)"],
    "related": [
      "CHIDIST",
      "CHIINV",
      "CHISQ.DIST",
      "CHISQ.DIST.RT",
      "FTEST",
      "TTEST"
    ],
    "syntaxVariables": [
      {
        "name": "observed_range",
        "description": "The counts associated with each category of data."
      },
      {
        "name": "expected_range",
        "description": "The expected counts for each category under the null hypothesis."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "CONFIDENCE",
    "syntax": "CONFIDENCE(alpha, standard_deviation, pop_size)",
    "description": "See CONFIDENCE.NORM",
    "link": "https://support.google.com/docs/answer/3093988",
    "notes": [
      "CONFIDENCE.NORM calculates the width of half the confidence interval such that a value picked at random from the data set has 1-alpha probability of lying within the mean plus or minus the result of CONFIDENCE.NORM.",
      "You can use CONFIDENCE or CONFIDENCE.NORM to perform this function."
    ],
    "sampleUsage": [
      "CONFIDENCE.NORM(0.05,1.6,250)",
      "CONFIDENCE.NORM(A2,A3,A4)"
    ],
    "related": ["ZTEST"],
    "syntaxVariables": [
      {
        "name": "alpha",
        "description": "One minus the desired confidence level. E.g. 0.1 for 0.9, or 90%, confidence."
      },
      {
        "name": "standard_deviation",
        "description": "The standard deviation of the population."
      },
      { "name": "pop_size", "description": "The size of the population." }
    ]
  },
  {
    "type": "Statistical",
    "name": "CONFIDENCE.NORM",
    "syntax": "CONFIDENCE.NORM(alpha, standard_deviation, pop_size)",
    "description": "Calculates the width of half the confidence interval for a normal distribution.",
    "link": "https://support.google.com/docs/answer/3093988",
    "notes": [
      "CONFIDENCE.NORM calculates the width of half the confidence interval such that a value picked at random from the data set has 1-alpha probability of lying within the mean plus or minus the result of CONFIDENCE.NORM.",
      "You can use CONFIDENCE or CONFIDENCE.NORM to perform this function."
    ],
    "sampleUsage": [
      "CONFIDENCE.NORM(0.05,1.6,250)",
      "CONFIDENCE.NORM(A2,A3,A4)"
    ],
    "related": ["ZTEST"],
    "syntaxVariables": [
      {
        "name": "alpha",
        "description": "One minus the desired confidence level. E.g. 0.1 for 0.9, or 90%, confidence."
      },
      {
        "name": "standard_deviation",
        "description": "The standard deviation of the population."
      },
      { "name": "pop_size", "description": "The size of the population." }
    ]
  },
  {
    "type": "Statistical",
    "name": "CONFIDENCE.T",
    "syntax": "CONFIDENCE.T(alpha, standard_deviation, size)",
    "description": "Calculates the width of half the confidence interval for a Student’s t-distribution.",
    "link": "https://support.google.com/docs/answer/9365672",
    "notes": [],
    "sampleUsage": [
      "CONFIDENCE.T(alpha, standard_deviation, size)",
      "CONFIDENCE.T",
      "1-alpha"
    ],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "CONFIDENCE.NORM: Calculates the width of half the confidence interval for a normal distribution."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "CORREL",
    "syntax": "CORREL(data_y, data_x)",
    "description": "Calculates r, the Pearson product-moment correlation coefficient of a dataset.",
    "link": "https://support.google.com/docs/answer/3093990",
    "notes": [
      "Any text encountered in the value arguments will be ignored.",
      "CORREL is synonymous with PEARSON."
    ],
    "sampleUsage": ["CORREL(A2:A100,B2:B100)"],
    "related": [
      "STEYX",
      "SLOPE",
      "RSQ",
      "PEARSON",
      "INTERCEPT",
      "FORECAST",
      "FISHERINV",
      "FISHER",
      "COVAR"
    ],
    "syntaxVariables": [
      {
        "name": "data_y",
        "description": "The range representing the array or matrix of dependent data."
      },
      {
        "name": "data_x",
        "description": "The range representing the array or matrix of independent data."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "COUNT",
    "syntax": "COUNT(value1, [value2, ...])",
    "description": "Returns a count of the number of numeric values in a dataset.",
    "link": "https://support.google.com/docs/answer/3093620",
    "notes": [
      "Although COUNT is specified as taking a maximum of 30 arguments, Google Sheets supports an arbitrary number of arguments for this function.",
      "COUNT counts all numeric values in a dataset, including those which appear more than once. To count unique values, use COUNTUNIQUE.",
      "COUNT counts only numeric values; text values are ignored."
    ],
    "sampleUsage": ["COUNT(A2:A100,B2:B100,4,26)", "COUNT(1,2,3,4,5,C6:C20)"],
    "related": [
      "MODE",
      "DCOUNTA",
      "DCOUNT",
      "COUNTUNIQUE",
      "COUNTIF",
      "COUNTBLANK",
      "COUNTA"
    ],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The first value or range to consider when counting."
      },
      {
        "name": "value2, ...",
        "description": "[ OPTIONAL ] - Additional values or ranges to consider when counting."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "COUNTA",
    "syntax": "COUNTA(value1, [value2, ...])",
    "description": "Returns a count of the number of values in a dataset.",
    "link": "https://support.google.com/docs/answer/3093991",
    "notes": [
      "Although COUNTA is specified as taking a maximum of 30 arguments, Google Sheets supports an arbitrary number of arguments for this function.",
      "COUNTA counts all values in a dataset, including those which appear more than once and text values (including zero-length strings and whitespace). To count unique values, use COUNTUNIQUE. To count only numeric values use COUNT."
    ],
    "sampleUsage": ["COUNTA(A2:A100,B2:B100,4,26)", "COUNTA(1,2,3,4,5,C6:C20)"],
    "related": [
      "MODE",
      "DCOUNTA",
      "DCOUNT",
      "COUNTUNIQUE",
      "COUNTIF",
      "COUNTBLANK",
      "COUNT"
    ],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The first value or range to consider when counting."
      },
      {
        "name": "value2, ...",
        "description": "[ OPTIONAL ] - Additional values or ranges to consider when counting."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "COVAR",
    "syntax": "COVAR(data_y, data_x)",
    "description": "Calculates the covariance of a dataset.",
    "link": "https://support.google.com/docs/answer/3093993",
    "notes": [
      "Any text encountered in the value arguments will be ignored.",
      "Positive covariance indicates that the independent data and dependent data tend to change together in the same direction; negative indicates that they tend to change together in the opposite direction (i.e. increase in one leads to decrease in the other). The magnitude of covariance is difficult to interpret - use CORREL or PEARSON, the normalized version of COVAR, to gauge strength of linear correlation."
    ],
    "sampleUsage": ["COVAR(A2:A100,B2:B100)"],
    "related": [
      "STEYX",
      "SLOPE",
      "RSQ",
      "INTERCEPT",
      "FORECAST",
      "COVAR",
      "CORREL"
    ],
    "syntaxVariables": [
      {
        "name": "data_y",
        "description": "The range representing the array or matrix of dependent data."
      },
      {
        "name": "data_x",
        "description": "The range representing the array or matrix of independent data."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "COVARIANCE.P",
    "syntax": "COVARIANCE.P(data_y, data_x)",
    "description": "See COVAR",
    "link": "https://support.google.com/docs/answer/3093993",
    "notes": [
      "Any text encountered in the value arguments will be ignored.",
      "Positive covariance indicates that the independent data and dependent data tend to change together in the same direction; negative indicates that they tend to change together in the opposite direction (i.e. increase in one leads to decrease in the other). The magnitude of covariance is difficult to interpret - use CORREL or PEARSON, the normalized version of COVAR, to gauge strength of linear correlation."
    ],
    "sampleUsage": ["COVAR(A2:A100,B2:B100)"],
    "related": [
      "STEYX",
      "SLOPE",
      "RSQ",
      "INTERCEPT",
      "FORECAST",
      "COVAR",
      "CORREL"
    ],
    "syntaxVariables": [
      {
        "name": "data_y",
        "description": "The range representing the array or matrix of dependent data."
      },
      {
        "name": "data_x",
        "description": "The range representing the array or matrix of independent data."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "COVARIANCE.S",
    "syntax": "COVARIANCE.S(data_y, data_x)",
    "description": "Calculates the covariance of a dataset, where the dataset is a sample of the total population.",
    "link": "https://support.google.com/docs/answer/9365675",
    "notes": ["COVAR: Calculates the covariance of a dataset."],
    "sampleUsage": [
      "COVARIANCE.S(data_y, data_x)",
      "COVARIANCE.S(A1:A10)",
      "COVARIANCE.S(1, 2, 3, 4)"
    ],
    "related": [],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "Any text encountered in the  arguments will be ignored."
      },
      {
        "name": "",
        "description": "Positive covariance indicates that the independent data and dependent data tend to change together in the same direction."
      },
      {
        "name": "",
        "description": "Negative covariance indicates that they tend to change together in the opposite direction. An increase in one leads to a decrease in the other. The magnitude of covariance is difficult to interpret."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "CRITBINOM",
    "syntax": "CRITBINOM(num_trials, prob_success, target_prob)",
    "description": "Calculates the smallest value for which the cumulative binomial distribution is greater than or equal to a specified criteria.",
    "link": "https://support.google.com/docs/answer/3093623",
    "notes": [],
    "sampleUsage": ["CRITBINOM(100,0.005,0.8)", "CRITBINOM(A2,A3,A4)"],
    "related": ["PROB", "BINOMDIST"],
    "syntaxVariables": [
      {
        "name": "num_trials",
        "description": "The number of independent trials."
      },
      {
        "name": "prob_success",
        "description": "The probability of success in any given trial."
      },
      {
        "name": "target_prob",
        "description": "The desired threshold probability."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "DEVSQ",
    "syntax": "DEVSQ(value1, value2)",
    "description": "Calculates the sum of squares of deviations based on a sample.",
    "link": "https://support.google.com/docs/answer/3093625",
    "notes": [
      "Although DEVSQ is specified as taking a maximum of 30 arguments, Google Sheets supports an arbitrary number of arguments for this function.",
      "If the total number of values supplied as value arguments is not at least two, DEVSQ will return a value of 0.",
      "DEVSQ will ignore any text values found in ranges included in value arguments.",
      "DEVSQ is equivalent to the variance of a sample multiplied by the number of elements in the sample minus one; that is, (COUNT(...)-1)*VAR(...) where COUNT and VAR are called on the same dataset."
    ],
    "sampleUsage": ["DEVSQ(1,2,3,4,5,6,7,8,9,10)", "DEVSQ(A2:A100)"],
    "related": [
      "VARPA",
      "VARP",
      "VARA",
      "VAR",
      "STDEVPA",
      "STDEVP",
      "STDEVA",
      "STDEV",
      "SKEW",
      "KURT",
      "DVARP",
      "DVAR",
      "DSTDEVP",
      "DSTDEV",
      "AVEDEV"
    ],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The first value or range of the sample."
      },
      {
        "name": "value2, ...",
        "description": "Additional values or ranges to include in the sample."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "EXPON.DIST",
    "syntax": "EXPON.DIST(x, lambda, cumulative)",
    "description": "Returns the value of the exponential distribution function with a specified lambda at a specified value.",
    "link": "https://support.google.com/docs/answer/3093995",
    "notes": ["You can use EXPONDIST or EXPON.DIST to perform this function."],
    "sampleUsage": ["EXPON.DIST(4,0.5,FALSE)", "EXPON.DIST(A2,A3,A4)"],
    "related": [
      "WEIBULL",
      "POISSON",
      "NORMSINV",
      "NORMSDIST",
      "NORMINV",
      "NORMDIST",
      "NEGBINOMDIST",
      "LOGNORMDIST",
      "LOGINV",
      "HYPGEOMDIST",
      "BINOMDIST"
    ],
    "syntaxVariables": [
      {
        "name": "x",
        "description": "The input to the exponential distribution function.\n\n    \n      If cumulative is TRUE then EXPON.DIST returns the cumulative probability of all values up to x."
      },
      {
        "name": "lambda",
        "description": "The lambda to specify the exponential distribution function."
      },
      {
        "name": "cumulative",
        "description": "Whether to use the exponential cumulative distribution."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "EXPONDIST",
    "syntax": "EXPONDIST(x, lambda, cumulative)",
    "description": "See EXPON.DIST",
    "link": "https://support.google.com/docs/answer/3093995",
    "notes": ["You can use EXPONDIST or EXPON.DIST to perform this function."],
    "sampleUsage": ["EXPON.DIST(4,0.5,FALSE)", "EXPON.DIST(A2,A3,A4)"],
    "related": [
      "WEIBULL",
      "POISSON",
      "NORMSINV",
      "NORMSDIST",
      "NORMINV",
      "NORMDIST",
      "NEGBINOMDIST",
      "LOGNORMDIST",
      "LOGINV",
      "HYPGEOMDIST",
      "BINOMDIST"
    ],
    "syntaxVariables": [
      {
        "name": "x",
        "description": "The input to the exponential distribution function.\n\n    \n      If cumulative is TRUE then EXPON.DIST returns the cumulative probability of all values up to x."
      },
      {
        "name": "lambda",
        "description": "The lambda to specify the exponential distribution function."
      },
      {
        "name": "cumulative",
        "description": "Whether to use the exponential cumulative distribution."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "F.DIST",
    "syntax": "F.DIST(x, degrees_freedom1, degrees_freedom2, cumulative)",
    "description": "Calculates the left-tailed F probability distribution (degree of diversity) for two data sets with given input x. Alternately called Fisher-Snedecor distribution or Snedecor's F distribution.",
    "link": "https://support.google.com/docs/answer/6055706",
    "notes": [
      "Both degrees_freedom1 and degrees_freedom2 are truncated to an integer in the calculation if a non-integer is provided as an argument.",
      "Both degrees_freedom1 and degrees_freedom2 must be greater than 1 and may not exceed 10^10.",
      "x, degrees_freedom1, and degrees_freedom2 must be numeric."
    ],
    "sampleUsage": ["F.DIST(15.35, 7, 6, TRUE)", "F.DIST(A2, B2, C2, FALSE)"],
    "related": ["FDIST", "TDIST", "T.INV"],
    "syntaxVariables": [
      {
        "name": "x",
        "description": "The input to the F probability distribution function. The value at which to evaluate the function.\n\n    \n      \n        Must be a positive number."
      },
      {
        "name": "degrees_freedom1",
        "description": "The numerator degrees of freedom."
      },
      {
        "name": "degrees_freedom2",
        "description": "The denominator degrees of freedom."
      },
      {
        "name": "cumulative",
        "description": "Logical value that determines the form of the function. Default value is FALSE.\n\n    \n      \n        If TRUE: F.DIST returns the cumulative distribution function.\n      \n      \n        If FALSE: F.DIST returns the probability density function."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "F.DIST.RT",
    "syntax": "F.DIST.RT(x, degrees_freedom1, degrees_freedom2)",
    "description": "Calculates the right-tailed F probability distribution (degree of diversity) for two data sets with given input x. Alternately called Fisher-Snedecor distribution or Snedecor's F distribution.",
    "link": "https://support.google.com/docs/answer/6055799",
    "notes": [
      "Both degrees_freedom1 and degrees_freedom2 are truncated to an integer in the calculation if a non-integer is provided as an argument.",
      "Both degrees_freedom1 and degrees_freedom2 must be greater than 1 and may not exceed 10^10.",
      "All arguments must be numeric.",
      "F.DIST.RT is synonymous with FDIST."
    ],
    "sampleUsage": [
      "F.DIST.RT(15.35, 7, 6)",
      "F.DIST.RT(A2, B2, C2)",
      "F.DIST.RT(x, degrees_freedom1, degrees_freedom2)",
      "x",
      "15.35",
      "7",
      "6",
      "degrees_freedom1"
    ],
    "related": ["F.DIST", "TDIST"],
    "syntaxVariables": [
      {
        "name": "x",
        "description": "The input to the F probability distribution function. The value at which to evaluate the function.\n\n    \n      \n        Must be a positive number."
      },
      {
        "name": "degrees_freedom1",
        "description": "The numerator of the number of degrees of freedom."
      },
      {
        "name": "degrees_freedom2",
        "description": "The denominator of the number of degrees of freedom."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "F.INV",
    "syntax": "F.INV(probability, degrees_freedom1, degrees_freedom2)",
    "description": "Calculates the inverse of the left-tailed F probability distribution. Also called the Fisher-Snedecor distribution or Snedecor’s F distribution.",
    "link": "https://support.google.com/docs/answer/7004265",
    "notes": [
      "Both degrees_freedom1 and degrees_freedom2 are truncated to an integer in the calculation if a non-integer is provided as an argument.",
      "Both degrees_freedom1 and degrees_freedom2 must be at least 1.",
      "All arguments must be numeric."
    ],
    "sampleUsage": [
      "F.INV(0.42, 2, 3)",
      "F.INV(A2, B2, C2)",
      "F.INV(probability, degrees_freedom1, degrees_freedom2)"
    ],
    "related": ["CHIINV", "FDIST", "FINV", "FTEST", "T.INV"],
    "syntaxVariables": [
      {
        "name": "probability",
        "description": "The probability associated with the left-tailed F-distribution.\n\n    \n      \n        Must be greater than 0 and less than 1."
      },
      {
        "name": "degrees_freedom1",
        "description": "The number of degrees of freedom of the numerator of the test statistic."
      },
      {
        "name": "degrees_freedom2",
        "description": "The number of degrees of freedom of the denominator of the test statistic."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "F.INV.RT",
    "syntax": "F.INV.RT(probability, degrees_freedom1, degrees_freedom2)",
    "description": "Calculates the inverse of the right-tailed F probability distribution. Also called the Fisher-Snedecor distribution or Snedecor’s F distribution.",
    "link": "https://support.google.com/docs/answer/7003960",
    "notes": [
      "Both degrees_freedom1 and degrees_freedom2 are truncated to an integer in the calculation if a non-integer is provided as an argument.",
      "Both degrees_freedom1 and degrees_freedom2 must be at least 1.",
      "All arguments must be numeric.",
      "F.INV.RT is synonymous with FINV."
    ],
    "sampleUsage": [
      "F.INV.RT(0.42, 2, 3)",
      "F.INV.RT(A2, B2, C2)",
      "F.INV.RT(probability, degrees_freedom1, degrees_freedom2)",
      "0.05",
      "4",
      "5"
    ],
    "related": ["CHIINV", "F.DIST", "F.INV", "FTEST", "TINV"],
    "syntaxVariables": [
      {
        "name": "probability",
        "description": "The probability associated with the right-tailed F-distribution.\n\n    \n      \n        Must be greater than 0 and less than 1."
      },
      {
        "name": "degrees_freedom1",
        "description": "The number of degrees of freedom of the numerator of the test statistic."
      },
      {
        "name": "degrees_freedom2",
        "description": "The number of degrees of freedom of the denominator of the test statistic."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "F.TEST",
    "syntax": "F.TEST(range1, range2)",
    "description": "See FTEST.",
    "link": "https://support.google.com/docs/answer/7004183",
    "notes": [
      "Any non-numeric cells in either range are ignored in the calculation.",
      "You can use FTEST or F.TEST to perform this function."
    ],
    "sampleUsage": [
      "FTEST(A1:A5, B1:B5)",
      "FTEST(A1:D3, A5:D7)",
      "FTEST(range1, range2)"
    ],
    "related": ["CHITEST", "FDIST", "FINV", "TTEST"],
    "syntaxVariables": [
      {
        "name": "range1",
        "description": "The first sample of data or group of cells to consider for the F-test."
      },
      {
        "name": "range2",
        "description": "The second sample of data or group of cells to consider for the F-test."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "FDIST",
    "syntax": "FDIST(x, degrees_freedom1, degrees_freedom2)",
    "description": "See F.DIST.RT.",
    "link": "https://support.google.com/docs/answer/6055799",
    "notes": [
      "Both degrees_freedom1 and degrees_freedom2 are truncated to an integer in the calculation if a non-integer is provided as an argument.",
      "Both degrees_freedom1 and degrees_freedom2 must be greater than 1 and may not exceed 10^10.",
      "All arguments must be numeric.",
      "F.DIST.RT is synonymous with FDIST."
    ],
    "sampleUsage": [
      "F.DIST.RT(15.35, 7, 6)",
      "F.DIST.RT(A2, B2, C2)",
      "F.DIST.RT(x, degrees_freedom1, degrees_freedom2)",
      "x",
      "15.35",
      "7",
      "6",
      "degrees_freedom1"
    ],
    "related": ["F.DIST", "TDIST"],
    "syntaxVariables": [
      {
        "name": "x",
        "description": "The input to the F probability distribution function. The value at which to evaluate the function.\n\n    \n      \n        Must be a positive number."
      },
      {
        "name": "degrees_freedom1",
        "description": "The numerator of the number of degrees of freedom."
      },
      {
        "name": "degrees_freedom2",
        "description": "The denominator of the number of degrees of freedom."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "FINV",
    "syntax": "FINV(probability, degrees_freedom1, degrees_freedom2)",
    "description": "See F.INV.RT",
    "link": "https://support.google.com/docs/answer/7003960",
    "notes": [
      "Both degrees_freedom1 and degrees_freedom2 are truncated to an integer in the calculation if a non-integer is provided as an argument.",
      "Both degrees_freedom1 and degrees_freedom2 must be at least 1.",
      "All arguments must be numeric.",
      "F.INV.RT is synonymous with FINV."
    ],
    "sampleUsage": [
      "F.INV.RT(0.42, 2, 3)",
      "F.INV.RT(A2, B2, C2)",
      "F.INV.RT(probability, degrees_freedom1, degrees_freedom2)",
      "0.05",
      "4",
      "5"
    ],
    "related": ["CHIINV", "F.DIST", "F.INV", "FTEST", "TINV"],
    "syntaxVariables": [
      {
        "name": "probability",
        "description": "The probability associated with the right-tailed F-distribution.\n\n    \n      \n        Must be greater than 0 and less than 1."
      },
      {
        "name": "degrees_freedom1",
        "description": "The number of degrees of freedom of the numerator of the test statistic."
      },
      {
        "name": "degrees_freedom2",
        "description": "The number of degrees of freedom of the denominator of the test statistic."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "FISHER",
    "syntax": "FISHER(value)",
    "description": "Returns the Fisher transformation of a specified value.",
    "link": "https://support.google.com/docs/answer/3093626",
    "notes": [],
    "sampleUsage": ["FISHER(0.962)", "FISHER(A2)"],
    "related": ["PEARSON", "FISHERINV", "CORREL"],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The value for which to calculate the Fisher transformation."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "FISHERINV",
    "syntax": "FISHERINV(value)",
    "description": "Returns the inverse Fisher transformation of a specified value.",
    "link": "https://support.google.com/docs/answer/3093998",
    "notes": [],
    "sampleUsage": ["FISHERINV(0.962)", "FISHERINV(A2)"],
    "related": ["PEARSON", "FISHER", "CORREL"],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The value for which to calculate the inverse Fisher transformation."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "FORECAST",
    "syntax": "FORECAST(x, data_y, data_x)",
    "description": "Calculates the expected y-value for a specified x based on a linear regression of a dataset.",
    "link": "https://support.google.com/docs/answer/3094000",
    "notes": ["Any text encountered in the value arguments will be ignored."],
    "sampleUsage": ["FORECAST(A1,A2:A100,B2:B100)"],
    "related": [
      "STEYX",
      "SLOPE",
      "RSQ",
      "PEARSON",
      "INTERCEPT",
      "COVAR",
      "CORREL"
    ],
    "syntaxVariables": [
      { "name": "x", "description": "The value on the x-axis to forecast." },
      {
        "name": "data_y",
        "description": "The range representing the array or matrix of dependent data."
      },
      {
        "name": "data_x",
        "description": "The range representing the array or matrix of independent data."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "FORECAST.LINEAR",
    "syntax": "FORECAST.LINEAR(x, data_y, data_x)",
    "description": "See FORECAST",
    "link": "https://support.google.com/docs/answer/3094000",
    "notes": ["Any text encountered in the value arguments will be ignored."],
    "sampleUsage": ["FORECAST(A1,A2:A100,B2:B100)"],
    "related": [
      "STEYX",
      "SLOPE",
      "RSQ",
      "PEARSON",
      "INTERCEPT",
      "COVAR",
      "CORREL"
    ],
    "syntaxVariables": [
      { "name": "x", "description": "The value on the x-axis to forecast." },
      {
        "name": "data_y",
        "description": "The range representing the array or matrix of dependent data."
      },
      {
        "name": "data_x",
        "description": "The range representing the array or matrix of independent data."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "FTEST",
    "syntax": "FTEST(range1, range2)",
    "description": "Returns the probability associated with an F-test for equality of variances. Determines whether two samples are likely to have come from populations with the same variance.",
    "link": "https://support.google.com/docs/answer/7004183",
    "notes": [
      "Any non-numeric cells in either range are ignored in the calculation.",
      "You can use FTEST or F.TEST to perform this function."
    ],
    "sampleUsage": [
      "FTEST(A1:A5, B1:B5)",
      "FTEST(A1:D3, A5:D7)",
      "FTEST(range1, range2)"
    ],
    "related": ["CHITEST", "FDIST", "FINV", "TTEST"],
    "syntaxVariables": [
      {
        "name": "range1",
        "description": "The first sample of data or group of cells to consider for the F-test."
      },
      {
        "name": "range2",
        "description": "The second sample of data or group of cells to consider for the F-test."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "GAMMA",
    "syntax": "GAMMA(number)",
    "description": "Returns the Gamma function evaluated at the specified value.",
    "link": "https://support.google.com/docs/answer/9365856",
    "notes": [],
    "sampleUsage": [
      "GAMMA(number)",
      "GAMMA(A1:A10)",
      "GAMMA(1, 2, 3, 4)",
      "GAMMA(B1:B5, 10)"
    ],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "GAMMALN: Returns the the logarithm of a specified Gamma function, base e (Euler's number)."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "GAMMA.DIST",
    "syntax": "GAMMA.DIST(x, alpha, beta, cumulative)",
    "description": "Calculates the gamma distribution, a two-parameter continuous probability distribution.",
    "link": "https://support.google.com/docs/answer/7013990",
    "notes": [
      "x, alpha, and beta must be numeric.",
      "alpha and beta must be greater than zero.",
      "If alpha is less than or equal to 1 and cumulative is FALSE, then x must be greater than zero; otherwise, x must be greater than or equal to zero.",
      "GAMMA.DIST is synonymous with GAMMADIST.",
      "The chi-squared distribution is a special case of the gamma distribution. For an integer n > 0, GAMMA.DIST(x, n/2, 2, cumulative) is equivalent to CHISQ.DIST(x, n, cumulative)."
    ],
    "sampleUsage": [
      "GAMMA.DIST(4.79, 1.234, 7, TRUE)",
      "GAMMA.DIST(A1, B1, C1, FALSE)",
      "GAMMA.DIST(x, alpha, beta, cumulative)",
      "x = 5",
      "alpha = 3.14"
    ],
    "related": ["CHISQ.DIST", "GAMMADIST"],
    "syntaxVariables": [
      {
        "name": "x",
        "description": "The input to the gamma probability distribution function. The value at which to evaluate the function."
      },
      { "name": "alpha", "description": "The shape of gamma distribution." },
      { "name": "beta", "description": "The scale of the distribution." },
      {
        "name": "cumulative",
        "description": "Logical value that determines the form of the function.\n\n    \n      \n        If TRUE: GAMMA.DIST returns the left-tailed cumulative distribution function.\n      \n      \n        If FALSE: GAMMA.DIST returns the probability density function."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "GAMMA.INV",
    "syntax": "GAMMA.INV(probability, alpha, beta)",
    "description": "The GAMMA.INV function returns the value of the inverse gamma cumulative distribution function for the specified probability and alpha and beta parameters.",
    "link": "https://support.google.com/docs/answer/9116467",
    "notes": [
      "GAMMA.DIST: The GAMMA.DIST function calculates the gamma distribution, a 2-parameter continuous probability distribution."
    ],
    "sampleUsage": [
      "GAMMA.INV(probability, alpha, beta)",
      "GAMMA.INV(0.65, 4, 2)"
    ],
    "related": [],
    "syntaxVariables": [
      {
        "name": "GAMMAINV",
        "description": "You can use  or GAMMA.INV to perform this function."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "GAMMADIST",
    "syntax": "GAMMADIST(x, alpha, beta, cumulative)",
    "description": "See GAMMA.DIST",
    "link": "https://support.google.com/docs/answer/7013989",
    "notes": [
      "x, alpha, and beta must be numeric.",
      "alpha and beta must be greater than zero.",
      "If alpha is less than or equal to 1 and cumulative is FALSE, then x must be greater than zero; otherwise, x must be greater than or equal to zero.",
      "GAMMA.DIST is synonymous with GAMMADIST.",
      "The chi-squared distribution is a special case of the gamma distribution. For an integer n > 0, GAMMA.DIST(x, n/2, 2, cumulative) is equivalent to CHISQ.DIST(x, n, cumulative)."
    ],
    "sampleUsage": [
      "GAMMA.DIST(4.79, 1.234, 7, TRUE)",
      "GAMMA.DIST(A1, B1, C1, FALSE)",
      "GAMMA.DIST(x, alpha, beta, cumulative)",
      "x = 5",
      "alpha = 3.14"
    ],
    "related": ["CHISQ.DIST", "GAMMADIST"],
    "syntaxVariables": [
      {
        "name": "x",
        "description": "The input to the gamma probability distribution function. The value at which to evaluate the function."
      },
      { "name": "alpha", "description": "The shape of gamma distribution." },
      { "name": "beta", "description": "The scale of the distribution." },
      {
        "name": "cumulative",
        "description": "Logical value that determines the form of the function.\n\n    \n      \n        If TRUE: GAMMA.DIST returns the left-tailed cumulative distribution function.\n      \n      \n        If FALSE: GAMMA.DIST returns the probability density function."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "GAMMAINV",
    "syntax": "GAMMAINV(probability, alpha, beta)",
    "description": "See GAMMA.INV.",
    "link": "https://support.google.com/docs/answer/9116467",
    "notes": [
      "GAMMA.DIST: The GAMMA.DIST function calculates the gamma distribution, a 2-parameter continuous probability distribution."
    ],
    "sampleUsage": [
      "GAMMA.INV(probability, alpha, beta)",
      "GAMMA.INV(0.65, 4, 2)"
    ],
    "related": [],
    "syntaxVariables": [
      {
        "name": "GAMMAINV",
        "description": "You can use  or GAMMA.INV to perform this function."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "GAUSS",
    "syntax": "GAUSS(z)",
    "description": "The GAUSS function returns the probability that a random variable, drawn from a normal distribution, will be between the mean and z standard deviations above (or below) the mean.",
    "link": "https://support.google.com/docs/answer/9116278",
    "notes": [],
    "sampleUsage": ["GAUSS(z)", "GAUSS(1)"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "A negative z value causes GAUSS(z) to return a negative number."
      },
      {
        "name": "",
        "description": "When z uses the value in another cell (e.g. \"GAUSS(B2)\"), the GAUSS function returns 0 if there's no data in the cell."
      },
      {
        "name": "",
        "description": "Calling GAUSS(z) asks the question, \"what's the probability that a random number will be between μ and the standard deviation z * σ?\""
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "GEOMEAN",
    "syntax": "GEOMEAN(value1, value2)",
    "description": "Calculates the geometric mean of a dataset.",
    "link": "https://support.google.com/docs/answer/3094001",
    "notes": [
      "The geometric mean of a population is the nth root of the product of all the data points, where n is the size of the population."
    ],
    "sampleUsage": ["GEOMEAN(1,2,3,4,5,6,7,8,9,10)", "GEOMEAN(A2:A100)"],
    "related": [
      "TRIMMEAN",
      "SMALL",
      "RANK",
      "QUARTILE",
      "PERCENTRANK",
      "PERCENTILE",
      "MINA",
      "MIN",
      "MEDIAN",
      "MAXA",
      "LARGE",
      "HARMEAN",
      "AVERAGEA",
      "AVERAGE"
    ],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The first value or range of the population."
      },
      {
        "name": "value2, ...",
        "description": "Additional values or ranges to include in the population."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "HARMEAN",
    "syntax": "HARMEAN(value1, value2)",
    "description": "Calculates the harmonic mean of a dataset.",
    "link": "https://support.google.com/docs/answer/3094003",
    "notes": [
      "The harmonic mean of a population is the size of the population divided by the sum of the reciprocals of each of the data points in the population."
    ],
    "sampleUsage": ["HARMEAN(1,2,3,4,5,6,7,8,9,10)", "HARMEAN(A2:A100)"],
    "related": [
      "TRIMMEAN",
      "SMALL",
      "RANK",
      "QUARTILE",
      "PERCENTRANK",
      "PERCENTILE",
      "MINA",
      "MIN",
      "MEDIAN",
      "MAXA",
      "LARGE",
      "GEOMEAN",
      "AVERAGEA",
      "AVERAGE"
    ],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The first value or range of the population."
      },
      {
        "name": "value2, ...",
        "description": "Additional values or ranges to include in the population."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "HYPGEOM.DIST",
    "syntax": "HYPGEOM.DIST(num_successes, num_draws, successes_in_pop, pop_size)",
    "description": "See HYPGEOMDIST",
    "link": "https://support.google.com/docs/answer/3094004",
    "notes": [
      "BINOMDIST describes the probability of drawing a certain number of successes in a certain number of tries given a population of a certain size containing a certain number of successes, with replacement of draws."
    ],
    "sampleUsage": ["HYPGEOMDIST(4,12,20,40)", "HYPGEOMDIST(A2,A3,A4,A5)"],
    "related": [
      "NORMSINV",
      "NORMSDIST",
      "NORMINV",
      "NORMDIST",
      "NEGBINOMDIST",
      "LOGNORMDIST",
      "LOGINV",
      "EXPONDIST",
      "BINOMDIST"
    ],
    "syntaxVariables": [
      {
        "name": "num_successes",
        "description": "The desired number of successes."
      },
      { "name": "num_draws", "description": "The number of permitted draws." },
      {
        "name": "successes_in_pop",
        "description": "The total number of successes in the population."
      },
      { "name": "pop_size", "description": "The total size of the population" }
    ]
  },
  {
    "type": "Statistical",
    "name": "HYPGEOMDIST",
    "syntax": "HYPGEOMDIST(num_successes, num_draws, successes_in_pop, pop_size)",
    "description": "Calculates the probability of drawing a certain number of successes in a certain number of tries given a population of a certain size containing a certain number of successes, without replacement of draws.",
    "link": "https://support.google.com/docs/answer/3094004",
    "notes": [
      "BINOMDIST describes the probability of drawing a certain number of successes in a certain number of tries given a population of a certain size containing a certain number of successes, with replacement of draws."
    ],
    "sampleUsage": ["HYPGEOMDIST(4,12,20,40)", "HYPGEOMDIST(A2,A3,A4,A5)"],
    "related": [
      "NORMSINV",
      "NORMSDIST",
      "NORMINV",
      "NORMDIST",
      "NEGBINOMDIST",
      "LOGNORMDIST",
      "LOGINV",
      "EXPONDIST",
      "BINOMDIST"
    ],
    "syntaxVariables": [
      {
        "name": "num_successes",
        "description": "The desired number of successes."
      },
      { "name": "num_draws", "description": "The number of permitted draws." },
      {
        "name": "successes_in_pop",
        "description": "The total number of successes in the population."
      },
      { "name": "pop_size", "description": "The total size of the population" }
    ]
  },
  {
    "type": "Statistical",
    "name": "INTERCEPT",
    "syntax": "INTERCEPT(data_y, data_x)",
    "description": "Calculates the y-value at which the line resulting from linear regression of a dataset will intersect the y-axis (x=0).",
    "link": "https://support.google.com/docs/answer/3093632",
    "notes": ["Any text encountered in the value arguments will be ignored."],
    "sampleUsage": ["INTERCEPT(A2:A100,B2:B100)"],
    "related": [
      "STEYX",
      "SLOPE",
      "RSQ",
      "PEARSON",
      "FORECAST",
      "COVAR",
      "CORREL"
    ],
    "syntaxVariables": [
      {
        "name": "data_y",
        "description": "The range representing the array or matrix of dependent data."
      },
      {
        "name": "data_x",
        "description": "The range representing the array or matrix of independent data."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "KURT",
    "syntax": "KURT(value1, value2)",
    "description": "Calculates the kurtosis of a dataset, which describes the shape, and in particular the \"peakedness\" of that dataset.",
    "link": "https://support.google.com/docs/answer/3093634",
    "notes": [
      "Although KURT is specified as taking a maximum of 30 arguments, Google Sheets supports an arbitrary number of arguments for this function.",
      "If the total number of values supplied as value arguments is not at least two, KURT will return the #DIV/0! error.",
      "Any text encountered in the value arguments will be ignored.",
      "Positive kurtosis indicates a more \"peaked\" distribution in the dataset, while negative kurtosis indicates a flatter distribution."
    ],
    "sampleUsage": ["KURT(1,2,3,4,5,6,7,8,9,10)", "KURT(A2:A100)"],
    "related": [
      "VARPA",
      "VARP",
      "VARA",
      "VAR",
      "STDEVPA",
      "STDEVP",
      "STDEVA",
      "SKEW",
      "DVARP",
      "DVAR",
      "DSTDEVP",
      "DSTDEV",
      "DEVSQ",
      "AVEDEV"
    ],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The first value or range of the dataset."
      },
      {
        "name": "value2, ...",
        "description": "Additional values or ranges to include in the dataset."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "LARGE",
    "syntax": "LARGE(data, n)",
    "description": "Returns the nth largest element from a data set, where n is user-defined.",
    "link": "https://support.google.com/docs/answer/3094008",
    "notes": [],
    "sampleUsage": ["LARGE(A2:B100,4)", "LARGE(A2:B100,C2)"],
    "related": [
      "SMALL",
      "RANK",
      "QUARTILE",
      "PERCENTRANK",
      "PERCENTILE",
      "MINA",
      "MIN",
      "MEDIAN",
      "MAXA",
      "MAX",
      "AVERAGEA",
      "AVERAGE"
    ],
    "syntaxVariables": [
      {
        "name": "data",
        "description": "Array or range containing the dataset to consider."
      },
      {
        "name": "n",
        "description": "The rank from largest to smallest of the element to return.\n\n    \n      E.g. setting n to 4 will cause LARGE to return the 4th largest element from data."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "LOGINV",
    "syntax": "LOGINV(x, mean, standard_deviation)",
    "description": "Returns the value of the inverse log-normal cumulative distribution with given mean and standard deviation at a specified value.",
    "link": "https://support.google.com/docs/answer/3094010",
    "notes": [],
    "sampleUsage": ["LOGINV(0.4,4,6)", "LOGINV(A2,A3,A4)"],
    "related": [
      "WEIBULL",
      "POISSON",
      "NORMSINV",
      "NORMSDIST",
      "NORMINV",
      "NORMDIST",
      "NEGBINOMDIST",
      "LOGNORMDIST",
      "EXPONDIST",
      "BINOMDIST"
    ],
    "syntaxVariables": [
      {
        "name": "x",
        "description": "The input to the inverse log-normal cumulative distribution function."
      },
      {
        "name": "mean",
        "description": "The mean (mu) of the inverse log-normal cumulative distribution function."
      },
      {
        "name": "standard_deviation",
        "description": "The standard deviation (sigma) of the inverse log-normal cumulative distribution function."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "LOGNORM.DIST",
    "syntax": "LOGNORM.DIST(x, mean, standard_deviation)",
    "description": "See LOGNORMDIST",
    "link": "https://support.google.com/docs/answer/3094011",
    "notes": [
      "A log-normal distribution function is a probability distribution function of a random variable whose logarithm is normally distributed."
    ],
    "sampleUsage": ["LOGNORMDIST(4,4,6)", "LOGNORMDIST(A2,A3,A4)"],
    "related": [
      "WEIBULL",
      "POISSON",
      "NORMSINV",
      "NORMSDIST",
      "NORMINV",
      "NORMDIST",
      "NEGBINOMDIST",
      "LOGINV",
      "EXPONDIST",
      "BINOMDIST"
    ],
    "syntaxVariables": [
      {
        "name": "x",
        "description": "The input to the log-normal cumulative distribution function."
      },
      {
        "name": "mean",
        "description": "The mean (mu) of the log-normal cumulative distribution function."
      },
      {
        "name": "standard_deviation",
        "description": "The standard deviation (sigma) of the log-normal cumulative distribution function."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "LOGNORM.INV",
    "syntax": "LOGNORM.INV(x, mean, standard_deviation)",
    "description": "See LOGINV",
    "link": "https://support.google.com/docs/answer/3094010",
    "notes": [],
    "sampleUsage": ["LOGINV(0.4,4,6)", "LOGINV(A2,A3,A4)"],
    "related": [
      "WEIBULL",
      "POISSON",
      "NORMSINV",
      "NORMSDIST",
      "NORMINV",
      "NORMDIST",
      "NEGBINOMDIST",
      "LOGNORMDIST",
      "EXPONDIST",
      "BINOMDIST"
    ],
    "syntaxVariables": [
      {
        "name": "x",
        "description": "The input to the inverse log-normal cumulative distribution function."
      },
      {
        "name": "mean",
        "description": "The mean (mu) of the inverse log-normal cumulative distribution function."
      },
      {
        "name": "standard_deviation",
        "description": "The standard deviation (sigma) of the inverse log-normal cumulative distribution function."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "LOGNORMDIST",
    "syntax": "LOGNORMDIST(x, mean, standard_deviation)",
    "description": "Returns the value of the log-normal cumulative distribution with given mean and standard deviation at a specified value.",
    "link": "https://support.google.com/docs/answer/3094011",
    "notes": [
      "A log-normal distribution function is a probability distribution function of a random variable whose logarithm is normally distributed."
    ],
    "sampleUsage": ["LOGNORMDIST(4,4,6)", "LOGNORMDIST(A2,A3,A4)"],
    "related": [
      "WEIBULL",
      "POISSON",
      "NORMSINV",
      "NORMSDIST",
      "NORMINV",
      "NORMDIST",
      "NEGBINOMDIST",
      "LOGINV",
      "EXPONDIST",
      "BINOMDIST"
    ],
    "syntaxVariables": [
      {
        "name": "x",
        "description": "The input to the log-normal cumulative distribution function."
      },
      {
        "name": "mean",
        "description": "The mean (mu) of the log-normal cumulative distribution function."
      },
      {
        "name": "standard_deviation",
        "description": "The standard deviation (sigma) of the log-normal cumulative distribution function."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "MAX",
    "syntax": "MAX(value1, [value2, ...])",
    "description": "Returns the maximum value in a numeric dataset.",
    "link": "https://support.google.com/docs/answer/3094013",
    "notes": [
      "Although MAX is specified as taking a maximum of 30 arguments, Google Sheets supports an arbitrary number of arguments for this function.",
      "Each value argument must be a cell, a number, or a range containing numbers. Cells without numbers or ranges are ignored. Entering text values will cause MAX to return the #VALUE! error. To allow text values, use MAXA."
    ],
    "sampleUsage": ["MAX(A2:A100,B2:B100,4,26)", "MAX(1,2,3,4,5,C6:C20)"],
    "related": [
      "SMALL",
      "RANK",
      "QUARTILE",
      "PERCENTRANK",
      "PERCENTILE",
      "MINA",
      "MIN",
      "MEDIAN",
      "MAXA",
      "LARGE",
      "AVERAGEA",
      "AVERAGE"
    ],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The first value or range to consider when calculating the maximum value."
      },
      {
        "name": "value2, ...",
        "description": "[ OPTIONAL ] - Additional values or ranges to consider when calculating the maximum value."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "MAXA",
    "syntax": "MAXA(value1, value2)",
    "description": "Returns the maximum numeric value in a dataset.",
    "link": "https://support.google.com/docs/answer/3094016",
    "notes": [
      "Although MAXA is specified as taking a maximum of 30 arguments, Google Sheets supports an arbitrary number of arguments for this function.",
      "Any referenced text value in any of the value arguments will be assigned the numeric value 0 for the purpose of this function.",
      "If an argument contains error values or text that can't be changed into numbers, it will cause an error."
    ],
    "sampleUsage": ["MAXA(A2:A100,B2:B100,4,26)", "MAXA(1,2,3,4,5,C6:C20)"],
    "related": [
      "SMALL",
      "RANK",
      "QUARTILE",
      "PERCENTRANK",
      "PERCENTILE",
      "MINA",
      "MIN",
      "MEDIAN",
      "MAX",
      "LARGE",
      "AVERAGEA",
      "AVERAGE"
    ],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The first value or range to consider when calculating the maximum value."
      },
      {
        "name": "value2, ...",
        "description": "[ OPTIONAL ] - Additional values or ranges to consider when calculating the maximum value."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "MAXIFS",
    "syntax": "MAXIFS(range, criteria_range1, criterion1, [criteria_range2, criterion2], …)",
    "description": "Returns the maximum value in a range of cells, filtered by a set of criteria.",
    "link": "https://support.google.com/docs/answer/7013817",
    "notes": [
      "MAXIFS will return 0 if none of the criterion are satisfied.",
      "range and all of the criterion ranges must be the same size. If they aren't, MAXIFS will return a #VALUE error."
    ],
    "sampleUsage": [
      "MAXIFS(A1:A3, B1:B3, 1, C1:C3, “A”)",
      "MAXIFS(D4:E5, F4:G5, “>5”, F6:G7, “<10”)"
    ],
    "related": ["MINIFS", "SUMIFS", "IFS"],
    "syntaxVariables": [
      {
        "name": "range",
        "description": "The range of cells from which the maximum will be determined."
      },
      {
        "name": "criteria_range1",
        "description": "The range of cells over which to evaluate criterion1."
      },
      {
        "name": "criterion1",
        "description": " - The pattern or test to apply to criteria_range1."
      },
      {
        "name": "criteria_range2, criterion2, …",
        "description": " Optional: Additional ranges and their associated criteria. Note that filtering will result in the intersection of these."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "MEDIAN",
    "syntax": "MEDIAN(value1, [value2, ...])",
    "description": "Returns the median value in a numeric dataset.",
    "link": "https://support.google.com/docs/answer/3094025",
    "notes": [
      "Although MEDIAN is specified as taking a maximum of 30 arguments, Google Sheets supports an arbitrary number of arguments for this function.",
      "Any text encountered in the value arguments will be ignored.",
      "MEDIAN returns the center value if the dataset contains an odd number of values. If the combined value arguments contain an even number of values, MEDIAN will interpolate between the two center values.",
      "MEDIAN finds the center value of the dataset rather than the mean. To find the mean use AVERAGE or AVERAGEA."
    ],
    "sampleUsage": ["MEDIAN(A2:A100,B2:B100,4,26)", "MEDIAN(1,2,3,4,5,C6:C20)"],
    "related": [
      "SMALL",
      "RANK",
      "QUARTILE",
      "PERCENTRANK",
      "PERCENTILE",
      "MINA",
      "MIN",
      "MAXA",
      "MAX",
      "LARGE",
      "AVERAGEA",
      "AVERAGE"
    ],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The first value or range to consider when calculating the median value."
      },
      {
        "name": "value2, ...",
        "description": "[ OPTIONAL ] - Additional values or ranges to consider when calculating the median value."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "MIN",
    "syntax": "MIN(value1, [value2, ...])",
    "description": "Returns the minimum value in a numeric dataset.",
    "link": "https://support.google.com/docs/answer/3094017",
    "notes": [
      "Although MIN is specified as taking a maximum of 30 arguments, Google Sheets supports an arbitrary number of arguments for this function.",
      "Each value argument must be a cell, a number, or a range containing numbers. Cells without numbers or ranges are ignored. Entering text values will cause MIN to return the #VALUE! error. To allow text values, use MINA."
    ],
    "sampleUsage": ["MIN(A2:A100,B2:B100,4,26)", "MIN(1,2,3,4,5,C6:C20)"],
    "related": [
      "SMALL",
      "RANK",
      "QUARTILE",
      "PERCENTRANK",
      "PERCENTILE",
      "MINA",
      "MEDIAN",
      "MAXA",
      "MAX",
      "LARGE",
      "AVERAGEA",
      "AVERAGE"
    ],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The first value or range to consider when calculating the minimum value."
      },
      {
        "name": "value2, ...",
        "description": "[ OPTIONAL ] - Additional values or ranges to consider when calculating the minimum value."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "MINA",
    "syntax": "MINA(value1, value2)",
    "description": "Returns the minimum numeric value in a dataset.",
    "link": "https://support.google.com/docs/answer/3094018",
    "notes": [
      "Although MINA is specified as taking a maximum of 30 arguments, Google Sheets supports an arbitrary number of arguments for this function.",
      "Any text value in any of the value arguments will be assigned the numeric value 0 for the purpose of this function; ensure that the actual minimum value is either less than 0 or remove text from data to calculate the correct answer."
    ],
    "sampleUsage": ["MINA(A2:A100,B2:B100,4,26)", "MINA(1,2,3,4,5,C6:C20)"],
    "related": [
      "SMALL",
      "RANK",
      "QUARTILE",
      "PERCENTRANK",
      "PERCENTILE",
      "MIN",
      "MEDIAN",
      "MAXA",
      "MAX",
      "LARGE",
      "AVERAGEA",
      "AVERAGE"
    ],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The first value or range to consider when calculating the minimum value."
      },
      {
        "name": "value2, ...",
        "description": "[ OPTIONAL ] - Additional values or ranges to consider when calculating the minimum value."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "MINIFS",
    "syntax": "MINIFS(range, criteria_range1, criterion1, [criteria_range2, criterion2], …)",
    "description": "Returns the minimum value in a range of cells, filtered by a set of criteria.",
    "link": "https://support.google.com/docs/answer/7014063",
    "notes": [
      "MINIFS will return 0 if none of the criterion are satisfied.",
      "range and all of the criterion ranges must be the same size. If they aren't, MINIFS will return a #VALUE error."
    ],
    "sampleUsage": [
      "MINIFS(A1:A3, B1:B3, 1, C1:C3, “A”)",
      "MINIFS(D4:E5, F4:G5, “>5”, F6:G7, “<10”)"
    ],
    "related": ["MAXIFS", "SUMIFS", "MIN"],
    "syntaxVariables": [
      {
        "name": "range",
        "description": "The range of cells from which the minimum will be determined."
      },
      {
        "name": "criteria_range1",
        "description": "The range of cells over which to evaluate criterion1."
      },
      {
        "name": "criterion1",
        "description": "The pattern or test to apply to criteria_range1."
      },
      {
        "name": "criteria_range2, criterion2, ... -",
        "description": " Optional: Additional ranges and their associated criteria. Note that filtering will result in the intersection of these."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "MODE",
    "syntax": "MODE(value1, [value2, ...])",
    "description": "Returns the most commonly occurring value in a dataset.",
    "link": "https://support.google.com/docs/answer/3094029",
    "notes": [
      "Although MODE is specified as taking a maximum of 30 arguments, Google Sheets supports an arbitrary number of arguments for this function."
    ],
    "sampleUsage": ["MODE(A2:A100,B2:B100,4,26)", "MODE(1,2,3,4,5,C6:C20)"],
    "related": [
      "DCOUNTA",
      "DCOUNT",
      "COUNTUNIQUE",
      "COUNTIF",
      "COUNTBLANK",
      "COUNTA",
      "COUNT"
    ],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The first value or range to consider when calculating mode."
      },
      {
        "name": "value2, ...",
        "description": "[ OPTIONAL ] - Additional values or ranges to consider when calculating mode."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "MODE.MULT",
    "syntax": "MODE.MULT(value1, value2)",
    "description": "Returns the most commonly occurring values in a dataset. Learn more.",
    "link": "https://support.google.com/docs/answer/9368267",
    "notes": ["MODE: Returns the most commonly occurring value in a dataset."],
    "sampleUsage": [],
    "related": [],
    "syntaxVariables": [
      {
        "name": "MODE.MULT",
        "description": " returns an error if all values occur only once."
      },
      {
        "name": "MODE.MULT",
        "description": " returns an array formula result."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "MODE.SNGL",
    "syntax": "MODE.SNGL(value1, [value2, ...])",
    "description": "See MODE",
    "link": "https://support.google.com/docs/answer/3094029",
    "notes": [
      "Although MODE is specified as taking a maximum of 30 arguments, Google Sheets supports an arbitrary number of arguments for this function."
    ],
    "sampleUsage": ["MODE(A2:A100,B2:B100,4,26)", "MODE(1,2,3,4,5,C6:C20)"],
    "related": [
      "DCOUNTA",
      "DCOUNT",
      "COUNTUNIQUE",
      "COUNTIF",
      "COUNTBLANK",
      "COUNTA",
      "COUNT"
    ],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The first value or range to consider when calculating mode."
      },
      {
        "name": "value2, ...",
        "description": "[ OPTIONAL ] - Additional values or ranges to consider when calculating mode."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "NEGBINOM.DIST",
    "syntax": "NEGBINOM.DIST(num_failures, num_successes, prob_success)",
    "description": "See NEGBINOMDIST",
    "link": "https://support.google.com/docs/answer/3094031",
    "notes": [
      "NEGBINOMDIST models the negative binomial distribution, which is related to the binomial distribution except that the number of trials is variable whereas the number of successes is fixed."
    ],
    "sampleUsage": ["NEGBINOMDIST(4,2,0.1)", "NEGBINOMDIST(A2,A3,A4)"],
    "related": [
      "WEIBULL",
      "POISSON",
      "NORMSINV",
      "NORMSDIST",
      "NORMINV",
      "NORMDIST",
      "LOGNORMDIST",
      "LOGINV",
      "HYPGEOMDIST",
      "EXPONDIST",
      "BINOMDIST"
    ],
    "syntaxVariables": [
      {
        "name": "num_failures",
        "description": "The number of failures to model."
      },
      {
        "name": "num_successes",
        "description": "The number of successes to model."
      },
      {
        "name": "prob_success",
        "description": "The probability of success in any given trial."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "NEGBINOMDIST",
    "syntax": "NEGBINOMDIST(num_failures, num_successes, prob_success)",
    "description": "Calculates the probability of drawing a certain number of failures before a certain number of successes given a probability of success in independent trials.",
    "link": "https://support.google.com/docs/answer/3094031",
    "notes": [
      "NEGBINOMDIST models the negative binomial distribution, which is related to the binomial distribution except that the number of trials is variable whereas the number of successes is fixed."
    ],
    "sampleUsage": ["NEGBINOMDIST(4,2,0.1)", "NEGBINOMDIST(A2,A3,A4)"],
    "related": [
      "WEIBULL",
      "POISSON",
      "NORMSINV",
      "NORMSDIST",
      "NORMINV",
      "NORMDIST",
      "LOGNORMDIST",
      "LOGINV",
      "HYPGEOMDIST",
      "EXPONDIST",
      "BINOMDIST"
    ],
    "syntaxVariables": [
      {
        "name": "num_failures",
        "description": "The number of failures to model."
      },
      {
        "name": "num_successes",
        "description": "The number of successes to model."
      },
      {
        "name": "prob_success",
        "description": "The probability of success in any given trial."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "NORM.DIST",
    "syntax": "NORM.DIST(x, mean, standard_deviation, cumulative)",
    "description": "See NORMDIST",
    "link": "https://support.google.com/docs/answer/3094021",
    "notes": [],
    "sampleUsage": ["NORMDIST(2.4,1,4,FALSE)", "NORMDIST(A2,A3,A4,TRUE)"],
    "related": [
      "ZTEST",
      "WEIBULL",
      "POISSON",
      "NORMSINV",
      "NORMSDIST",
      "NORMINV",
      "NEGBINOMDIST",
      "LOGNORMDIST",
      "LOGINV",
      "EXPONDIST",
      "BINOMDIST"
    ],
    "syntaxVariables": [
      {
        "name": "x",
        "description": "The input to the normal distribution function."
      },
      {
        "name": "mean",
        "description": "The mean (mu) of the normal distribution function."
      },
      {
        "name": "standard_deviation",
        "description": "The standard deviation (sigma) of the normal distribution function."
      },
      {
        "name": "cumulative",
        "description": "Whether to use the normal cumulative distribution function rather than the distribution function."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "NORM.INV",
    "syntax": "NORM.INV(x, mean, standard_deviation)",
    "description": "See NORMINV",
    "link": "https://support.google.com/docs/answer/3094022",
    "notes": [],
    "sampleUsage": ["NORMINV(.75,1,4)", "NORMINV(A2,A3,A4)"],
    "related": [
      "WEIBULL",
      "POISSON",
      "NORMSINV",
      "NORMSDIST",
      "NORMDIST",
      "NEGBINOMDIST",
      "LOGNORMDIST",
      "LOGINV",
      "EXPONDIST",
      "BINOMDIST"
    ],
    "syntaxVariables": [
      {
        "name": "x",
        "description": "The input to the normal distribution function."
      },
      {
        "name": "mean",
        "description": "The mean (mu) of the normal distribution function."
      },
      {
        "name": "standard_deviation",
        "description": "The standard deviation (sigma) of the normal distribution function."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "NORM.S.DIST",
    "syntax": "NORM.S.DIST(x)",
    "description": "See NORMSDIST",
    "link": "https://support.google.com/docs/answer/3094089",
    "notes": [
      "The \"standard\" normal distribution function is the normal distribution function with mean of 0 and variance (and therefore standard deviation) of 1."
    ],
    "sampleUsage": ["NORMSDIST(2.4)", "NORMSDIST(A2)"],
    "related": [
      "ZTEST",
      "WEIBULL",
      "POISSON",
      "NORMSINV",
      "NORMINV",
      "NORMDIST",
      "NEGBINOMDIST",
      "LOGNORMDIST",
      "LOGINV",
      "EXPONDIST",
      "BINOMDIST"
    ],
    "syntaxVariables": [
      {
        "name": "x",
        "description": "The input to the standard normal cumulative distribution function."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "NORM.S.INV",
    "syntax": "NORM.S.INV(x)",
    "description": "See NORMSINV",
    "link": "https://support.google.com/docs/answer/3094091",
    "notes": [
      "The \"standard\" normal distribution function is the normal distribution function with mean of 0 and variance (and therefore standard deviation) of 1.",
      "x must be greater than 0 and less than 1 or a #NUM! error will occur."
    ],
    "sampleUsage": ["NORMSINV(.75)", "NORMSINV(A2)"],
    "related": [
      "WEIBULL",
      "POISSON",
      "NORMSDIST",
      "NORMINV",
      "NORMDIST",
      "NEGBINOMDIST",
      "LOGNORMDIST",
      "LOGINV",
      "EXPONDIST",
      "BINOMDIST"
    ],
    "syntaxVariables": [
      {
        "name": "x",
        "description": "The input to the inverse standard normal distribution function."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "NORMDIST",
    "syntax": "NORMDIST(x, mean, standard_deviation, cumulative)",
    "description": "Returns the value of the normal distribution function (or normal cumulative distribution function) for a specified value, mean, and standard deviation.",
    "link": "https://support.google.com/docs/answer/3094021",
    "notes": [],
    "sampleUsage": ["NORMDIST(2.4,1,4,FALSE)", "NORMDIST(A2,A3,A4,TRUE)"],
    "related": [
      "ZTEST",
      "WEIBULL",
      "POISSON",
      "NORMSINV",
      "NORMSDIST",
      "NORMINV",
      "NEGBINOMDIST",
      "LOGNORMDIST",
      "LOGINV",
      "EXPONDIST",
      "BINOMDIST"
    ],
    "syntaxVariables": [
      {
        "name": "x",
        "description": "The input to the normal distribution function."
      },
      {
        "name": "mean",
        "description": "The mean (mu) of the normal distribution function."
      },
      {
        "name": "standard_deviation",
        "description": "The standard deviation (sigma) of the normal distribution function."
      },
      {
        "name": "cumulative",
        "description": "Whether to use the normal cumulative distribution function rather than the distribution function."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "NORMINV",
    "syntax": "NORMINV(x, mean, standard_deviation)",
    "description": "Returns the value of the inverse normal distribution function for a specified value, mean, and standard deviation.",
    "link": "https://support.google.com/docs/answer/3094022",
    "notes": [],
    "sampleUsage": ["NORMINV(.75,1,4)", "NORMINV(A2,A3,A4)"],
    "related": [
      "WEIBULL",
      "POISSON",
      "NORMSINV",
      "NORMSDIST",
      "NORMDIST",
      "NEGBINOMDIST",
      "LOGNORMDIST",
      "LOGINV",
      "EXPONDIST",
      "BINOMDIST"
    ],
    "syntaxVariables": [
      {
        "name": "x",
        "description": "The input to the normal distribution function."
      },
      {
        "name": "mean",
        "description": "The mean (mu) of the normal distribution function."
      },
      {
        "name": "standard_deviation",
        "description": "The standard deviation (sigma) of the normal distribution function."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "NORMSDIST",
    "syntax": "NORMSDIST(x)",
    "description": "Returns the value of the standard normal cumulative distribution function for a specified value.",
    "link": "https://support.google.com/docs/answer/3094089",
    "notes": [
      "The \"standard\" normal distribution function is the normal distribution function with mean of 0 and variance (and therefore standard deviation) of 1."
    ],
    "sampleUsage": ["NORMSDIST(2.4)", "NORMSDIST(A2)"],
    "related": [
      "ZTEST",
      "WEIBULL",
      "POISSON",
      "NORMSINV",
      "NORMINV",
      "NORMDIST",
      "NEGBINOMDIST",
      "LOGNORMDIST",
      "LOGINV",
      "EXPONDIST",
      "BINOMDIST"
    ],
    "syntaxVariables": [
      {
        "name": "x",
        "description": "The input to the standard normal cumulative distribution function."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "NORMSINV",
    "syntax": "NORMSINV(x)",
    "description": "Returns the value of the inverse standard normal distribution function for a specified value.",
    "link": "https://support.google.com/docs/answer/3094091",
    "notes": [
      "The \"standard\" normal distribution function is the normal distribution function with mean of 0 and variance (and therefore standard deviation) of 1.",
      "x must be greater than 0 and less than 1 or a #NUM! error will occur."
    ],
    "sampleUsage": ["NORMSINV(.75)", "NORMSINV(A2)"],
    "related": [
      "WEIBULL",
      "POISSON",
      "NORMSDIST",
      "NORMINV",
      "NORMDIST",
      "NEGBINOMDIST",
      "LOGNORMDIST",
      "LOGINV",
      "EXPONDIST",
      "BINOMDIST"
    ],
    "syntaxVariables": [
      {
        "name": "x",
        "description": "The input to the inverse standard normal distribution function."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "PEARSON",
    "syntax": "PEARSON(data_y, data_x)",
    "description": "Calculates r, the Pearson product-moment correlation coefficient of a dataset.",
    "link": "https://support.google.com/docs/answer/3094092",
    "notes": [
      "Any text encountered in the value arguments will be ignored.",
      "PEARSON is synonymous with CORREL."
    ],
    "sampleUsage": ["PEARSON(A2:A100,B2:B100)"],
    "related": [
      "STEYX",
      "SLOPE",
      "RSQ",
      "INTERCEPT",
      "FORECAST",
      "FISHERINV",
      "FISHER",
      "COVAR",
      "CORREL"
    ],
    "syntaxVariables": [
      {
        "name": "data_y",
        "description": "The range representing the array or matrix of dependent data."
      },
      {
        "name": "data_x",
        "description": "The range representing the array or matrix of independent data."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "PERCENTILE",
    "syntax": "PERCENTILE(data, percentile)",
    "description": "Returns the value at a given percentile of a dataset.",
    "link": "https://support.google.com/docs/answer/3094093",
    "notes": [
      "The value returned by PERCENTILE is not necessarily a member of data as this function interpolates between values to calculate the alpha percentile.",
      "The 50th percentile, that is setting percentile to 0.5 is equivalent to using MEDIAN with the same dataset."
    ],
    "sampleUsage": ["PERCENTILE(A2:A100,A2)", "PERCENTILE(A2:A100,0.67)"],
    "related": [
      "SMALL",
      "RANK",
      "QUARTILE",
      "PERCENTRANK",
      "MINA",
      "MIN",
      "MEDIAN",
      "MAXA",
      "MAX",
      "LARGE",
      "AVERAGEA",
      "AVERAGE"
    ],
    "syntaxVariables": [
      {
        "name": "data",
        "description": "The array or range containing the dataset to consider."
      },
      {
        "name": "percentile",
        "description": "The percentile whose value within data will be calculated and returned."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "PERCENTILE.EXC",
    "syntax": "PERCENTILE.EXC(data, percentile)",
    "description": "Returns the value at a given percentile of a dataset, exclusive of 0 and 1. Learn more.",
    "link": "https://support.google.com/docs/answer/9368167",
    "notes": [
      "PERCENTILE: Returns the value at a given percentile of a dataset.",
      "QUARTILE: Returns a value nearest to a specified quartile of a dataset.",
      "MEDIAN: Returns the median value in a numeric dataset.",
      "QUARTILE.EXC: The QUARTILE.EXC function returns value nearest to a given quartile of a dataset, exclusive of 0 and 4."
    ],
    "sampleUsage": [
      "PERCENTILE.EXC(data, percentile)",
      "PERCENTILE.EXC(A2:A100,0.33)"
    ],
    "related": [],
    "syntaxVariables": [
      {
        "name": "PERCENTILE.EXC",
        "description": "The value returned by  is not necessarily a member of data as this function interpolates between values to calculate the alpha percentile."
      },
      {
        "name": "",
        "description": "The percentile must be between 0 and 1, exclusive."
      },
      {
        "name": "PERCENTILE.INC",
        "description": "Different from , PERCENTILE.EXC calculates percentile based on a percentile range exclusive of 0 and 1."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "PERCENTILE.INC",
    "syntax": "PERCENTILE.INC(data, percentile)",
    "description": "See PERCENTILE",
    "link": "https://support.google.com/docs/answer/3094093",
    "notes": [
      "The value returned by PERCENTILE is not necessarily a member of data as this function interpolates between values to calculate the alpha percentile.",
      "The 50th percentile, that is setting percentile to 0.5 is equivalent to using MEDIAN with the same dataset."
    ],
    "sampleUsage": ["PERCENTILE(A2:A100,A2)", "PERCENTILE(A2:A100,0.67)"],
    "related": [
      "SMALL",
      "RANK",
      "QUARTILE",
      "PERCENTRANK",
      "MINA",
      "MIN",
      "MEDIAN",
      "MAXA",
      "MAX",
      "LARGE",
      "AVERAGEA",
      "AVERAGE"
    ],
    "syntaxVariables": [
      {
        "name": "data",
        "description": "The array or range containing the dataset to consider."
      },
      {
        "name": "percentile",
        "description": "The percentile whose value within data will be calculated and returned."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "PERCENTRANK",
    "syntax": "PERCENTRANK(data, value, [significant_digits])",
    "description": "Returns the percentage rank (percentile) of a specified value in a dataset.",
    "link": "https://support.google.com/docs/answer/3094095",
    "notes": [
      "If data does not contain value in any cell or element, PERCENTRANK will return the #N/A error.",
      "If a number less than or equal to 0 is used for significant_digits then this value will be ignored and the default number of significant digits will be used instead."
    ],
    "sampleUsage": ["PERCENTRANK(A2:A100,A2)", "PERCENTRANK(A2:A100,1,7)"],
    "related": [
      "PERCENTRANK.INC",
      "PERCENTRANK.EXC",
      "SMALL",
      "RANK",
      "QUARTILE",
      "PERCENTILE",
      "MINA",
      "MIN",
      "MEDIAN",
      "MAXA",
      "MAX",
      "LARGE",
      "AVERAGEA",
      "AVERAGE"
    ],
    "syntaxVariables": [
      {
        "name": "data",
        "description": "The array or range containing the dataset to consider."
      },
      {
        "name": "value",
        "description": "The value whose percentage rank will be determined."
      },
      {
        "name": "significant_digits",
        "description": "[ OPTIONAL - 3 by default ] - The number of significant figures to use in the calculation."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "PERCENTRANK.EXC",
    "syntax": "PERCENTRANK.EXC(data, value, [significant_digits])",
    "description": "Returns the percentage rank (percentile) from 0 to 1 exclusive of a specified value in a dataset. Learn more",
    "link": "https://support.google.com/docs/answer/3267357",
    "notes": [
      "If the value does not fall within the data given for the function, an estimation will be made to bring up a percentage rank for that value."
    ],
    "sampleUsage": [
      "PERCENTRANK.EXC(A1:A100, A2, 4)",
      "PERCENTRANK.EXC(A1:A100, 10)"
    ],
    "related": [
      "PERCENTRANK",
      "PERCENTRANK.INC",
      "PERCENTILE",
      "LARGE",
      "MIN",
      "MAX",
      "MEDIAN"
    ],
    "syntaxVariables": [
      {
        "name": "data",
        "description": "The array or range containing the dataset to consider."
      },
      {
        "name": "value",
        "description": "The value whose percentage rank will be determined."
      },
      {
        "name": "significant_digits",
        "description": "[ OPTIONAL - 3 by default ] - The number of significant figures to use in the calculation."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "PERCENTRANK.INC",
    "syntax": "PERCENTRANK.INC(data, value, [significant_digits])",
    "description": "Returns the percentage rank (percentile) from 0 to 1 inclusive of a specified value in a dataset.",
    "link": "https://support.google.com/docs/answer/3267360",
    "notes": [
      "If the value does not fall within the data given for the function, an estimation will be made to bring up a percentage rank for that value."
    ],
    "sampleUsage": [
      "PERCENTRANK.INC(A1:A100, A2, 4)",
      "PERCENTRANK.INC(A1:A100, 10)"
    ],
    "related": [
      "PERCENTRANK",
      "PERCENTRANK.EXC",
      "PERCENTILE",
      "MIN",
      "MAX",
      "MEDIAN",
      "PERCENTILE"
    ],
    "syntaxVariables": [
      {
        "name": "data",
        "description": "The array or range containing the dataset to consider."
      },
      {
        "name": "value",
        "description": "The value whose percentage rank will be determined."
      },
      {
        "name": "significant_digits",
        "description": "[ OPTIONAL - 3 by default ] - The number of significant figures to use in the calculation."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "PERMUTATIONA",
    "syntax": "PERMUTATIONA(number, number_chosen)",
    "description": "Returns the number of permutations for selecting a group of objects (with replacement) from a total number of objects. Learn more.",
    "link": "https://support.google.com/docs/answer/9368324",
    "notes": [
      "PERMUT: Returns the number of ways to choose some number of objects from a pool of a given size of objects, considering order.",
      "COMBIN: The COMBIN function returns the number of ways to choose some number of objects from a pool of a given size of objects.",
      "COMBINA: The COMBINA function returns the number of ways to choose some number of objects from a pool of a given size of objects, including ways to choose the same object multiple times (also known as choosing with replacement)."
    ],
    "sampleUsage": [
      "PERMUTATIONA(number, number_chosen)",
      "PERMUTATIONA(3, 2)",
      "PERMUTATIONA(3.2, 2)"
    ],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "Both arguments are truncated to integers."
      },
      {
        "name": "PERMUTATIONA",
        "description": "If the number is zero,  returns a #NUM."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "PERMUT",
    "syntax": "PERMUT(n, k)",
    "description": "Returns the number of ways to choose some number of objects from a pool of a given size of objects, considering order.",
    "link": "https://support.google.com/docs/answer/3094036",
    "notes": [
      "PERMUT is the standard combinatorics function typically notated nPk. This is similar to COMBIN except in permutations, the order of selection is considered rather than simply the resultant selected subset."
    ],
    "sampleUsage": ["PERMUT(4,2)", "PERMUT(A2,B2)"],
    "related": ["MULTINOMIAL", "FACTDOUBLE", "FACT", "COMBIN"],
    "syntaxVariables": [
      {
        "name": "n",
        "description": "The size of the pool of objects to choose from."
      },
      { "name": "k", "description": "The number of objects to choose." }
    ]
  },
  {
    "type": "Statistical",
    "name": "PHI",
    "syntax": "PHI(x)",
    "description": "The PHI function returns the value of the normal distribution with mean 0 and standard deviation 1.",
    "link": "https://support.google.com/docs/answer/9116365",
    "notes": [],
    "sampleUsage": ["PHI(x)"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "STDEV: The STDEV function calculates the standard deviation based on a sample."
      },
      {
        "name": "",
        "description": "NORMDIST: The NORMDIST function returns the value of the normal distribution function (or normal cumulative distribution function) for a specified value, mean, and standard deviation."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "POISSON",
    "syntax": "POISSON(x, mean, cumulative)",
    "description": "See POISSON.DIST",
    "link": "https://support.google.com/docs/answer/3094097",
    "notes": [
      "The Poisson distribution function is typically used to calculate the number of 'arrivals' or 'events' over a period of time, such as the number of network packets or login attempts given some mean.",
      "If cumulative is TRUE then POISSON.DIST returns the probability of x or fewer events, otherwise the probability of exactly x events.",
      "You can use POISSON or POISSON.DIST to perform this function."
    ],
    "sampleUsage": ["POISSON.DIST(2.4,1,FALSE)", "POISSON.DIST(A2,A3,TRUE)"],
    "related": [
      "WEIBULL",
      "NORMSINV",
      "NORMSDIST",
      "NORMINV",
      "NORMDIST",
      "NEGBINOMDIST",
      "LOGNORMDIST",
      "LOGINV",
      "EXPONDIST",
      "BINOMDIST"
    ],
    "syntaxVariables": [
      {
        "name": "x",
        "description": "The input to the Poisson distribution function."
      },
      {
        "name": "mean",
        "description": "The mean (mu) of the Poisson distribution function."
      },
      {
        "name": "cumulative",
        "description": "Whether to use the Poisson cumulative distribution function rather than the distribution function.."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "POISSON.DIST",
    "syntax": "POISSON.DIST(x, mean, [cumulative])",
    "description": "Returns the value of the Poisson distribution function (or Poisson cumulative distribution function) for a specified value and mean.",
    "link": "https://support.google.com/docs/answer/3094097",
    "notes": [
      "The Poisson distribution function is typically used to calculate the number of 'arrivals' or 'events' over a period of time, such as the number of network packets or login attempts given some mean.",
      "If cumulative is TRUE then POISSON.DIST returns the probability of x or fewer events, otherwise the probability of exactly x events.",
      "You can use POISSON or POISSON.DIST to perform this function."
    ],
    "sampleUsage": ["POISSON.DIST(2.4,1,FALSE)", "POISSON.DIST(A2,A3,TRUE)"],
    "related": [
      "WEIBULL",
      "NORMSINV",
      "NORMSDIST",
      "NORMINV",
      "NORMDIST",
      "NEGBINOMDIST",
      "LOGNORMDIST",
      "LOGINV",
      "EXPONDIST",
      "BINOMDIST"
    ],
    "syntaxVariables": [
      {
        "name": "x",
        "description": "The input to the Poisson distribution function."
      },
      {
        "name": "mean",
        "description": "The mean (mu) of the Poisson distribution function."
      },
      {
        "name": "cumulative",
        "description": "Whether to use the Poisson cumulative distribution function rather than the distribution function.."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "PROB",
    "syntax": "PROB(data, probabilities, low_limit, [high_limit])",
    "description": "Given a set of values and corresponding probabilities, calculates the probability that a value chosen at random falls between two limits.",
    "link": "https://support.google.com/docs/answer/3094039",
    "notes": [
      "The number of values in data and probabilities must be the same."
    ],
    "sampleUsage": [
      "PROB({1,2,3,4},{0.25,0.25,0.25,0.25},3)",
      "PROB(A2:A100,B2:B100,C2,C3)"
    ],
    "related": ["CRITBINOM", "BINOMDIST"],
    "syntaxVariables": [
      {
        "name": "data",
        "description": "Array or range containing the dataset to consider."
      },
      {
        "name": "probabilities",
        "description": "Array or range containing probabilities corresponding to data.\n\n    \n      Each value in probabilities must be greater than 0 and less than or equal to 1."
      },
      {
        "name": "low_limit",
        "description": "The lower bound on the value range for which to calculate the probability."
      },
      {
        "name": "high_limit",
        "description": "[ OPTIONAL - low_limit by default ] - The upper bound on the value range for which to calculate the probability.\n\n    \n      If high_limit is omitted, PROB calculates the probability that a value chosen at random is exactly equal to low_limit."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "QUARTILE",
    "syntax": "QUARTILE(data, quartile_number)",
    "description": "Returns a value nearest to a specified quartile of a dataset.",
    "link": "https://support.google.com/docs/answer/3094041",
    "notes": [],
    "sampleUsage": ["QUARTILE(A2:A100,3)", "QUARTILE(A2:A100,B2)"],
    "related": [
      "SMALL",
      "RANK",
      "PERCENTRANK",
      "PERCENTILE",
      "MINA",
      "MIN",
      "MEDIAN",
      "MAXA",
      "MAX",
      "LARGE",
      "AVERAGEA",
      "AVERAGE"
    ],
    "syntaxVariables": [
      {
        "name": "data",
        "description": "The array or range containing the dataset to consider."
      },
      {
        "name": "quartile_number",
        "description": "Which quartile value to return.\n\n    \n      \n        0 returns the minimum value in data (0% mark).\n      \n      \n        1 returns the value in data closest to the first quartile (25% mark).\n      \n      \n        2 returns the value in data closest to the median (50% mark).\n      \n      \n        3 returns the value in data closest to the third quartile (75% mark).\n      \n      \n        4 returns the maximum value in data (100% mark)."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "QUARTILE.EXC",
    "syntax": "QUARTILE.EXC(data, quartile_number)",
    "description": "Returns value nearest to a given quartile of a dataset, exclusive of 0 and 4. Learn more.",
    "link": "https://support.google.com/docs/answer/9368240",
    "notes": [
      "PERCENTILE: Returns the value at a given percentile of a dataset.",
      "PERCENTILE.EXC: The PERCENTILE.EXC function returns the value at a given percentile of a dataset, exclusive of 0 and 1.",
      "MEDIAN: Returns the median value in a numeric dataset.",
      "QUARTILE: Returns a value nearest to a specified quartile of a dataset."
    ],
    "sampleUsage": [
      "QUARTILE.EXC(data, quartile_number)",
      "QUARTILE.EXC(A2:A100, 3)"
    ],
    "related": [],
    "syntaxVariables": [
      {
        "name": "quartile_number",
        "description": "If the  is not an integer, the number is truncated."
      },
      {
        "name": "quartile_number",
        "description": "The  must be between 0 and 4, exclusive."
      },
      {
        "name": "QUARTILE.INC",
        "description": "Different from , QUARTILE.EXC calculates quartile based on a quartile range exclusive of 0th and 4th quartile."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "QUARTILE.INC",
    "syntax": "QUARTILE.INC(data, quartile_number)",
    "description": "See QUARTILE",
    "link": "https://support.google.com/docs/answer/3094041",
    "notes": [],
    "sampleUsage": ["QUARTILE(A2:A100,3)", "QUARTILE(A2:A100,B2)"],
    "related": [
      "SMALL",
      "RANK",
      "PERCENTRANK",
      "PERCENTILE",
      "MINA",
      "MIN",
      "MEDIAN",
      "MAXA",
      "MAX",
      "LARGE",
      "AVERAGEA",
      "AVERAGE"
    ],
    "syntaxVariables": [
      {
        "name": "data",
        "description": "The array or range containing the dataset to consider."
      },
      {
        "name": "quartile_number",
        "description": "Which quartile value to return.\n\n    \n      \n        0 returns the minimum value in data (0% mark).\n      \n      \n        1 returns the value in data closest to the first quartile (25% mark).\n      \n      \n        2 returns the value in data closest to the median (50% mark).\n      \n      \n        3 returns the value in data closest to the third quartile (75% mark).\n      \n      \n        4 returns the maximum value in data (100% mark)."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "RANK",
    "syntax": "RANK(value, data, [is_ascending])",
    "description": "Returns the rank of a specified value in a dataset.",
    "link": "https://support.google.com/docs/answer/3094098",
    "notes": [],
    "sampleUsage": ["RANK(A2,A2:A100)", "RANK(4,A2:A100,1)"],
    "related": [
      "SMALL",
      "QUARTILE",
      "PERCENTRANK",
      "PERCENTILE",
      "MINA",
      "MIN",
      "MEDIAN",
      "MAXA",
      "MAX",
      "LARGE",
      "AVERAGEA",
      "AVERAGE"
    ],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The value whose rank will be determined.\n\n    \n      If data does not contain value in any cell or element, RANK will return the #N/A error."
      },
      {
        "name": "data",
        "description": "The array or range containing the dataset to consider."
      },
      {
        "name": "is_ascending",
        "description": "[ OPTIONAL - 0 by default ] Whether to consider the values in data in descending or ascending order.\n\n    \n      If this is 0, the greatest value in data will have rank 1; if this is 1, the least value in data will have rank 1."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "RANK.AVG",
    "syntax": "RANK.AVG(value, data, [is_ascending])",
    "description": "Returns the rank of a specified value in a dataset. If there is more than one entry of the same value in the dataset, the average rank of the entries will be returned.",
    "link": "https://support.google.com/docs/answer/3267309",
    "notes": [],
    "sampleUsage": [
      "RANK.AVG(A10, A1:A100, TRUE)",
      "RANK.AVG(B32, B8:B47, FALSE)",
      "RANK.AVG(A10, A1:A100)"
    ],
    "related": ["RANK", "RANK.EQ"],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The value whose rank will be determined."
      },
      {
        "name": "data",
        "description": "The array or range containing the dataset to consider."
      },
      {
        "name": "is_ascending",
        "description": "[ OPTIONAL - default is descending (FALSE) ] - Whether to consider the values in data in descending or ascending order."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "RANK.EQ",
    "syntax": "RANK.EQ(value, data, [is_ascending])",
    "description": "Returns the rank of a specified value in a dataset. If there is more than one entry of the same value in the dataset, the top rank of the entries will be returned.",
    "link": "https://support.google.com/docs/answer/3267310",
    "notes": [],
    "sampleUsage": [
      "RANK.EQ(A10, A1:A100, TRUE)",
      "RANK.EQ(B32, B8:B47, FALSE)",
      "RANK.EQ(A10, A1:A100)"
    ],
    "related": ["RANK", "RANK.AVG"],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The value whose rank will be determined."
      },
      {
        "name": "data",
        "description": "The array or range containing the dataset to consider."
      },
      {
        "name": "is_ascending",
        "description": "[ OPTIONAL - default is descending (FALSE) ] - Whether to consider the values in data in descending or ascending order."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "RSQ",
    "syntax": "RSQ(data_y, data_x)",
    "description": "Calculates the square of r, the Pearson product-moment correlation coefficient of a dataset.",
    "link": "https://support.google.com/docs/answer/3094099",
    "notes": ["Any text encountered in the value arguments will be ignored."],
    "sampleUsage": ["RSQ(A2:A100,B2:B100)"],
    "related": [
      "STEYX",
      "SLOPE",
      "PEARSON",
      "INTERCEPT",
      "FORECAST",
      "COVAR",
      "CORREL"
    ],
    "syntaxVariables": [
      {
        "name": "data_y",
        "description": "The range representing the array or matrix of dependent data."
      },
      {
        "name": "data_x",
        "description": "The range representing the array or matrix of independent data."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "SKEW",
    "syntax": "SKEW(value1, value2)",
    "description": "Calculates the skewness of a dataset, which describes the symmetry of that dataset about the mean.",
    "link": "https://support.google.com/docs/answer/3094101",
    "notes": [
      "Although SKEW is specified as taking a maximum of 30 arguments, Google Sheets supports an arbitrary number of arguments for this function.",
      "If the total number of values supplied as value arguments is not at least two, SKEW will return the #DIV/0! error.",
      "Any text encountered in the value arguments will be ignored.",
      "Positive skewness indicates a longer tail extending in the positive direction, to the right of the mean, while negative skewness indicates a longer tail in the negative direction, to the left. Skewness nearer to zero indicates more symmetrical distributions."
    ],
    "sampleUsage": ["SKEW(1,2,3,4,5,6,7,8,9,10)", "SKEW(A2:A100)"],
    "related": [
      "VARPA",
      "VARP",
      "VARA",
      "VAR",
      "STDEVPA",
      "STDEVP",
      "STDEVA",
      "KURT",
      "DVARP",
      "DVAR",
      "DSTDEVP",
      "DSTDEV",
      "DEVSQ",
      "AVEDEV"
    ],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The first value or range of the dataset."
      },
      {
        "name": "value2, ...",
        "description": "Additional values or ranges to include in the dataset."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "SKEW.P",
    "syntax": "SKEW.P(value1, value2)",
    "description": "Calculates the skewness of a dataset that represents the entire population. Learn more.",
    "link": "https://support.google.com/docs/answer/9368569",
    "notes": [
      "SKEW: Calculates the skewness of a dataset, which describes the symmetry of that dataset about the mean.",
      "VARPA: Calculates the variance based on an entire population, setting text to the value `0`.",
      "VARP: Calculates the variance based on an entire population.",
      "VARA: Calculates the variance based on a sample, setting text to the value `0`.",
      "VAR: Calculates the variance based on a sample.",
      "STDEVPA: Calculates the standard deviation based on an entire population, setting text to the value `0`.",
      "STDEVP: Calculates the standard deviation based on an entire population.",
      "KURT: Calculates the kurtosis of a dataset, which describes the shape, and in particular the \"peakedness\" of that dataset.",
      "DVARP: Returns the variance of an entire population selected from a database table-like array or range using a SQL-like query.",
      "DVAR: Returns the variance of a population sample selected from a database table-like array or range using a SQL-like query.",
      "DSTDEVP: Returns the standard deviation of an entire population selected from a database table-like array or range using a SQL-like query.",
      "DSTDEV: Returns the standard deviation of a population sample selected from a database table-like array or range using a SQL-like query.",
      "DEVSQ: Calculates the sum of squares of deviations based on a sample.",
      "AVEDEV: Calculates the average of the magnitudes of deviations of data from a dataset's mean."
    ],
    "sampleUsage": [],
    "related": [],
    "syntaxVariables": [
      {
        "name": "SKEW.P",
        "description": "Although  is specified as taking a maximum of 30 arguments, Google Sheets supports an arbitrary number of arguments for this function."
      },
      {
        "name": "value",
        "description": "If the total number of s supplied as value arguments is not at least two, SKEW.P will return the #DIV/0! error."
      },
      {
        "name": "value",
        "description": "Any text encountered in the  arguments will be ignored."
      },
      {
        "name": "",
        "description": "Positive skewness indicates a longer tail extending in the positive direction, to the right of the mean, while negative skewness indicates a longer tail in the negative direction, to the left. Skewness nearer to zero indicates more symmetrical distributions."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "SLOPE",
    "syntax": "SLOPE(data_y, data_x)",
    "description": "Calculates the slope of the line resulting from linear regression of a dataset.",
    "link": "https://support.google.com/docs/answer/3094048",
    "notes": ["Any text encountered in the value arguments will be ignored."],
    "sampleUsage": ["SLOPE(A2:A100,B2:B100)"],
    "related": [
      "STEYX",
      "RSQ",
      "PEARSON",
      "INTERCEPT",
      "FORECAST",
      "COVAR",
      "CORREL"
    ],
    "syntaxVariables": [
      {
        "name": "data_y",
        "description": "The range representing the array or matrix of dependent data."
      },
      {
        "name": "data_x",
        "description": "The range representing the array or matrix of independent data."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "SMALL",
    "syntax": "SMALL(data, n)",
    "description": "Returns the nth smallest element from a data set, where n is user-defined.",
    "link": "https://support.google.com/docs/answer/3094050",
    "notes": [],
    "sampleUsage": ["SMALL(A2:B100,4)", "SMALL(A2:B100,C2)"],
    "related": [
      "RANK",
      "QUARTILE",
      "PERCENTRANK",
      "PERCENTILE",
      "MINA",
      "MIN",
      "MEDIAN",
      "MAXA",
      "MAX",
      "LARGE",
      "AVERAGEA",
      "AVERAGE"
    ],
    "syntaxVariables": [
      {
        "name": "data",
        "description": "The array or range containing the dataset to consider."
      },
      {
        "name": "n",
        "description": "The rank from smallest to largest of the element to return.\n\n    \n      E.g. setting n to 4 will cause SMALL to return the 4th smallest element from data."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "STANDARDIZE",
    "syntax": "STANDARDIZE(value, mean, standard_deviation)",
    "description": "Calculates the normalized equivalent of a random variable given mean and standard deviation of the distribution.",
    "link": "https://support.google.com/docs/answer/3094102",
    "notes": [
      "For a given dataset, mean can be calculated using AVERAGE or its related functions and standard_deviation can be calculated using STDEV or its related functions."
    ],
    "sampleUsage": ["STANDARDIZE(96,80,6.7)", "STANDARDIZE(A2,A3,A4)"],
    "related": ["STDEV", "AVERAGE"],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The value of the random variable to normalize."
      },
      { "name": "mean", "description": "The mean of the distribution." },
      {
        "name": "standard_deviation",
        "description": "The standard deviation of the distribution."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "STDEV",
    "syntax": "STDEV(value1, [value2, ...])",
    "description": "Calculates the standard deviation based on a sample.",
    "link": "https://support.google.com/docs/answer/3094054",
    "notes": [
      "Although STDEV is specified as taking a maximum of 30 arguments, Google Sheets supports an arbitrary number of arguments for this function.",
      "If the total number of values supplied as value arguments is not at least two, STDEV will return the #DIV/0! error.",
      "STDEV will return an error if any of the value arguments include text. If any of the value arguments reference a cell that contains text, those cells are ignored. To calculate standard deviation while interpreting text values as 0, use STDEVA.",
      "STDEV calculates standard deviation for a sample. To calculate standard deviation across an entire population, use STDEVP.",
      "STDEV is equivalent to the square root of the variance, or SQRT(VAR(...)) using the same dataset."
    ],
    "sampleUsage": ["STDEV(1,2,3,4,5,6,7,8,9,10)", "STDEV(A2:A100)"],
    "related": [
      "VARPA",
      "VARP",
      "VARA",
      "VAR",
      "STDEVPA",
      "STDEVP",
      "STDEVA",
      "SKEW",
      "KURT",
      "DVARP",
      "DVAR",
      "DSTDEVP",
      "DSTDEV",
      "DEVSQ",
      "AVEDEV"
    ],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The first value or range of the sample."
      },
      {
        "name": "value2, ...",
        "description": "[ OPTIONAL ] - Additional values or ranges to include in the sample."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "STDEV.P",
    "syntax": "STDEV.P(value1, [value2, ...])",
    "description": "See STDEVP",
    "link": "https://support.google.com/docs/answer/3094105",
    "notes": [
      "Although STDEVP is specified as taking a maximum of 30 arguments, Google Sheets supports an arbitrary number of arguments for this function.",
      "If the total number of values supplied as value arguments is not at least two, STDEVP will return the #DIV/0! error.",
      "STDEVP will return an error if any of the value arguments include text. To calculate standard deviation while interpreting text values as 0, use STDEVPA.",
      "STDEVP calculates standard deviation for an entire population. To calculate standard deviation across a sample, use STDEV.",
      "STDEVP is equivalent to the square root of the variance, or SQRT(VARP(...)) using the same dataset."
    ],
    "sampleUsage": ["STDEVP(1,2,3,4,5,6,7,8,9,10)", "STDEVP(A2:A100)"],
    "related": [
      "VARPA",
      "VARP",
      "VARA",
      "VAR",
      "STDEVPA",
      "STDEVA",
      "STDEV",
      "SKEW",
      "KURT",
      "DVARP",
      "DVAR",
      "DSTDEVP",
      "DSTDEV",
      "DEVSQ",
      "AVEDEV"
    ],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The first value or range of the population."
      },
      {
        "name": "value2, ...",
        "description": "Additional values or ranges to include in the population."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "STDEV.S",
    "syntax": "STDEV.S(value1, [value2, ...])",
    "description": "See STDEV",
    "link": "https://support.google.com/docs/answer/3094054",
    "notes": [
      "Although STDEV is specified as taking a maximum of 30 arguments, Google Sheets supports an arbitrary number of arguments for this function.",
      "If the total number of values supplied as value arguments is not at least two, STDEV will return the #DIV/0! error.",
      "STDEV will return an error if any of the value arguments include text. If any of the value arguments reference a cell that contains text, those cells are ignored. To calculate standard deviation while interpreting text values as 0, use STDEVA.",
      "STDEV calculates standard deviation for a sample. To calculate standard deviation across an entire population, use STDEVP.",
      "STDEV is equivalent to the square root of the variance, or SQRT(VAR(...)) using the same dataset."
    ],
    "sampleUsage": ["STDEV(1,2,3,4,5,6,7,8,9,10)", "STDEV(A2:A100)"],
    "related": [
      "VARPA",
      "VARP",
      "VARA",
      "VAR",
      "STDEVPA",
      "STDEVP",
      "STDEVA",
      "SKEW",
      "KURT",
      "DVARP",
      "DVAR",
      "DSTDEVP",
      "DSTDEV",
      "DEVSQ",
      "AVEDEV"
    ],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The first value or range of the sample."
      },
      {
        "name": "value2, ...",
        "description": "[ OPTIONAL ] - Additional values or ranges to include in the sample."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "STDEVA",
    "syntax": "STDEVA(value1, value2)",
    "description": "Calculates the standard deviation based on a sample, setting text to the value `0`.",
    "link": "https://support.google.com/docs/answer/3094055",
    "notes": [
      "Although STDEVA is specified as taking a maximum of 30 arguments, Google Sheets supports an arbitrary number of arguments for this function.",
      "If the total number of values supplied as value arguments is not at least two, STDEVA will return the #DIV/0! error.",
      "STDEVA sets each text value encountered to 0 for the purpose of calculation.",
      "STDEVA calculates standard deviation for a sample. To calculate standard deviation across an entire population, use STDEVPA.",
      "STDEVA is equivalent to the square root of the variance, or SQRT(VARA(...)) using the same dataset."
    ],
    "sampleUsage": ["STDEVA(1,2,3,4,5,6,7,8,9,10)", "STDEVA(A2:A100)"],
    "related": [
      "VARPA",
      "VARP",
      "VARA",
      "VAR",
      "STDEVPA",
      "STDEVP",
      "STDEV",
      "SKEW",
      "KURT",
      "DVARP",
      "DVAR",
      "DSTDEVP",
      "DSTDEV",
      "DEVSQ",
      "AVEDEV"
    ],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The first value or range of the sample."
      },
      {
        "name": "value2, ...",
        "description": "Additional values or ranges to include in the sample."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "STDEVP",
    "syntax": "STDEVP(value1, value2)",
    "description": "Calculates the standard deviation based on an entire population.",
    "link": "https://support.google.com/docs/answer/3094105",
    "notes": [
      "Although STDEVP is specified as taking a maximum of 30 arguments, Google Sheets supports an arbitrary number of arguments for this function.",
      "If the total number of values supplied as value arguments is not at least two, STDEVP will return the #DIV/0! error.",
      "STDEVP will return an error if any of the value arguments include text. To calculate standard deviation while interpreting text values as 0, use STDEVPA.",
      "STDEVP calculates standard deviation for an entire population. To calculate standard deviation across a sample, use STDEV.",
      "STDEVP is equivalent to the square root of the variance, or SQRT(VARP(...)) using the same dataset."
    ],
    "sampleUsage": ["STDEVP(1,2,3,4,5,6,7,8,9,10)", "STDEVP(A2:A100)"],
    "related": [
      "VARPA",
      "VARP",
      "VARA",
      "VAR",
      "STDEVPA",
      "STDEVA",
      "STDEV",
      "SKEW",
      "KURT",
      "DVARP",
      "DVAR",
      "DSTDEVP",
      "DSTDEV",
      "DEVSQ",
      "AVEDEV"
    ],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The first value or range of the population."
      },
      {
        "name": "value2, ...",
        "description": "Additional values or ranges to include in the population."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "STDEVPA",
    "syntax": "STDEVPA(value1, value2)",
    "description": "Calculates the standard deviation based on an entire population, setting text to the value `0`.",
    "link": "https://support.google.com/docs/answer/3094058",
    "notes": [
      "Although STDEVPA is specified as taking a maximum of 30 arguments, Google Sheets supports an arbitrary number of arguments for this function.",
      "If the total number of values supplied as value arguments is not at least two, STDEVPA will return the #DIV/0! error.",
      "STDEVPA sets each text value encountered to 0 for the purpose of calculation. To return an error upon encountering text, use STDEVP.",
      "STDEVPA calculates standard deviation for an entire population. To calculate standard deviation across a sample, use STDEV.",
      "STDEVPA is equivalent to the square root of the variance, or SQRT(VARPA(...)) using the same dataset."
    ],
    "sampleUsage": ["STDEVPA(1,2,3,4,5,6,7,8,9,10)", "STDEVPA(A2:A100)"],
    "related": [
      "VARPA",
      "VARP",
      "VARA",
      "VAR",
      "STDEVP",
      "STDEVA",
      "STDEV",
      "DVARP",
      "DVAR",
      "DSTDEVP",
      "DSTDEV",
      "DEVSQ",
      "AVEDEV"
    ],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The first value or range of the population."
      },
      {
        "name": "value2, ...",
        "description": "Additional values or ranges to include in the population."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "STEYX",
    "syntax": "STEYX(data_y, data_x)",
    "description": "Calculates the standard error of the predicted y-value for each x in the regression of a dataset.",
    "link": "https://support.google.com/docs/answer/3094108",
    "notes": ["Any text encountered in the value arguments will be ignored."],
    "sampleUsage": ["STEYX(A2:A100,B2:B100)"],
    "related": [
      "SLOPE",
      "RSQ",
      "PEARSON",
      "INTERCEPT",
      "FORECAST",
      "COVAR",
      "CORREL"
    ],
    "syntaxVariables": [
      {
        "name": "data_y",
        "description": "The range representing the array or matrix of dependent data."
      },
      {
        "name": "data_x",
        "description": "The range representing the array or matrix of independent data."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "T.DIST",
    "syntax": "T.DIST(x, degrees_freedom, cumulative)",
    "description": "Returns the right tailed Student distribution for a value x. Learn more.",
    "link": "https://support.google.com/docs/answer/9369014",
    "notes": [
      "TDIST: Calculates the probability for Student's t-distribution with a given input (x).",
      "T.DIST.2T: The T.DIST.2T function returns the two tailed Student distribution for a value x.",
      "T.DIST.RT: Returns the right tailed Student distribution for a value x."
    ],
    "sampleUsage": [
      "T.DIST.2T",
      "TDIST",
      "TDIST",
      "T.DIST(x, degrees_freedom, cumulative)",
      "T.DIST(1.96, 60, false)",
      "T.DIST(-1.98, 2, false)",
      "T.DIST(1.96, 60, true)"
    ],
    "related": [],
    "syntaxVariables": [
      {
        "name": "Example 1: A1 has T.DIST(1.96, 60, false)",
        "description": ""
      },
      {
        "name": "Example 2: A1 has T.DIST(-1.98, 2, false)",
        "description": ""
      },
      { "name": "Example 3: A1 has T.DIST(1.96, 60, true)", "description": "" },
      { "name": "Example 4: A1 has T.DIST(-1.98, 2, true)", "description": "" }
    ]
  },
  {
    "type": "Statistical",
    "name": "T.DIST.2T",
    "syntax": "T.DIST.2T(x, degrees_freedom)",
    "description": "Returns the two tailed Student distribution for a value x. Learn more.",
    "link": "https://support.google.com/docs/answer/9368252",
    "notes": [
      "T.DIST: The T.DIST function returns the right tailed Student distribution for a value x.",
      "T.DIST.RT: Returns the right tailed Student distribution for a value x.",
      "TDIST: Calculates the probability for Student's t-distribution with a given input (x)."
    ],
    "sampleUsage": [
      "T.DIST.RT",
      "TDIST",
      "TDIST",
      "T.DIST.2T(x, degrees_freedom)",
      "Example 1: T.DIST.2T(1.96, 60)",
      "Example 2: T.DIST.2T(1, 2)",
      "T.DIST.2T(1.96, 60)"
    ],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "If deg_freedom is less than 1, returns an #NUM error."
      },
      { "name": "", "description": "If x is negative, returns an #NUM error." },
      {
        "name": "T.DIST.RT",
        "description": "Along with , this formula replaces the TDIST formula. This is equivalent to calling the TDIST formula with tails = 2."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "T.DIST.RT",
    "syntax": "T.DIST.RT(x, degrees_freedom)",
    "description": "Returns the right tailed Student distribution for a value x. Learn more.",
    "link": "https://support.google.com/docs/answer/9369017",
    "notes": [
      "T.DIST: The T.DIST function returns the right tailed Student distribution for a value x.",
      "T.DIST.2T: The T.DIST.2T function returns the two tailed Student distribution for a value x.",
      "TDIST: Calculates the probability for Student's t-distribution with a given input (x)."
    ],
    "sampleUsage": [
      "T.DIST.2T,",
      "TDIST",
      "TDIST",
      "T.DIST.2T(x, degrees_freedom)",
      "Example 1: A1 has T.DIST.RT(1.96, 60)\n  Example 2: A1 has T.DIST.RT(-1.98, 2)",
      "T.DIST.RT(1.96, 60)"
    ],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "If deg_freedom is less than 1, returns an #NUM error."
      },
      {
        "name": "T.DIST.2T",
        "description": "This formula along with  replace the TDIST formula. T.DIST.RT is equivalent to calling the TDIST formula with tails = 1."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "T.INV",
    "syntax": "T.INV(probability, degrees_freedom)",
    "description": "Calculates the negative inverse of the one-tailed TDIST function.",
    "link": "https://support.google.com/docs/answer/6055809",
    "notes": [
      "T.INV is to be used for the negative inverse of the one-tailed  TDIST function.",
      "Both arguments to T.INV must be numeric or a destination cell whose value is numeric."
    ],
    "sampleUsage": [
      "T.INV(0.35, 1)",
      "T.INV(A1, A2)",
      "T.INV(probability, degrees_freedom)",
      "T.INV",
      "probability",
      "0.05757",
      "degrees_freedom"
    ],
    "related": ["TDIST", "TINV"],
    "syntaxVariables": [
      {
        "name": "probability",
        "description": "The probability associated with the t-distribution.\n\n    \n      \n        Must be greater than 0 and less than 1."
      },
      {
        "name": "degrees_freedom",
        "description": "The number of degrees of freedom.\n\n    \n      \n        Truncated to an integer in the calculation if a non-integer is provided as an argument.\n      \n      \n        Must be greater than or equal to 1."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "T.INV.2T",
    "syntax": "T.INV.2T(probability, degrees_freedom)",
    "description": "Calculates the inverse of the two-tailed TDIST function.",
    "link": "https://support.google.com/docs/answer/6055811",
    "notes": [
      "T.INV.2T is to be used for the inverse of two-tailed TDIST functions.",
      "T.INV.2T is synonymous with TINV.",
      "To calculate the negative inverse of the one-tailed TDIST function, use T.INV.",
      "Both arguments to T.INV.2T must be numeric or a destination cell whose value is numeric."
    ],
    "sampleUsage": [
      "T.INV.2T(0.35, 1)",
      "T.INV.2T(A1, A2)",
      "T.INV.2T(probability, degrees_freedom)"
    ],
    "related": ["TDIST", "T.INV"],
    "syntaxVariables": [
      {
        "name": "probability",
        "description": "The probability associated with the two-tailed t-distribution.\n\n    \n      \n        Must be greater than 0 and less than 1."
      },
      {
        "name": "degrees_freedom",
        "description": "The number of degrees of freedom.\n\n    \n      \n        Truncated to an integer in the calculation if a non-integer is provided as an argument.\n      \n      \n        Must be greater than or equal to 1."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "T.TEST",
    "syntax": "T.TEST(range1, range2, tails, type)",
    "description": "Returns the probability associated with Student's t-test. Determines whether two samples are likely to have come from the same two underlying populations that have the same mean.",
    "link": "https://support.google.com/docs/answer/6055837",
    "notes": [
      "tails and type must be numeric.",
      "range1 and range2 must have the same number of data points.",
      "T.TEST uses the data in range1 and range2 to compute a non-negative test. If tails is set to 1, T.TEST returns the probability of a higher value of the t-statistic under the assumption that range1 and range2 are samples from populations with the same mean. The value returned by T.TEST when tails is set to  2 is double that returned when tails is set to 1 and corresponds to the probability of a higher absolute value of the t-statistic under the \"same population means\" assumption.",
      "You can use TTEST or T.TEST to perform this function."
    ],
    "sampleUsage": ["T.TEST(A1:A4, B1:B4, 2, 1)"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "range1",
        "description": "The first sample of data or group of cells to consider for the t-test."
      },
      {
        "name": "range2",
        "description": "The second sample of data or group of cells to consider for the t-test."
      },
      {
        "name": "tails",
        "description": "Specifies the number of distribution tails.\n\n    \n      \n        If 1: uses a one-tailed distribution.\n      \n      \n        If 2: uses a two-tailed distribution."
      },
      {
        "name": "type",
        "description": "Specifies the type of t-Test.\n\n    \n      \n        If 1: a paired test is performed.\n      \n      \n        If 2: a two-sample equal variance (homoscedastic) test is performed.\n      \n      \n        If 3: a two-sample unequal variance (heteroscedastic) test is performed."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "TDIST",
    "syntax": "TDIST(x, degrees_freedom, tails)",
    "description": "Calculates the probability for Student's t-distribution with a given input (x).",
    "link": "https://support.google.com/docs/answer/3295914",
    "notes": [],
    "sampleUsage": ["TDIST(A2, 30, 1)", "TDIST(0.5, 1, 2)"],
    "related": ["NOMDIST", "BINOMDIST", "EXPONDIST", "NEGBINOMDIST", "PROB"],
    "syntaxVariables": [
      {
        "name": "x",
        "description": "The input to the t-distribution function."
      },
      {
        "name": "degrees_freedom",
        "description": "The number of degrees of freedom."
      },
      {
        "name": "tails",
        "description": "Specifies whether the calculated distribution will be one- or two-sided. (1 for one-tailed distributions, 2 for two-tailed distributions)."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "TINV",
    "syntax": "TINV(probability, degrees_freedom)",
    "description": "See T.INV.2T",
    "link": "https://support.google.com/docs/answer/6055811",
    "notes": [
      "T.INV.2T is to be used for the inverse of two-tailed TDIST functions.",
      "T.INV.2T is synonymous with TINV.",
      "To calculate the negative inverse of the one-tailed TDIST function, use T.INV.",
      "Both arguments to T.INV.2T must be numeric or a destination cell whose value is numeric."
    ],
    "sampleUsage": [
      "T.INV.2T(0.35, 1)",
      "T.INV.2T(A1, A2)",
      "T.INV.2T(probability, degrees_freedom)"
    ],
    "related": ["TDIST", "T.INV"],
    "syntaxVariables": [
      {
        "name": "probability",
        "description": "The probability associated with the two-tailed t-distribution.\n\n    \n      \n        Must be greater than 0 and less than 1."
      },
      {
        "name": "degrees_freedom",
        "description": "The number of degrees of freedom.\n\n    \n      \n        Truncated to an integer in the calculation if a non-integer is provided as an argument.\n      \n      \n        Must be greater than or equal to 1."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "TRIMMEAN",
    "syntax": "TRIMMEAN(data, exclude_proportion)",
    "description": "Calculates the mean of a dataset excluding some proportion of data from the high and low ends of the dataset.",
    "link": "https://support.google.com/docs/answer/3094061",
    "notes": [],
    "sampleUsage": [
      "TRIMMEAN(A2:A100,0.1)",
      "TRIMMEAN({1,1,2,3,5,8,13,21,34,55},0.05)"
    ],
    "related": ["HARMEAN", "GEOMEAN", "AVERAGEA", "AVERAGE"],
    "syntaxVariables": [
      {
        "name": "data",
        "description": "Array or range containing the dataset to consider."
      },
      {
        "name": "exclude_proportion",
        "description": "The proportion of the dataset to exclude, from the extremities of the set.\n\n    \n      exclude_proportion must be greater than or equal to 0 and less than 1."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "TTEST",
    "syntax": "TTEST(range1, range2, tails, type)",
    "description": "See T.TEST.",
    "link": "https://support.google.com/docs/answer/6055837",
    "notes": [
      "tails and type must be numeric.",
      "range1 and range2 must have the same number of data points.",
      "T.TEST uses the data in range1 and range2 to compute a non-negative test. If tails is set to 1, T.TEST returns the probability of a higher value of the t-statistic under the assumption that range1 and range2 are samples from populations with the same mean. The value returned by T.TEST when tails is set to  2 is double that returned when tails is set to 1 and corresponds to the probability of a higher absolute value of the t-statistic under the \"same population means\" assumption.",
      "You can use TTEST or T.TEST to perform this function."
    ],
    "sampleUsage": ["T.TEST(A1:A4, B1:B4, 2, 1)"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "range1",
        "description": "The first sample of data or group of cells to consider for the t-test."
      },
      {
        "name": "range2",
        "description": "The second sample of data or group of cells to consider for the t-test."
      },
      {
        "name": "tails",
        "description": "Specifies the number of distribution tails.\n\n    \n      \n        If 1: uses a one-tailed distribution.\n      \n      \n        If 2: uses a two-tailed distribution."
      },
      {
        "name": "type",
        "description": "Specifies the type of t-Test.\n\n    \n      \n        If 1: a paired test is performed.\n      \n      \n        If 2: a two-sample equal variance (homoscedastic) test is performed.\n      \n      \n        If 3: a two-sample unequal variance (heteroscedastic) test is performed."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "VAR",
    "syntax": "VAR(value1, [value2, ...])",
    "description": "Calculates the variance based on a sample.",
    "link": "https://support.google.com/docs/answer/3094063",
    "notes": [
      "Although VAR is specified as taking a maximum of 30 arguments, Google Sheets supports an arbitrary number of arguments for this function.",
      "If the total number of values supplied as value arguments is not at least two, VAR will return the #DIV/0!​ error.",
      "VAR will return an error if all of the value arguments are text. To calculate variance while interpreting text values as 0, use VARA.",
      "VAR calculates variance for a sample. To calculate variance across an entire population, use VARP.",
      "VAR takes the sum of the squares of each value's deviation from the mean and divides by the number of such values minus one. This differs from the calculation of variance across an entire population in that the latter divides by the size of the dataset without subtracting one."
    ],
    "sampleUsage": ["VAR(1,2,3,4,5,6,7,8,9,10)", "VAR(A2:A100)"],
    "related": [
      "VARPA",
      "VARP",
      "VARA",
      "STDEVPA",
      "STDEVP",
      "STDEVA",
      "STDEV",
      "SKEW",
      "KURT",
      "DVARP",
      "DVAR",
      "DSTDEVP",
      "DSTDEV",
      "DEVSQ",
      "AVEDEV"
    ],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The first value or range of the sample."
      },
      {
        "name": "value2, ...",
        "description": "Additional values or ranges to include in the sample."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "VAR.P",
    "syntax": "VAR.P(value1, [value2, ...])",
    "description": "See VARP",
    "link": "https://support.google.com/docs/answer/3094113",
    "notes": [
      "Although VARP is specified as taking a maximum of 30 arguments, Google Sheets supports an arbitrary number of arguments for this function.",
      "If the total number of values supplied as value arguments is not at least two, VARP will return the #DIV/0! error.",
      "VARP will ignore any of the value arguments that include text. To calculate variance while interpreting text values as 0, use VARPA.",
      "VARP calculates variance for an entire population. To calculate variance across a sample, use VAR.",
      "VARP takes the sum of the squares of each value's deviation from the mean and divides by the number of such values. This differs from the calculation of variance across a sample in that the latter divides by the size of the dataset minus one."
    ],
    "sampleUsage": ["VARP(1,2,3,4,5,6,7,8,9,10)", "VARP(A2:A100)"],
    "related": [
      "VARPA",
      "VARA",
      "VAR",
      "STDEVPA",
      "STDEVP",
      "STDEVA",
      "STDEV",
      "SKEW",
      "KURT",
      "DVARP",
      "DVAR",
      "DSTDEVP",
      "DSTDEV",
      "DEVSQ",
      "AVEDEV"
    ],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The first value or range of the population."
      },
      {
        "name": "value2, ...",
        "description": "Additional values or ranges to include in the population."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "VAR.S",
    "syntax": "VAR.S(value1, [value2, ...])",
    "description": "See VAR",
    "link": "https://support.google.com/docs/answer/3094063",
    "notes": [
      "Although VAR is specified as taking a maximum of 30 arguments, Google Sheets supports an arbitrary number of arguments for this function.",
      "If the total number of values supplied as value arguments is not at least two, VAR will return the #DIV/0!​ error.",
      "VAR will return an error if all of the value arguments are text. To calculate variance while interpreting text values as 0, use VARA.",
      "VAR calculates variance for a sample. To calculate variance across an entire population, use VARP.",
      "VAR takes the sum of the squares of each value's deviation from the mean and divides by the number of such values minus one. This differs from the calculation of variance across an entire population in that the latter divides by the size of the dataset without subtracting one."
    ],
    "sampleUsage": ["VAR(1,2,3,4,5,6,7,8,9,10)", "VAR(A2:A100)"],
    "related": [
      "VARPA",
      "VARP",
      "VARA",
      "STDEVPA",
      "STDEVP",
      "STDEVA",
      "STDEV",
      "SKEW",
      "KURT",
      "DVARP",
      "DVAR",
      "DSTDEVP",
      "DSTDEV",
      "DEVSQ",
      "AVEDEV"
    ],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The first value or range of the sample."
      },
      {
        "name": "value2, ...",
        "description": "Additional values or ranges to include in the sample."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "VARA",
    "syntax": "VARA(value1, value2)",
    "description": "Calculates an estimate of variance based on a sample, setting text to the value `0`.",
    "link": "https://support.google.com/docs/answer/3094064",
    "notes": [
      "Although VARA is specified as taking a maximum of 30 arguments, Google Sheets supports an arbitrary number of arguments for this function.",
      "If the total number of values supplied as value arguments is not at least two, VARA will return the #DIV/0! error.",
      "VARA sets each text value encountered to 0 for the purpose of calculation. To return an error upon encountering text, use VAR.",
      "VARA calculates variance for a sample. To calculate variance across an entire population, use VARPA.",
      "VARA takes the sum of the squares of each value's deviation from the mean and divides by the number of such values minus one. This differs from the calculation of variance across an entire population in that the latter divides by the size of the dataset without subtracting one."
    ],
    "sampleUsage": ["VARA(1,2,3,4,5,6,7,8,9,10)", "VARA(A2:A100)"],
    "related": [
      "VARPA",
      "VARP",
      "VAR",
      "STDEVPA",
      "STDEVP",
      "STDEVA",
      "STDEV",
      "SKEW",
      "KURT",
      "DVARP",
      "DVAR",
      "DSTDEVP",
      "DSTDEV",
      "DEVSQ",
      "AVEDEV"
    ],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The first value or range of the sample."
      },
      {
        "name": "value2, ...",
        "description": "Additional values or ranges to include in the sample."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "VARP",
    "syntax": "VARP(value1, value2)",
    "description": "Calculates the variance based on an entire population.",
    "link": "https://support.google.com/docs/answer/3094113",
    "notes": [
      "Although VARP is specified as taking a maximum of 30 arguments, Google Sheets supports an arbitrary number of arguments for this function.",
      "If the total number of values supplied as value arguments is not at least two, VARP will return the #DIV/0! error.",
      "VARP will ignore any of the value arguments that include text. To calculate variance while interpreting text values as 0, use VARPA.",
      "VARP calculates variance for an entire population. To calculate variance across a sample, use VAR.",
      "VARP takes the sum of the squares of each value's deviation from the mean and divides by the number of such values. This differs from the calculation of variance across a sample in that the latter divides by the size of the dataset minus one."
    ],
    "sampleUsage": ["VARP(1,2,3,4,5,6,7,8,9,10)", "VARP(A2:A100)"],
    "related": [
      "VARPA",
      "VARA",
      "VAR",
      "STDEVPA",
      "STDEVP",
      "STDEVA",
      "STDEV",
      "SKEW",
      "KURT",
      "DVARP",
      "DVAR",
      "DSTDEVP",
      "DSTDEV",
      "DEVSQ",
      "AVEDEV"
    ],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The first value or range of the population."
      },
      {
        "name": "value2, ...",
        "description": "Additional values or ranges to include in the population."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "VARPA",
    "syntax": "VARPA(value1, value2,...)",
    "description": "Calculates the variance based on an entire population, setting text to the value `0`.",
    "link": "https://support.google.com/docs/answer/3094065",
    "notes": [
      "Although VARPA is specified as taking a maximum of 30 arguments, Google Sheets supports an arbitrary number of arguments for this function.",
      "If the total number of values supplied as value arguments is not at least two, VARPA will return the #NUM! error.",
      "VARPA sets each text value encountered to 0 for the purpose of calculation. To return an error upon encountering text, use VARP.",
      "VARPA calculates variance for an entire population. To calculate variance across a sample, use VARA.",
      "VARPA takes the sum of the squares of each value's deviation from the mean and divides by the number of such values. This differs from the calculation of variance across a sample in that the latter divides by the size of the dataset minus one."
    ],
    "sampleUsage": ["VARPA(1,2,3,4,5,6,7,8,9,10)", "VARPA(A2:A100)"],
    "related": [
      "VARP",
      "VARA",
      "VAR",
      "STDEVPA",
      "STDEVP",
      "STDEVA",
      "STDEV",
      "SKEW",
      "KURT",
      "DVARP",
      "DVAR",
      "DSTDEVP",
      "DSTDEV",
      "DEVSQ",
      "AVEDEV"
    ],
    "syntaxVariables": [
      {
        "name": "value1",
        "description": "The first value or range of the population."
      },
      {
        "name": "value2, ...",
        "description": "Additional values or ranges to include in the population."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "WEIBULL",
    "syntax": "WEIBULL(x, shape, scale, cumulative)",
    "description": "Returns the value of the Weibull distribution function (or Weibull cumulative distribution function) for a specified shape and scale.",
    "link": "https://support.google.com/docs/answer/3094116",
    "notes": [
      "If shape is 1, WEIBULL is equivalent to EXPONDIST with lambda set to 1/scale."
    ],
    "sampleUsage": ["WEIBULL(2.4, 2, 3, TRUE)", "WEIBULL(A2,A3,A4,TRUE)"],
    "related": [
      "POISSON",
      "NORMSINV",
      "NORMSDIST",
      "NORMINV",
      "NORMDIST",
      "NEGBINOMDIST",
      "LOGNORMDIST",
      "LOGINV",
      "EXPONDIST",
      "BINOMDIST"
    ],
    "syntaxVariables": [
      {
        "name": "x",
        "description": "The input to the Weibull distribution function."
      },
      {
        "name": "shape",
        "description": "The shape parameter of the Weibull distribution function.\n\n    \n      \n        shape is usually denoted k, and denoted as alpha in other spreadsheet packages.\n      \n      \n        shape must be greater than 0."
      },
      {
        "name": "scale",
        "description": "The scale parameter of the Weibull distribution function.\n\n    \n      \n        scale is usually denoted lambda in texts, and denoted as beta in other spreadsheet packages.\n      \n      \n        scale must be greater than 0."
      },
      {
        "name": "cumulative",
        "description": "TRUE to use the cumulative distribution function, FALSE to use the probability density function."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "WEIBULL.DIST",
    "syntax": "WEIBULL.DIST(x, shape, scale, cumulative)",
    "description": "See WEIBULL",
    "link": "https://support.google.com/docs/answer/3094116",
    "notes": [
      "If shape is 1, WEIBULL is equivalent to EXPONDIST with lambda set to 1/scale."
    ],
    "sampleUsage": ["WEIBULL(2.4, 2, 3, TRUE)", "WEIBULL(A2,A3,A4,TRUE)"],
    "related": [
      "POISSON",
      "NORMSINV",
      "NORMSDIST",
      "NORMINV",
      "NORMDIST",
      "NEGBINOMDIST",
      "LOGNORMDIST",
      "LOGINV",
      "EXPONDIST",
      "BINOMDIST"
    ],
    "syntaxVariables": [
      {
        "name": "x",
        "description": "The input to the Weibull distribution function."
      },
      {
        "name": "shape",
        "description": "The shape parameter of the Weibull distribution function.\n\n    \n      \n        shape is usually denoted k, and denoted as alpha in other spreadsheet packages.\n      \n      \n        shape must be greater than 0."
      },
      {
        "name": "scale",
        "description": "The scale parameter of the Weibull distribution function.\n\n    \n      \n        scale is usually denoted lambda in texts, and denoted as beta in other spreadsheet packages.\n      \n      \n        scale must be greater than 0."
      },
      {
        "name": "cumulative",
        "description": "TRUE to use the cumulative distribution function, FALSE to use the probability density function."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "Z.TEST",
    "syntax": "Z.TEST(data, value, [standard_deviation])",
    "description": "Returns the one-tailed P-value of a Z-test with standard distribution.",
    "link": "https://support.google.com/docs/answer/3094067",
    "notes": [
      "The P-value returned by Z.TEST is the probability that a randomly generated sample (of the same size as the data) has a mean value greater than that of the original data set.",
      "You can use ZTEST or Z.TEST to perform this function."
    ],
    "sampleUsage": ["Z.TEST(A2:A100,B2)", "Z.TEST({1,2,3,4,5,6},5.5,1.2)"],
    "related": ["NORMSDIST", "NORMDIST", "CONFIDENCE"],
    "syntaxVariables": [
      {
        "name": "data",
        "description": "The array or range containing the dataset to consider."
      },
      {
        "name": "value",
        "description": "The test statistic to use in the Z-test."
      },
      {
        "name": "standard_deviation",
        "description": "[ OPTIONAL ] - The standard deviation to assume for the Z-test. If this is not provided, STDEV(data) will be calculated."
      }
    ]
  },
  {
    "type": "Statistical",
    "name": "ZTEST",
    "syntax": "ZTEST(data, value, [standard_deviation])",
    "description": "See Z.TEST.",
    "link": "https://support.google.com/docs/answer/3094067",
    "notes": [
      "The P-value returned by Z.TEST is the probability that a randomly generated sample (of the same size as the data) has a mean value greater than that of the original data set.",
      "You can use ZTEST or Z.TEST to perform this function."
    ],
    "sampleUsage": ["Z.TEST(A2:A100,B2)", "Z.TEST({1,2,3,4,5,6},5.5,1.2)"],
    "related": ["NORMSDIST", "NORMDIST", "CONFIDENCE"],
    "syntaxVariables": [
      {
        "name": "data",
        "description": "The array or range containing the dataset to consider."
      },
      {
        "name": "value",
        "description": "The test statistic to use in the Z-test."
      },
      {
        "name": "standard_deviation",
        "description": "[ OPTIONAL ] - The standard deviation to assume for the Z-test. If this is not provided, STDEV(data) will be calculated."
      }
    ]
  },
  {
    "type": "Text",
    "name": "ARABIC",
    "syntax": "ARABIC(roman_numeral)",
    "description": "Computes the value of a Roman numeral.",
    "link": "https://support.google.com/docs/answer/3238301",
    "notes": [],
    "sampleUsage": ["ARABIC(\"XIV\")", "ARABIC(\"MMXIII\")"],
    "related": ["ROMAN"],
    "syntaxVariables": [
      {
        "name": "roman_numeral",
        "description": "The Roman numeral to format, whose value must be between 1 and 3999, inclusive."
      }
    ]
  },
  {
    "type": "Text",
    "name": "ASC",
    "syntax": "ASC(text)",
    "description": "Converts full-width ASCII and katakana characters to their half-width counterparts. All standard-width characters will remain unchanged.",
    "link": "https://support.google.com/docs/answer/9061514",
    "notes": [],
    "sampleUsage": ["=ASC(text)"],
    "related": [],
    "syntaxVariables": []
  },
  {
    "type": "Text",
    "name": "CHAR",
    "syntax": "CHAR(table_number)",
    "description": "Convert a number into a character according to the current Unicode table.",
    "link": "https://support.google.com/docs/answer/3094120",
    "notes": [
      "The current Unicode table can be found online at the unicode website or on Wikipedia.",
      "Not all Unicode characters will display properly on all computers and devices. Special fonts or languages may have to be installed or enabled on your computer."
    ],
    "sampleUsage": ["CHAR(97)", "CHAR(HEX2DEC(\"A3\"))", "CHAR(A1)"],
    "related": ["CODE", "HEX2DEC"],
    "syntaxVariables": [
      {
        "name": "table_number",
        "description": "The number of the character to look up from the current Unicode table in decimal format.\n\n    \n      table_number must be a number in decimal format (base 10). Many tables provide Unicode values in hexadecimal format (base 16). In this case, use the HEX2DEC function to convert."
      }
    ]
  },
  {
    "type": "Text",
    "name": "CLEAN",
    "syntax": "CLEAN(text)",
    "description": "Returns the text with the non-printable ASCII characters removed.",
    "link": "https://support.google.com/docs/answer/3267340",
    "notes": [
      "This function only removes non-printable ASCII characters. Non-printable Unicode characters that aren’t found in ASCII are not removed.",
      "Google Sheets does not show non-printable characters in the UI, so using this function will typically not result in any visible changes."
    ],
    "sampleUsage": ["CLEAN(\"AF\"&CHAR(31))"],
    "related": ["CHAR", "TRIM", "SUBSTITUTE"],
    "syntaxVariables": [
      {
        "name": "text",
        "description": "The text whose non-printable characters are to be removed."
      }
    ]
  },
  {
    "type": "Text",
    "name": "CODE",
    "syntax": "CODE(string)",
    "description": "Returns the numeric Unicode map value of the first character in the string provided. Learn more",
    "link": "https://support.google.com/docs/answer/3094122",
    "notes": [
      "Only the first character in string will be evaluated; others will be ignored."
    ],
    "sampleUsage": ["CODE(\"a\")", "CODE(A1)"],
    "related": ["CHAR"],
    "syntaxVariables": [
      {
        "name": "string",
        "description": "The string whose first character's Unicode map value will be returned."
      }
    ]
  },
  {
    "type": "Text",
    "name": "CONCATENATE",
    "syntax": "CONCATENATE(string1, [string2, ...])",
    "description": "Appends strings to one another.",
    "link": "https://support.google.com/docs/answer/3094123",
    "notes": [
      "When a range with both width and height greater than 1 is specified, cell values are appended across rows rather than down columns. That is, CONCATENATE(A2:B7) is equivalent to CONCATENATE(A2,B2,A3,B3, ... , A7,B7)."
    ],
    "sampleUsage": [
      "CONCATENATE(\"Welcome\", \" \", \"to\", \" \", \"Sheets!\")",
      "CONCATENATE(A1,A2,A3)",
      "CONCATENATE(A2:B7)"
    ],
    "related": ["SPLIT", "JOIN"],
    "syntaxVariables": [
      { "name": "string1", "description": "The initial string." },
      {
        "name": "string2 ...",
        "description": "[ OPTIONAL ] - Additional strings to append in sequence."
      }
    ]
  },
  {
    "type": "Text",
    "name": "DOLLAR",
    "syntax": "DOLLAR(number, [number_of_places])",
    "description": "Formats a number into the locale-specific currency format.",
    "link": "https://support.google.com/docs/answer/3094071",
    "notes": [
      "The currency format used by DOLLAR is specific to your spreadsheet locale.",
      "DOLLAR differs from the related function TO_DOLLARS in that DOLLAR outputs text rather than applying a cell format to a number."
    ],
    "sampleUsage": ["DOLLAR(1.2351,4)", "DOLLAR(2.35)"],
    "related": ["TO_DOLLARS"],
    "syntaxVariables": [
      { "name": "number", "description": "The value to be formatted." },
      {
        "name": "number_of_places",
        "description": "[ OPTIONAL - 2 by default ] - The number of decimal places to display."
      }
    ]
  },
  {
    "type": "Text",
    "name": "EXACT",
    "syntax": "EXACT(string1, string2)",
    "description": "Tests whether two strings are identical.",
    "link": "https://support.google.com/docs/answer/3094073",
    "notes": [
      "EXACT requires the two strings to have the exact same characters, including identical case and identical spaces or hidden characters."
    ],
    "sampleUsage": ["EXACT(A1,A2)"],
    "related": [],
    "syntaxVariables": [
      { "name": "string1", "description": "The first string to compare" },
      { "name": "string2", "description": "The second string to compare" }
    ]
  },
  {
    "type": "Text",
    "name": "FIND",
    "syntax": "FIND(search_for, text_to_search, [starting_at])",
    "description": "Returns the position at which a string is first found within text.",
    "link": "https://support.google.com/docs/answer/3094126",
    "notes": [
      "FIND is case-sensitive, meaning that uppercase and lowercase letters matter. For example, \"abc\" will not match \"ABC\". To ignore case, use the SEARCH function.",
      "Ensure that search_for and text_to_search are not supplied in reverse order, or the #VALUE! error will likely be returned. The arguments are supplied in a different order than other text functions such as SPLIT and SUBSTITUTE.",
      "It's recommended to use a function such as IFERROR to check for cases when there aren't matches to the search.",
      "If the pattern you're searching for isn't found, #VALUE! is returned."
    ],
    "sampleUsage": [
      "FIND(\"n\",A2)",
      "FIND(\"wood\",\"How much wood can a woodchuck chuck\",14)"
    ],
    "related": [
      "SUBSTITUTE",
      "SPLIT",
      "SEARCH",
      "IFERROR",
      "SEARCH",
      "SPLIT",
      "SUBSTITUTE",
      "IFERROR"
    ],
    "syntaxVariables": [
      {
        "name": "search_for",
        "description": "The string to look for within text_to_search."
      },
      {
        "name": "text_to_search",
        "description": "The text to search for the first occurrence of search_for."
      },
      {
        "name": "starting_at",
        "description": "[ OPTIONAL - 1 by default ] - The character within text_to_search at which to start the search."
      }
    ]
  },
  {
    "type": "Text",
    "name": "FINDB",
    "syntax": "FINDB(search_for, text_to_search, [starting_at])",
    "description": "Returns the position at which a string is first found within text counting each double-character as 2.",
    "link": "https://support.google.com/docs/answer/3296009",
    "notes": [
      "If search_for is not found, the #VALUE! error value is returned.",
      "Ensure that search_for and text_to_search are not supplied in reverse order, or the #VALUE! error will likely be returned. The arguments are supplied in a different order than other text functions such as SPLIT and SUBSTITUTE.",
      "It's recommended to use a function such as IFERROR to check for cases when there aren't matches to the search.",
      "Use FIND for standard character sets, and FINDB for double-byte character sets such as Japanese, Chinese (Simplified), Chinese (Traditional), and Korean."
    ],
    "sampleUsage": ["FINDB(\"新\", \"农历新年\", 2)"],
    "related": [
      "FIND",
      "SEARCH",
      "SEARCHB",
      "REPLACE",
      "REGEXREPLACE",
      "REGEXMATCH",
      "SUBSTITUTE",
      "SPLIT"
    ],
    "syntaxVariables": [
      {
        "name": "search_for",
        "description": "The string to look for within text_to_search."
      },
      {
        "name": "search_for",
        "description": "- The text to search for the first occurrence of ."
      },
      {
        "name": "starting_at",
        "description": "[ OPTIONAL - 1 by default ] - The character position within text_to_search at which to start the search."
      }
    ]
  },
  {
    "type": "Text",
    "name": "FIXED",
    "syntax": "FIXED(number, [number_of_places], [suppress_separator])",
    "description": "Formats a number with a fixed number of decimal places.",
    "link": "https://support.google.com/docs/answer/3094075",
    "notes": [],
    "sampleUsage": ["FIXED(3.141592653,2)", "FIXED(966364281,4,1)"],
    "related": [],
    "syntaxVariables": [
      { "name": "number", "description": "The number to format." },
      {
        "name": "number_of_places",
        "description": "[ OPTIONAL ] - The number of decimal places to display in the result.\n\n    \n      If number has fewer than number_of_places significant digits, zeros will be appended. If it has greater than number_of_places significant digits, number will be rounded to the correct number_of_places rather than truncated."
      },
      {
        "name": "suppress_separator",
        "description": "[ OPTIONAL - 0 by default ] - Whether or not to suppress the thousands separator used in some locales (e.g. 1,000 becomes 1000). Separators will be present if this value is 0 or omitted, and absent otherwise."
      }
    ]
  },
  {
    "type": "Text",
    "name": "JOIN",
    "syntax": "JOIN(delimiter, value_or_array1, [value_or_array2, ...])",
    "description": "Concatenates the elements of one or more one-dimensional arrays using a specified delimiter.",
    "link": "https://support.google.com/docs/answer/3094077",
    "notes": [
      "When delimiter is omitted, the result of JOIN is similar to that of CONCATENATE."
    ],
    "sampleUsage": [
      "JOIN(\" and-a \",{1,2,\"1 2 3 4\"})",
      "JOIN(\",\",{1,2,3},{4;5;6})",
      "JOIN(\"-\",A1:A100)"
    ],
    "related": ["SPLIT", "CONCATENATE"],
    "syntaxVariables": [
      {
        "name": "delimiter",
        "description": "The character or string to place between each concatenated value.\n\n    \n      delimiter may be specified as blank, e.g. JOIN(,{1,2,3})."
      },
      {
        "name": "value_or_array1",
        "description": "The value or values to be appended using delimiter."
      },
      {
        "name": "value_or_array2, ...",
        "description": "[ OPTIONAL ] - Additional value or array to be appended using delimiter."
      }
    ]
  },
  {
    "type": "Text",
    "name": "LEFT",
    "syntax": "LEFT(string, [number_of_characters])",
    "description": "Returns a substring from the beginning of a specified string.",
    "link": "https://support.google.com/docs/answer/3094079",
    "notes": [
      "0 is a valid input for number_of_characters and will cause LEFT to return the empty string."
    ],
    "sampleUsage": ["LEFT(A2,2)", "LEFT(\"lorem ipsum\")"],
    "related": ["SUBSTITUTE", "SPLIT", "RIGHT", "MID"],
    "syntaxVariables": [
      {
        "name": "string",
        "description": "The string from which the left portion will be returned."
      },
      {
        "name": "number_of_characters",
        "description": "[ OPTIONAL - 1 by default ] - The number of characters to return from the left side of string."
      }
    ]
  },
  {
    "type": "Text",
    "name": "LEFTB",
    "syntax": "LEFTB(string, num_of_bytes)",
    "description": "Returns the left portion of a string up to a certain number of bytes. Learn more.",
    "link": "https://support.google.com/docs/answer/9367470",
    "notes": [
      "MIDB: ​The MIDB function returns a section of a string starting at a given character and up to a specified number of bytes.",
      "RIGHTB: The RIGHTB function returns the right portion of a string up to a certain number of bytes.",
      "LENB: The LENB function returns the length of a string in bytes."
    ],
    "sampleUsage": [],
    "related": [],
    "syntaxVariables": [
      {
        "name": "LEFTB",
        "description": " returns the same value as LEFT if the input string has only single byte characters"
      },
      {
        "name": "num_of_bytes",
        "description": " must be greater than or equal to zero."
      },
      {
        "name": "num_of_bytes",
        "description": "If  is greater than the length of text in bytes, LEFTB returns all of text."
      },
      {
        "name": "num_of_bytes",
        "description": "If  is omitted, it is assumed to be 1."
      }
    ]
  },
  {
    "type": "Text",
    "name": "LEN",
    "syntax": "LEN(text)",
    "description": "Returns the length of a string.",
    "link": "https://support.google.com/docs/answer/3094081",
    "notes": [
      "LEN counts all characters, even spaces and nonprinting characters. In cases where LEN returns unexpected values, ensure that there are no such characters in text."
    ],
    "sampleUsage": ["LEN(A2)", "LEN(\"lorem ipsum\")"],
    "related": ["LEFT", "RIGHT", "MID"],
    "syntaxVariables": [
      {
        "name": "text",
        "description": "The string whose length will be returned."
      }
    ]
  },
  {
    "type": "Text",
    "name": "LENB",
    "syntax": "LENB(string)",
    "description": "Returns the length of a string in bytes.\" Learn more.",
    "link": "https://support.google.com/docs/answer/9367584",
    "notes": [],
    "sampleUsage": ["LENB(string)", "LENB"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "MIDB: ​The MIDB function returns a section of a string starting at a given character and up to a specified number of bytes."
      },
      {
        "name": "",
        "description": "LEFTB: The LEFTB function returns the left portion of a string up to a certain number of bytes."
      },
      {
        "name": "",
        "description": "RIGHTB: The RIGHTB function returns the right portion of a string up to a certain number of bytes."
      }
    ]
  },
  {
    "type": "Text",
    "name": "LOWER",
    "syntax": "LOWER(text)",
    "description": "Converts a specified string to lowercase.",
    "link": "https://support.google.com/docs/answer/3094083",
    "notes": [],
    "sampleUsage": ["LOWER(\"LOREM IPSUM\")", "LOWER(A2)"],
    "related": ["UPPER", "PROPER"],
    "syntaxVariables": [
      { "name": "text", "description": "The string to convert to lowercase." }
    ]
  },
  {
    "type": "Text",
    "name": "MID",
    "syntax": "MID(string, starting_at, extract_length)",
    "description": "Returns a segment of a string.",
    "link": "https://support.google.com/docs/answer/3094129",
    "notes": [
      "To return the contents from starting_at to the end of string, use LEN to calculate the length of the string that will be returned rather than simply specifying a large number for extract_length.",
      "To return the contents of string beginning with a particular character or sub-string, use SEARCH to locate the index of the desired point."
    ],
    "sampleUsage": ["MID(\"get this\",5,4)", "MID(A2,3,5)"],
    "related": ["SUBSTITUTE", "SPLIT", "SEARCH", "RIGHT", "LEFT", "LEN"],
    "syntaxVariables": [
      {
        "name": "string",
        "description": "The string to extract a segment from."
      },
      {
        "name": "starting_at",
        "description": "The index from the left of string from which to begin extracting. The first character in string has the index 1."
      },
      {
        "name": "extract_length",
        "description": "The length of the segment to extract.\n\n    \n      If the end of string is reached before extract_length characters are encountered, MID returns the characters from starting_at to the end of string."
      }
    ]
  },
  {
    "type": "Text",
    "name": "MIDB",
    "syntax": "MIDB(string)",
    "description": "Returns a section of a string starting at a given character and up to a specified number of bytes. Learn more.",
    "link": "https://support.google.com/docs/answer/9367691",
    "notes": [
      "LENB: The LENB function returns the length of a string in bytes.",
      "LEFTB: The LEFTB function returns the left portion of a string up to a certain number of bytes.",
      "RIGHTB: The RIGHTB function returns the right portion of a string up to a certain number of bytes."
    ],
    "sampleUsage": [],
    "related": [],
    "syntaxVariables": [
      {
        "name": "MIDB",
        "description": " returns the same value as MID if the input string has only single byte characters"
      },
      {
        "name": "Starting_at",
        "description": " must be greater than or equal to 1."
      },
      {
        "name": "Extract_length_bytes",
        "description": " must be greater than or equal to 0."
      }
    ]
  },
  {
    "type": "Text",
    "name": "PROPER",
    "syntax": "PROPER(text_to_capitalize)",
    "description": "Capitalizes each word in a specified string.",
    "link": "https://support.google.com/docs/answer/3094133",
    "notes": [
      "PROPER is useful for proper nouns, such as names of people or geographic locations.",
      "PROPER capitalizes each word in text_to_capitalize rather than the beginning of each sentence, and is therefore likely not the correct tool to use for paragraphs or other blocks of text.",
      "PROPER will convert all characters not at the beginning of words to lowercase, which may cause problems with certain strings. For example, using PROPER(\"mcLeod\") to capitalize the surname McLeod results in \"Mcleod\" instead."
    ],
    "sampleUsage": ["PROPER(\"united states\")", "PROPER(A2)"],
    "related": ["UPPER", "SUBSTITUTE", "LOWER"],
    "syntaxVariables": [
      {
        "name": "text_to_capitalize",
        "description": "The text which will be returned with the first letter of each word in uppercase and all other letters in lowercase."
      }
    ]
  },
  {
    "type": "Text",
    "name": "REGEXEXTRACT",
    "syntax": "REGEXEXTRACT(text, regular_expression)",
    "description": "Extracts matching substrings according to a regular expression.",
    "link": "https://support.google.com/docs/answer/3098244",
    "notes": [
      "Google products use RE2 for regular expressions. Google Sheets supports RE2 except Unicode character class matching. Learn more on how to use RE2 expressions.",
      "This function only works with text (not numbers) as input and returns text as output. If a number is desired as the output, try using the VALUE function in conjunction with this function. If numbers are used as input, convert them to text using the TEXT function."
    ],
    "sampleUsage": ["REGEXEXTRACT(\"Needle in a haystack\", \".e{2}dle\")"],
    "related": [
      "REGEXMATCH",
      "REGEXREPLACE",
      "SUBSTITUTE",
      "REPLACE",
      "VALUE",
      "TEXT"
    ],
    "syntaxVariables": [
      { "name": "text", "description": "The input text." },
      {
        "name": "regular_expression",
        "description": "The first part of text that matches this expression will be returned."
      }
    ]
  },
  {
    "type": "Text",
    "name": "REGEXMATCH",
    "syntax": "REGEXMATCH(text, regular_expression)",
    "description": "Whether a piece of text matches a regular expression.",
    "link": "https://support.google.com/docs/answer/3098292",
    "notes": [
      "Google products use RE2 for regular expressions. Google Sheets supports RE2 except Unicode character class matching. Learn more on how to use RE2 expressions.",
      "This function only works with text (not numbers) as input and returns a logical value, i.e. TRUE or FALSE, as output. If numbers are used as input, convert them to text using the TEXT function."
    ],
    "sampleUsage": ["REGEXMATCH(\"Spreadsheets\", \"S.r\")"],
    "related": [
      "REGEXEXTRACT",
      "REGEXREPLACE",
      "SUBSTITUTE",
      "REPLACE",
      "TEXT"
    ],
    "syntaxVariables": [
      {
        "name": "text",
        "description": "The text to be tested against the regular expression."
      },
      {
        "name": "regular_expression",
        "description": "The regular expression to test the text against."
      }
    ]
  },
  {
    "type": "Text",
    "name": "REGEXREPLACE",
    "syntax": "REGEXREPLACE(text, regular_expression, replacement)",
    "description": "Replaces part of a text string with a different text string using regular expressions.",
    "link": "https://support.google.com/docs/answer/3098245",
    "notes": [
      "Google products use RE2 for regular expressions. Google Sheets supports RE2 except Unicode character class matching.  Learn more on how to use RE2 expressions.",
      "This function only works with text (not numbers) as input and returns text as output. If a number is desired as the output, try using the VALUE function in conjunction with this function. If numbers are used as input, convert them to text using the TEXT function."
    ],
    "sampleUsage": ["REGEXREPLACE(\"Spreadsheets\", \"S.*d\", \"Bed\")"],
    "related": [
      "REGEXEXTRACT",
      "REGEXMATCH",
      "SUBSTITUTE",
      "REPLACE",
      "VALUE",
      "TEXT"
    ],
    "syntaxVariables": [
      {
        "name": "text",
        "description": "The text, a part of which will be replaced."
      },
      {
        "name": "regular_expression",
        "description": "The regular expression. All matching instances in text will be replaced."
      },
      {
        "name": "replacement",
        "description": "The text which will be inserted into the original text."
      }
    ]
  },
  {
    "type": "Text",
    "name": "REPLACE",
    "syntax": "REPLACE(text, position, length, new_text)",
    "description": "Replaces part of a text string with a different text string.",
    "link": "https://support.google.com/docs/answer/3098247",
    "notes": [
      "This function returns text as the output. If a number is desired, try using the VALUE function in conjunction with this function."
    ],
    "sampleUsage": ["REPLACE(\"Spreadsheets\", 1, 6, \"Bed\")"],
    "related": ["REGEXREPLACE", "SUBSTITUTE", "VALUE"],
    "syntaxVariables": [
      {
        "name": "text",
        "description": "The text, a part of which will be replaced."
      },
      {
        "name": "position",
        "description": "The position where the replacement will begin (starting from 1)."
      },
      {
        "name": "length",
        "description": "The number of characters in the text to be replaced."
      },
      {
        "name": "new_text",
        "description": "The text which will be inserted into the original text."
      }
    ]
  },
  {
    "type": "Text",
    "name": "REPLACEB",
    "syntax": "REPLACEB(text, position, num_bytes, new_text)",
    "description": "Replaces part of a text string, based on a number of bytes, with a different text string. Learn more.",
    "link": "https://support.google.com/docs/answer/9367752",
    "notes": [
      "LENB: The LENB function returns the length of a string in bytes.",
      "LEFTB: The LEFTB function returns the left portion of a string up to a certain number of bytes.",
      "RIGHTB: The RIGHTB function returns the right portion of a string up to a certain number of bytes.",
      "MIDB:The MIDB function returns a section of a string starting at a given character and up to a specified number of bytes."
    ],
    "sampleUsage": [],
    "related": [],
    "syntaxVariables": [
      {
        "name": "REPLACEB",
        "description": " returns the same value as REPLACE if the input `text` has only single byte characters"
      },
      {
        "name": "VALUE",
        "description": "This function returns text as the output. If a number is desired, try using the  function in conjunction with this function."
      }
    ]
  },
  {
    "type": "Text",
    "name": "REPT",
    "syntax": "REPT(text_to_repeat, number_of_repetitions)",
    "description": "Returns specified text repeated a number of times.",
    "link": "https://support.google.com/docs/answer/3094134",
    "notes": [
      "REPT does not insert spaces between repetitions of text_to_repeat. If spaces are desired, a space must be appended to the end of the value of text_to_repeat. The resulting return value from REPT will have at least one trailing space, which may be removed with TRIM."
    ],
    "sampleUsage": ["REPT(\"ha\",4)", "REPT(A2,3)"],
    "related": ["TRIM", "SUBSTITUTE", "SPLIT", "TRIM"],
    "syntaxVariables": [
      {
        "name": "text_to_repeat",
        "description": "The character or string to repeat."
      },
      {
        "name": "number_of_repetitions",
        "description": "The number of times text_to_repeat should appear in the value returned.\n\n    \n      The number_of_repetitions can’t exceed the character limit of a cell, 32,000 characters. If number_of_repetitions is greater than 32,000 characters, REPT will return a #VALUE! error."
      }
    ]
  },
  {
    "type": "Text",
    "name": "RIGHT",
    "syntax": "RIGHT(string, [number_of_characters])",
    "description": "Returns a substring from the end of a specified string.",
    "link": "https://support.google.com/docs/answer/3094087",
    "notes": [
      "0 is a valid input for number_of_characters and will cause RIGHT to return the empty string."
    ],
    "sampleUsage": ["RIGHT(A2,2)", "RIGHT(\"lorem ipsum\")"],
    "related": ["SUBSTITUTE", "SPLIT", "MID", "LEFT"],
    "syntaxVariables": [
      {
        "name": "string",
        "description": "The string from which the right portion will be returned."
      },
      {
        "name": "number_of_characters",
        "description": "[ OPTIONAL - 1 by default ] - The number of characters to return from the right side of string."
      }
    ]
  },
  {
    "type": "Text",
    "name": "RIGHTB",
    "syntax": "RIGHTB(string, num_of_bytes)",
    "description": "Returns the right portion of a string up to a certain number of bytes. Learn more.",
    "link": "https://support.google.com/docs/answer/9367697",
    "notes": [
      "MIDB:The MIDB function returns a section of a string starting at a given character and up to a specified number of bytes.",
      "LEFTB: The LEFTB function returns the left portion of a string up to a certain number of bytes.",
      "LENB: The LENB function returns the length of a string in bytes."
    ],
    "sampleUsage": [],
    "related": [],
    "syntaxVariables": [
      {
        "name": "RIGHTB",
        "description": " returns the same value as RIGHT if the input string has only single byte characters"
      },
      {
        "name": "num_of_bytes",
        "description": " must be greater than or equal to zero."
      },
      {
        "name": "num_of_bytes",
        "description": "If  is greater than the length of text in bytes, RIGHTB returns all of text."
      },
      {
        "name": "num_of_bytes",
        "description": "If  is omitted, it is assumed to be 1."
      }
    ]
  },
  {
    "type": "Text",
    "name": "ROMAN",
    "syntax": "ROMAN(number, [rule_relaxation])",
    "description": "Formats a number in Roman numerals.",
    "link": "https://support.google.com/docs/answer/3094153",
    "notes": [],
    "sampleUsage": ["ROMAN(499,0)", "ROMAN(A2)"],
    "related": ["ARABIC"],
    "syntaxVariables": [
      {
        "name": "number",
        "description": "The number to format, between 1 and 3999, inclusive."
      },
      {
        "name": "rule_relaxation",
        "description": "[ OPTIONAL - 0 by default ] - The degree to which traditional syntax rules may be relaxed, between 0 and 4 inclusive.\n\n    \n      \n        0 indicates strict precedence rules, where I may only precede V and X, V may only precede X, X may only precede L and C, L may only precede C, and C may only precede D and M. Therefore ROMAN(499,0) is CDXCIX.\n      \n      \n        1 indicates a relaxation where V may precede L and C and L may precede D and M. Therefore ROMAN(499,1) is LDVLIV.\n      \n      \n        2 indicates a further relaxation where I may precede L and C, and X may precede D and M. Therefore ROMAN(499,2) is XDIX.\n      \n      \n        3 indicates a further relaxation where V may precede D and M. Therefore ROMAN(499,3) is VDIV.\n      \n      \n        4 indicates a further relaxation where I may precede D and M. Therefore ROMAN(499,4) is ID."
      }
    ]
  },
  {
    "type": "Text",
    "name": "SEARCH",
    "syntax": "SEARCH(search_for, text_to_search, [starting_at])",
    "description": "Returns the position at which a string is first found within text.",
    "link": "https://support.google.com/docs/answer/3094154",
    "notes": [
      "SEARCH is not case-sensitive, meaning that uppercase and lowercase letters do not matter. For example, \"abc\" will match \"ABC\". To compare text where case matters, use the FIND function.",
      "Ensure that search_for and text_to_search are not supplied in reverse order, or the #VALUE! error will likely be returned. The arguments are supplied in a different order than other text functions such as SPLIT and SUBSTITUTE.",
      "It's recommended to use a function such as IFERROR to check for cases when there aren't matches to the search."
    ],
    "sampleUsage": [
      "SEARCH(\"n\",A2)",
      "SEARCH(\"wood\",\"How much wood can a woodchuck chuck\",14)"
    ],
    "related": [
      "SUBSTITUTE",
      "SPLIT",
      "FIND",
      "IFERROR",
      "FIND",
      "SPLIT",
      "SUBSTITUTE",
      "IFERROR"
    ],
    "syntaxVariables": [
      {
        "name": "search_for",
        "description": "The string to look for within text_to_search."
      },
      {
        "name": "text_to_search",
        "description": "The text to search for the first occurrence of search_for."
      },
      {
        "name": "starting_at",
        "description": "[ OPTIONAL - 1 by default ] - The character within text_to_search at which to start the search."
      }
    ]
  },
  {
    "type": "Text",
    "name": "SEARCHB",
    "syntax": "SEARCHB(search_for, text_to_search, [starting_at])",
    "description": "Returns the position at which a string is first found within text counting each double-character as 2.",
    "link": "https://support.google.com/docs/answer/3295923",
    "notes": [
      "If search_for is not found, the #VALUE! error value is returned.",
      "Ensure that search_for and text_to_search are not supplied in reverse order, or the #VALUE! error will likely be returned. The arguments are supplied in a different order than other text functions such as SPLIT and SUBSTITUTE.",
      "It's recommended to use a function such as IFERROR to check for cases when there aren't matches to the search.",
      "You can use the wildcard characters: question mark (?) and asterisk (*), in search_for. A question mark matches any single character; an asterisk matches any sequence of characters. If you want to find an actual question mark or asterisk, type a tilde (~) before the character, or see FINDB.",
      "Use SEARCH for standard character sets, and SEARCHB for double-byte character sets such as Japanese, Chinese (Simplified), Chinese (Traditional), and Korean."
    ],
    "sampleUsage": ["SEARCHB(\"新\", \"农历新年\", 2)"],
    "related": [
      "SEARCH",
      "REPLACE",
      "REGEXREPLACE",
      "REGEXMATCH",
      "SUBSTITUTE",
      "SPLIT",
      "FIND",
      "FINDB"
    ],
    "syntaxVariables": [
      {
        "name": "search_for",
        "description": "The string to look for within text_to_search."
      },
      {
        "name": "text_to_search",
        "description": "The text to search for the first occurrence of search_for."
      },
      {
        "name": "starting_at",
        "description": "[ OPTIONAL - 1 by default ] - The character position within text_to_search at which to start the search."
      }
    ]
  },
  {
    "type": "Text",
    "name": "SPLIT",
    "syntax": "SPLIT(text, delimiter, [split_by_each], [remove_empty_text])",
    "description": "Divides text around a specified character or string, and puts each fragment into a separate cell in the row.",
    "link": "https://support.google.com/docs/answer/3094136",
    "notes": [
      "Note that the character or characters to split the string around will not be contained in the result themselves."
    ],
    "sampleUsage": [
      "SPLIT(\"1,2,3\", \",\")",
      "SPLIT(\"Alas, poor Yorick\",\" \")",
      "SPLIT(A1, \",\")"
    ],
    "related": ["CONCATENATE"],
    "syntaxVariables": [
      { "name": "text", "description": "The text to divide." },
      {
        "name": "delimiter",
        "description": "The character or characters to use to split text.\n\n    \n      By default, each character in delimiter is considered individually, e.g. if delimiter is \"the\", then text is divided around the characters \"t\", \"h\", and \"e\". Set split_by_each to FALSE to turn off this behavior."
      },
      {
        "name": "split_by_each",
        "description": "[ OPTIONAL - TRUE by default ] - Whether or not to divide text around each character contained in delimiter."
      },
      {
        "name": "remove_empty_text",
        "description": "  - [ OPTIONAL - TRUE by default ] - Whether or not to remove empty text messages from the split results. The default behavior is to treat consecutive delimiters as one (if TRUE). If FALSE, empty cells values are added between consecutive delimiters."
      }
    ]
  },
  {
    "type": "Text",
    "name": "SUBSTITUTE",
    "syntax": "SUBSTITUTE(text_to_search, search_for, replace_with, [occurrence_number])",
    "description": "Replaces existing text with new text in a string.",
    "link": "https://support.google.com/docs/answer/3094215",
    "notes": [
      "SUBSTITUTE can be used to replace one or all instances of a string within text_to_search. It cannot be used to replace multiple, but not all instances within a single call.",
      "This function returns text as the output. If a number is desired, try using the VALUE function in conjunction with this function."
    ],
    "sampleUsage": [
      "SUBSTITUTE(\"search for it\",\"search for\",\"Google\")",
      "SUBSTITUTE(A2,\"new york\",\"New York\")",
      "SUBSTITUTE(\"January 2, 2012\",2,3,1)"
    ],
    "related": ["TEXT", "REPLACE", "VALUE"],
    "syntaxVariables": [
      {
        "name": "text_to_search",
        "description": "The text within which to search and replace."
      },
      {
        "name": "search_for",
        "description": "The string to search for within text_to_search.\n\n    \n      search_for will match parts of words as well as whole words; therefore a search for \"vent\" will also replace text within \"eventual\"."
      },
      {
        "name": "replace_with",
        "description": "The string that will replace search_for."
      },
      {
        "name": "occurrence_number",
        "description": "[ OPTIONAL ] - The instance of search_for within text_to_search to replace with replace_with. By default, all occurrences of search_for are replaced; however, if occurrence_number is specified, only the indicated instance of search_for is replaced."
      }
    ]
  },
  {
    "type": "Text",
    "name": "T",
    "syntax": "T(value)",
    "description": "Returns string arguments as text.",
    "link": "https://support.google.com/docs/answer/3094138",
    "notes": [
      "This function is rarely necessary as Google Sheets automatically converts between most formats appropriately. It is provided primarily for compatibility with formulas used in other spreadsheet packages."
    ],
    "sampleUsage": ["T(A2)", "T(\"cat\")"],
    "related": ["N"],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The argument to be converted to text.\n\n    \n      \n        If value is text, T returns value.\n      \n      \n        If value is a reference to a cell containing text, T returns the contents of value.\n      \n      \n        If value is an error or a cell containing an error, T returns the error.\n      \n      \n        Otherwise, T returns an empty string."
      }
    ]
  },
  {
    "type": "Text",
    "name": "TEXT",
    "syntax": "TEXT(number, format)",
    "description": "Converts a number into text according to a specified format.",
    "link": "https://support.google.com/docs/answer/3094139",
    "notes": [
      "The format argument to TEXT cannot contain an asterisk (*).",
      "TEXT does not support the ? pattern in Google Sheets.",
      "TEXT does not support fractional format patterns.",
      "TEXT supports the following date and time patterns:\n\n    \n      \n        d for the day of the month as one or two digits.\n      \n      \n        dd for the day of the month as two digits.\n      \n      \n        ddd for the short name of the day of the week.\n      \n      \n        dddd for the full name of the day of the week.\n      \n      \n        m for the month of the year as one or two digits or the number of minutes in a time. Month will be used unless this code is provided with hours or seconds as part of a time.\n      \n      \n        mm for the month of the year as two digits or the number of minutes in a time. Month will be used unless this code is provided with hours or seconds as part of a time.\n      \n      \n        mmm for the short name of the month of the year.\n      \n      \n        mmmm for the full name of the month of the year.\n      \n      \n        mmmmm for the first letter in the month of the year.\n      \n      \n        yy for the year as two digits.\n      \n      \n        yyyy for the year as four digits.\n      \n      \n        HH for the hour on a 24-hour clock.\n      \n      \n        hh for the hour on a 12-hour clock.\n      \n      \n        ss for the seconds in a time.\n      \n      \n        ss.000 for milliseconds in a time.\n      \n      \n        AM/PM for displaying hours based on a 12-hour clock and showing AM or PM depending on the time of day.",
      "d for the day of the month as one or two digits.",
      "dd for the day of the month as two digits.",
      "ddd for the short name of the day of the week.",
      "dddd for the full name of the day of the week.",
      "m for the month of the year as one or two digits or the number of minutes in a time. Month will be used unless this code is provided with hours or seconds as part of a time.",
      "mm for the month of the year as two digits or the number of minutes in a time. Month will be used unless this code is provided with hours or seconds as part of a time.",
      "mmm for the short name of the month of the year.",
      "mmmm for the full name of the month of the year.",
      "mmmmm for the first letter in the month of the year.",
      "yy for the year as two digits.",
      "yyyy for the year as four digits.",
      "HH for the hour on a 24-hour clock.",
      "hh for the hour on a 12-hour clock.",
      "ss for the seconds in a time.",
      "ss.000 for milliseconds in a time.",
      "AM/PM for displaying hours based on a 12-hour clock and showing AM or PM depending on the time of day.",
      "Note that the date/time patterns and # or 0 cannot be mixed."
    ],
    "sampleUsage": [
      "TEXT(1.23,\"$0.00\")",
      "TEXT(A2,\"#.###\")",
      "TEXT(24,\"#.0?\")",
      "TEXT(DATE(1969,7,20),\"yyyy-MM\")"
    ],
    "related": ["T", "FIXED", "DOLLAR"],
    "syntaxVariables": [
      {
        "name": "number",
        "description": "The number, date, or time to format."
      },
      {
        "name": "format",
        "description": "The pattern by which to format the number, enclosed in quotation marks.\n\n    \n      \n        0 forces display of zeros if a number has fewer digits than the format specifies. For example, TEXT(12.3,\"000.00\") produces 012.30. Numbers which have more digits to the right of the decimal point than the pattern are rounded to the indicated number of places. For example, TEXT(12.305,\"00.00\") results in 12.31.\n      \n      \n        # is similar to 0 but does not force the display of zeros on either side of the decimal point. For example, TEXT(12.3,\"###.##\") produces 12.3."
      }
    ]
  },
  {
    "type": "Text",
    "name": "TEXTJOIN",
    "syntax": "TEXTJOIN(delimiter, ignore_empty, text1, [text2], …)",
    "description": "Combines the text from multiple strings and/or arrays, with a specifiable delimiter separating the different texts.",
    "link": "https://support.google.com/docs/answer/7013992",
    "notes": [],
    "sampleUsage": [
      "TEXTJOIN(“ “, TRUE, “hello”, “world”)",
      "TEXTJOIN(“, ”, FALSE, A1:A5)"
    ],
    "related": ["JOIN", "CONCATENATE"],
    "syntaxVariables": [
      {
        "name": "delimiter",
        "description": "A string, possibly empty, or a reference to a valid string. If empty, text will be simply concatenated."
      },
      {
        "name": "ignore_empty",
        "description": "A boolean; if TRUE, empty cells selected in the text arguments won't be included in the result."
      },
      {
        "name": "text1",
        "description": "Any text item. This could be a string, or an array of strings in a range."
      },
      {
        "name": "text2, ... [OPTIONAL]",
        "description": "Additional text item(s)."
      }
    ]
  },
  {
    "type": "Text",
    "name": "TRIM",
    "syntax": "TRIM(text)",
    "description": "Removes leading and trailing spaces in a specified string.",
    "link": "https://support.google.com/docs/answer/3094140",
    "notes": [
      "Google Sheets trims text input into cells by default.",
      "It is important to use TRIM when text is used in formulas or data validation because spaces in front of or after the text are significant.",
      "TRIM removes all spaces in a text string, leaving just a single space between words.",
      "Whitespace or non-breaking space will not be trimmed."
    ],
    "sampleUsage": ["TRIM(\" lorem ipsum\")", "TRIM(A2)"],
    "related": ["SUBSTITUTE", "REPLACE"],
    "syntaxVariables": [
      {
        "name": "text",
        "description": "The string or reference to a cell containing a string to be trimmed."
      }
    ]
  },
  {
    "type": "Text",
    "name": "UNICHAR",
    "syntax": "UNICHAR(number)",
    "description": "Returns the Unicode character for a number. Learn more.",
    "link": "https://support.google.com/docs/answer/9369024",
    "notes": [
      "UNICODE: The UNICODE function returns the decimal Unicode value of the first character of the text."
    ],
    "sampleUsage": [
      "UNICHAR(number)",
      "Example 1: UNICHAR(68) returns D",
      "Example 2: UNICHAR(307) returns \\u0133, which may appear as ĳ",
      "UNICHAR(68)"
    ],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "If number is 0, the method returns a #VALUE error."
      },
      {
        "name": "",
        "description": "If the number does not have a Unicode character, the method returns a #VALUE error."
      },
      {
        "name": "",
        "description": "It is possible that the method’s output changes overtime as the Unicode character set is refined."
      }
    ]
  },
  {
    "type": "Text",
    "name": "UNICODE",
    "syntax": "UNICODE(text)",
    "description": "Returns the decimal Unicode value of the first character of the text.",
    "link": "https://support.google.com/docs/answer/9149523",
    "notes": [],
    "sampleUsage": ["UNICODE"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "The UNICODE function will only work properly if the input string is not empty and the first character has a Unicode representation."
      },
      {
        "name": "",
        "description": "Numbers may be passed directly into the UNICODE function and will be parsed as a string."
      }
    ]
  },
  {
    "type": "Text",
    "name": "UPPER",
    "syntax": "UPPER(text)",
    "description": "Converts a specified string to uppercase.",
    "link": "https://support.google.com/docs/answer/3094219",
    "notes": [],
    "sampleUsage": ["UPPER(\"lorem ipsum\")", "UPPER(A2)"],
    "related": ["PROPER", "LOWER"],
    "syntaxVariables": [
      { "name": "text", "description": "The string to convert to uppercase." }
    ]
  },
  {
    "type": "Text",
    "name": "VALUE",
    "syntax": "VALUE(text)",
    "description": "Converts a string in any of the date, time or number formats that Google Sheets understands into a number.",
    "link": "https://support.google.com/docs/answer/3094220",
    "notes": [
      "VALUE returns a pure number even if the argument to the function was interpreted as a date. For example, =VALUE(\"01/01/2012\") by default will be displayed as 40909."
    ],
    "sampleUsage": [
      "VALUE(\"123\")",
      "VALUE(\"7/20/1969\")",
      "VALUE(\"12:00:00\")"
    ],
    "related": ["TEXT", "N"],
    "syntaxVariables": [
      {
        "name": "text",
        "description": "The string containing the value to be converted."
      }
    ]
  },
  {
    "type": "Database",
    "name": "DAVERAGE",
    "syntax": "DAVERAGE(database, field, criteria)",
    "description": "Returns the average of a set of values selected from a database table-like array or range using a SQL-like query.",
    "link": "https://support.google.com/docs/answer/3094144",
    "notes": [
      "Detailed information about database functions and constructing queries around criteria can be found in the Database Functions help article."
    ],
    "sampleUsage": [
      "DAVERAGE(A2:F20,G2,A22:D23)",
      "DAVERAGE(A2:F20,\"price\",{\"Ticker\";\"Google\"})"
    ],
    "related": [
      "DVARP",
      "DVAR",
      "DSUM",
      "DSTDEVP",
      "DSTDEV",
      "DPRODUCT",
      "DMIN",
      "DMAX",
      "DGET",
      "DCOUNTA",
      "DCOUNT",
      "AVERAGE"
    ],
    "syntaxVariables": [
      {
        "name": "database",
        "description": "The array or range containing the data to consider, structured in such a way that the first row contains the labels for each column's values."
      },
      {
        "name": "field",
        "description": "Indicates which column in database contains the values to be extracted and operated on.\n\n    \n      field may either be a text label corresponding to a column header in the first row of database or a numeric index indicating which column to consider, where the first column has the value 1."
      },
      {
        "name": "criteria",
        "description": "An array or range containing zero or more criteria to filter the database values by before operating."
      }
    ]
  },
  {
    "type": "Database",
    "name": "DCOUNT",
    "syntax": "DCOUNT(database, field, criteria)",
    "description": "Counts numeric values selected from a database table-like array or range using a SQL-like query.",
    "link": "https://support.google.com/docs/answer/3094222",
    "notes": [
      "Detailed information about database functions and constructing queries around criteria can be found in the Database Functions help article."
    ],
    "sampleUsage": [
      "DCOUNT(A2:F20,G2,A22:D23)",
      "DCOUNT(A2:F20,\"price\",{\"Ticker\";\"Google\"})"
    ],
    "related": [
      "DVARP",
      "DVAR",
      "DSUM",
      "DSTDEVP",
      "DSTDEV",
      "DPRODUCT",
      "DMIN",
      "DMAX",
      "DGET",
      "DCOUNTA",
      "DAVERAGE",
      "COUNT"
    ],
    "syntaxVariables": [
      {
        "name": "database",
        "description": "The array or range containing the data to consider, structured in such a way that the first row contains the labels for each column's values."
      },
      {
        "name": "field",
        "description": "Indicates which column in database contains the values to be extracted and operated on.\n\n    \n      field may either be a text label corresponding to a column header in the first row of database or a numeric index indicating which column to consider, where the first column has the value 1."
      },
      {
        "name": "criteria",
        "description": "An array or range containing zero or more criteria to filter the database values by before operating."
      }
    ]
  },
  {
    "type": "Database",
    "name": "DCOUNTA",
    "syntax": "DCOUNTA(database, field, criteria)",
    "description": "Counts values, including text, selected from a database table-like array or range using a SQL-like query.",
    "link": "https://support.google.com/docs/answer/3094147",
    "notes": [
      "Detailed information about database functions and constructing queries around criteria can be found in the Database Functions help article."
    ],
    "sampleUsage": [
      "DCOUNTA(A2:F20,G2,A22:D23)",
      "DCOUNTA(A2:F20,\"price\",{\"Ticker\";\"Google\"})"
    ],
    "related": [
      "DVARP",
      "DVAR",
      "DSUM",
      "DSTDEVP",
      "DSTDEV",
      "DPRODUCT",
      "DMIN",
      "DMAX",
      "DGET",
      "DCOUNT",
      "DAVERAGE",
      "COUNTA"
    ],
    "syntaxVariables": [
      {
        "name": "database",
        "description": "The array or range containing the data to consider, structured in such a way that the first row contains the labels for each column's values."
      },
      {
        "name": "field",
        "description": "Indicates which column in database contains the values to be extracted and operated on.\n\n    \n      field may either be a text label corresponding to a column header in the first row of database or a numeric index indicating which column to consider, where the first column has the value 1."
      },
      {
        "name": "criteria",
        "description": "An array or range containing zero or more criteria to filter the database values by before operating."
      }
    ]
  },
  {
    "type": "Database",
    "name": "DGET",
    "syntax": "DGET(database, field, criteria)",
    "description": "Returns a single value from a database table-like array or range using a SQL-like query.",
    "link": "https://support.google.com/docs/answer/3094148",
    "notes": [
      "Detailed information about database functions and constructing queries around criteria can be found in the Database Functions help article.",
      "DGET is the only database function which does not aggregate - it will return an error if the filtered data has either no matching elements or more than one matching element."
    ],
    "sampleUsage": [
      "DGET(A2:F20,G2,A22:D23)",
      "DGET(A2:F20,\"price\",{\"Ticker\";\"Google\"})"
    ],
    "related": [
      "VLOOKUP",
      "DVARP",
      "DVAR",
      "DSUM",
      "DSTDEVP",
      "DSTDEV",
      "DPRODUCT",
      "DMIN",
      "DMAX",
      "DCOUNTA",
      "DCOUNT",
      "DAVERAGE"
    ],
    "syntaxVariables": [
      {
        "name": "database",
        "description": "The array or range containing the data to consider, structured in such a way that the first row contains the labels for each column's values."
      },
      {
        "name": "field",
        "description": "Indicates which column in database contains the values to be extracted and operated on.\n\n    \n      field may either be a text label corresponding to a column header in the first row of database or a numeric index indicating which column to consider, where the first column has the value 1."
      },
      {
        "name": "criteria",
        "description": "An array or range containing zero or more criteria to filter the database values by before operating."
      }
    ]
  },
  {
    "type": "Database",
    "name": "DMAX",
    "syntax": "DMAX(database, field, criteria)",
    "description": "Returns the maximum value selected from a database table-like array or range using a SQL-like query.",
    "link": "https://support.google.com/docs/answer/3094227",
    "notes": [
      "Detailed information about database functions and constructing queries around criteria can be found in the Database Functions help article."
    ],
    "sampleUsage": [
      "DMAX(A2:F20,G2,A22:D23)",
      "DMAX(A2:F20,\"price\",{\"Ticker\";\"Google\"})"
    ],
    "related": [
      "MAX",
      "DVARP",
      "DVAR",
      "DSUM",
      "DSTDEVP",
      "DSTDEV",
      "DPRODUCT",
      "DMIN",
      "DGET",
      "DCOUNTA",
      "DCOUNT",
      "DAVERAGE"
    ],
    "syntaxVariables": [
      {
        "name": "database",
        "description": "The array or range containing the data to consider, structured in such a way that the first row contains the labels for each column's values."
      },
      {
        "name": "field",
        "description": "Indicates which column in database contains the values to be extracted and operated on.\n\n    \n      field may either be a text label corresponding to a column header in the first row of database or a numeric index indicating which column to consider, where the first column has the value 1."
      },
      {
        "name": "criteria",
        "description": "An array or range containing zero or more criteria to filter the database values by before operating."
      }
    ]
  },
  {
    "type": "Database",
    "name": "DMIN",
    "syntax": "DMIN(database, field, criteria)",
    "description": "Returns the minimum value selected from a database table-like array or range using a SQL-like query.",
    "link": "https://support.google.com/docs/answer/3094149",
    "notes": [
      "Detailed information about database functions and constructing queries around criteria can be found in the Database Functions help article."
    ],
    "sampleUsage": [
      "DMIN(A2:F20,G2,A22:D23)",
      "DMIN(A2:F20,\"price\",{\"Ticker\";\"Google\"})"
    ],
    "related": [
      "MIN",
      "DVARP",
      "DVAR",
      "DSUM",
      "DSTDEVP",
      "DSTDEV",
      "DPRODUCT",
      "DMAX",
      "DGET",
      "DCOUNTA",
      "DCOUNT",
      "DAVERAGE"
    ],
    "syntaxVariables": [
      {
        "name": "database",
        "description": "The array or range containing the data to consider, structured in such a way that the first row contains the labels for each column's values."
      },
      {
        "name": "field",
        "description": "Indicates which column in database contains the values to be extracted and operated on.\n\n    \n      field may either be a text label corresponding to a column header in the first row of database or a numeric index indicating which column to consider, where the first column has the value 1."
      },
      {
        "name": "criteria",
        "description": "An array or range containing zero or more criteria to filter the database values by before operating."
      }
    ]
  },
  {
    "type": "Database",
    "name": "DPRODUCT",
    "syntax": "DPRODUCT(database, field, criteria)",
    "description": "Returns the product of values selected from a database table-like array or range using a SQL-like query.",
    "link": "https://support.google.com/docs/answer/3094230",
    "notes": [
      "Detailed information about database functions and constructing queries around criteria can be found in the Database Functions help article."
    ],
    "sampleUsage": [
      "DPRODUCT(A2:F20,G2,A22:D23)",
      "DPRODUCT(A2:F20,\"price\",{\"Ticker\";\"Google\"})"
    ],
    "related": [
      "PRODUCT",
      "DVARP",
      "DVAR",
      "DSUM",
      "DSTDEVP",
      "DSTDEV",
      "DMIN",
      "DMAX",
      "DGET",
      "DCOUNTA",
      "DCOUNT",
      "DAVERAGE"
    ],
    "syntaxVariables": [
      {
        "name": "database",
        "description": "The array or range containing the data to consider, structured in such a way that the first row contains the labels for each column's values."
      },
      {
        "name": "field",
        "description": "Indicates which column in database contains the values to be extracted and operated on.\n\n    \n      field may either be a text label corresponding to a column header in the first row of database or a numeric index indicating which column to consider, where the first column has the value 1."
      },
      {
        "name": "criteria",
        "description": "An array or range containing zero or more criteria to filter the database values by before operating."
      }
    ]
  },
  {
    "type": "Database",
    "name": "DSTDEV",
    "syntax": "DSTDEV(database, field, criteria)",
    "description": "Returns the standard deviation of a population sample selected from a database table-like array or range using a SQL-like query.",
    "link": "https://support.google.com/docs/answer/3094151",
    "notes": [
      "Detailed information about database functions and constructing queries around criteria can be found in the Database Functions help article."
    ],
    "sampleUsage": [
      "DSTDEV(A2:F20,G2,A22:D23)",
      "DSTDEV(A2:F20,\"price\",{\"Ticker\";\"Google\"})"
    ],
    "related": [
      "STDEV",
      "DVARP",
      "DVAR",
      "DSUM",
      "DSTDEVP",
      "DPRODUCT",
      "DMIN",
      "DMAX",
      "DGET",
      "DCOUNTA",
      "DCOUNT",
      "DAVERAGE"
    ],
    "syntaxVariables": [
      {
        "name": "database",
        "description": "The array or range containing the data to consider, structured in such a way that the first row contains the labels for each column's values."
      },
      {
        "name": "field",
        "description": "Indicates which column in database contains the values to be extracted and operated on.\n\n    \n      field may either be a text label corresponding to a column header in the first row of database or a numeric index indicating which column to consider, where the first column has the value 1."
      },
      {
        "name": "criteria",
        "description": "An array or range containing zero or more criteria to filter the database values by before operating."
      }
    ]
  },
  {
    "type": "Database",
    "name": "DSTDEVP",
    "syntax": "DSTDEVP(database, field, criteria)",
    "description": "Returns the standard deviation of an entire population selected from a database table-like array or range using a SQL-like query.",
    "link": "https://support.google.com/docs/answer/3094280",
    "notes": [
      "Detailed information about database functions and constructing queries around criteria can be found in the Database Functions help article."
    ],
    "sampleUsage": [
      "DSTDEVP(A2:F20,G2,A22:D23)",
      "DSTDEVP(A2:F20,\"price\",{\"Ticker\";\"Google\"})"
    ],
    "related": [
      "STDEVP",
      "DVARP",
      "DVAR",
      "DSUM",
      "DSTDEV",
      "DPRODUCT",
      "DMIN",
      "DMAX",
      "DGET",
      "DCOUNTA",
      "DCOUNT",
      "DAVERAGE"
    ],
    "syntaxVariables": [
      {
        "name": "database",
        "description": "The array or range containing the data to consider, structured in such a way that the first row contains the labels for each column's values."
      },
      {
        "name": "field",
        "description": "Indicates which column in database contains the values to be extracted and operated on.\n\n    \n      field may either be a text label corresponding to a column header in the first row of database or a numeric index indicating which column to consider, where the first column has the value 1."
      },
      {
        "name": "criteria",
        "description": "An array or range containing zero or more criteria to filter the database values by before operating."
      }
    ]
  },
  {
    "type": "Database",
    "name": "DSUM",
    "syntax": "DSUM(database, field, criteria)",
    "description": "Returns the sum of values selected from a database table-like array or range using a SQL-like query. Learn more",
    "link": "https://support.google.com/docs/answer/3094281",
    "notes": [
      "Detailed information about database functions and constructing queries around criteria can be found in the Database Functions help article."
    ],
    "sampleUsage": [
      "DSUM(A2:F20,G2,A22:D23)",
      "DSUM(A2:F20,\"price\",{\"Ticker\";\"Google\"})"
    ],
    "related": [
      "SUM",
      "DVARP",
      "DVAR",
      "DSTDEVP",
      "DSTDEV",
      "DPRODUCT",
      "DMIN",
      "DMAX",
      "DGET",
      "DCOUNTA",
      "DCOUNT",
      "DAVERAGE"
    ],
    "syntaxVariables": [
      {
        "name": "database",
        "description": "The array or range containing the data to consider, structured in such a way that the first row contains the labels for each column's values."
      },
      {
        "name": "field",
        "description": "Indicates which column in database contains the values to be extracted and operated on.\n\n    \n      field may either be a text label corresponding to a column header in the first row of database or a numeric index indicating which column to consider, where the first column has the value 1."
      },
      {
        "name": "criteria",
        "description": "An array or range containing zero or more criteria to filter the database values by before operating."
      }
    ]
  },
  {
    "type": "Database",
    "name": "DVAR",
    "syntax": "DVAR(database, field, criteria)",
    "description": "Returns the variance of a population sample selected from a database table-like array or range using a SQL-like query.",
    "link": "https://support.google.com/docs/answer/3094236",
    "notes": [
      "Detailed information about database functions and constructing queries around criteria can be found in the Database Functions help article."
    ],
    "sampleUsage": [
      "DVAR(A2:F20,G2,A22:D23)",
      "DVAR(A2:F20,\"price\",{\"Ticker\";\"Google\"})"
    ],
    "related": [
      "VAR",
      "DVARP",
      "DSUM",
      "DSTDEVP",
      "DSTDEV",
      "DPRODUCT",
      "DMIN",
      "DMAX",
      "DGET",
      "DCOUNTA",
      "DCOUNT",
      "DAVERAGE"
    ],
    "syntaxVariables": [
      {
        "name": "database",
        "description": "The array or range containing the data to consider, structured in such a way that the first row contains the labels for each column's values."
      },
      {
        "name": "field",
        "description": "Indicates which column in database contains the values to be extracted and operated on.\n\n    \n      field may either be a text label corresponding to a column header in the first row of database or a numeric index indicating which column to consider, where the first column has the value 1."
      },
      {
        "name": "criteria",
        "description": "An array or range containing zero or more criteria to filter the database values by before operating."
      }
    ]
  },
  {
    "type": "Database",
    "name": "DVARP",
    "syntax": "DVARP(database, field, criteria)",
    "description": "Returns the variance of an entire population selected from a database table-like array or range using a SQL-like query.",
    "link": "https://support.google.com/docs/answer/3094238",
    "notes": [
      "Detailed information about database functions and constructing queries around criteria can be found in the Database Functions help article."
    ],
    "sampleUsage": [
      "DVARP(A2:F20,G2,A22:D23)",
      "DVARP(A2:F20,\"price\",{\"Ticker\";\"Google\"})"
    ],
    "related": [
      "VARP",
      "DVAR",
      "DSUM",
      "DSTDEVP",
      "DSTDEV",
      "DPRODUCT",
      "DMIN",
      "DMAX",
      "DGET",
      "DCOUNTA",
      "DCOUNT",
      "DAVERAGE"
    ],
    "syntaxVariables": [
      {
        "name": "database",
        "description": "The array or range containing the data to consider, structured in such a way that the first row contains the labels for each column's values."
      },
      {
        "name": "field",
        "description": "Indicates which column in database contains the values to be extracted and operated on.\n\n    \n      field may either be a text label corresponding to a column header in the first row of database or a numeric index indicating which column to consider, where the first column has the value 1."
      },
      {
        "name": "criteria",
        "description": "An array or range containing zero or more criteria to filter the database values by before operating."
      }
    ]
  },
  {
    "type": "Parser",
    "name": "CONVERT",
    "syntax": "CONVERT(value, start_unit, end_unit)",
    "description": "Converts a numeric value to a different unit of measure.",
    "link": "https://support.google.com/docs/answer/6055540",
    "notes": [
      "The following list outlines the available unit conversions by category:\n\n    \n      \n        Weight - u, grain, g, ozm, lbm, stone, sg, cwt, uk_cwt, ton, uk_ton\n      \n      \n        Distance - ang, Picapt, pica, in, ft, yd, m, ell, mi, survey_mi Nmi, ly, parsec\n      \n      \n        Time - sec, min, hr, day, yr\n      \n      \n        Pressure - Pa, mmHg, Torr, psi, atm\n      \n      \n        Force - dyn, pond, N, lbf\n      \n      \n        Energy - eV, e, J, flb, c, cal, BTU, Wh, HPh\n      \n      \n        Power - W, PS, HP\n      \n      \n        Magnetism - ga, T\n      \n      \n        Temperature - C, F, K, Rank, Reau\n      \n      \n        Volume - ang^3, Picapt^3, tsp, tspm, tbs, in^3, oz, cup, pt, uk_pt, qt, l, uk_qt, gal, uk_gal, ft^3, bushel, barrel, yd^3, m^3, MTON, GRT, mi^3, Nmi^3, ly^3\n      \n      \n        Area - ang^2, Picapt^2, in^2, ft^2, yd^2, m^2,ar, Morgen,uk_acre, us_acre, ha, mi^2, Nmi^2, ly^2\n      \n      \n        Information - bit, byte\n      \n      \n        Speed - m/hr, mph, kn, admkn, m/s",
      "Weight - u, grain, g, ozm, lbm, stone, sg, cwt, uk_cwt, ton, uk_ton",
      "Distance - ang, Picapt, pica, in, ft, yd, m, ell, mi, survey_mi Nmi, ly, parsec",
      "Time - sec, min, hr, day, yr",
      "Pressure - Pa, mmHg, Torr, psi, atm",
      "Force - dyn, pond, N, lbf",
      "Energy - eV, e, J, flb, c, cal, BTU, Wh, HPh",
      "Power - W, PS, HP",
      "Magnetism - ga, T",
      "Temperature - C, F, K, Rank, Reau",
      "Volume - ang^3, Picapt^3, tsp, tspm, tbs, in^3, oz, cup, pt, uk_pt, qt, l, uk_qt, gal, uk_gal, ft^3, bushel, barrel, yd^3, m^3, MTON, GRT, mi^3, Nmi^3, ly^3",
      "Area - ang^2, Picapt^2, in^2, ft^2, yd^2, m^2,ar, Morgen,uk_acre, us_acre, ha, mi^2, Nmi^2, ly^2",
      "Information - bit, byte",
      "Speed - m/hr, mph, kn, admkn, m/s",
      "The use of CONVERT between two different categories of start_unit and  end_unit will result in an error. For example, CONVERT(13.2,\"ft\",\"C\") would result in an error as a result of an attempted conversion from distance units to temperature units."
    ],
    "sampleUsage": [
      "CONVERT(5.1, \"g\", \"kg\")",
      "CONVERT(32, \"C\", \"F\")",
      "CONVERT(35.7, \"in^2\", \"m^2\")",
      "CONVERT(A1, A2, A3)",
      "CONVERT(value, start_unit, end_unit)",
      "CONVERT",
      "start_unit"
    ],
    "related": ["DATE", "DATEVALUE", "TIME", "TIMEVALUE"],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "the numeric value in start_unit to convert to end_unit"
      },
      {
        "name": "start_unit",
        "description": "The starting unit, the unit currently assigned to value ."
      },
      {
        "name": "end_unit",
        "description": "The unit of measure into which to convert value."
      }
    ]
  },
  {
    "type": "Parser",
    "name": "TO_DATE",
    "syntax": "TO_DATE(value)",
    "description": "Converts a provided number to a date.",
    "link": "https://support.google.com/docs/answer/3094239",
    "notes": [
      "TO_DATE does not autoconvert number formats in the same way as direct entry into cells. Therefore, TO_DATE(10/10/2000) is interpreted as TO_DATE(0.0005), the quotient of 10 divided by 10 divided by 2000.",
      "TO_DATE is not as commonly used as DATE, which takes a year, month, and day in numeric format as inputs.",
      "TO_DATE is the inverse of N as applied to a date, and equivalent to applying Format  Number  Date time from the menu bar."
    ],
    "sampleUsage": ["TO_DATE(25405)", "TO_DATE(A2)", "TO_DATE(40826.4375)"],
    "related": [
      "DATE",
      "TO_TEXT",
      "TO_PURE_NUMBER",
      "TO_PERCENT",
      "TO_DOLLARS",
      "N"
    ],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The argument or reference to a cell to be converted to a date.\n\n    \n      \n        If value is a number or a reference to a cell containing a numeric value, TO_DATE returns value converted to a date, interpreting value as number of days since December 30, 1899.\n\n        \n          Negative values are interpreted as days before this date, and fractional values indicate time of day past midnight.\n        \n      \n      \n        If value is not a number or a reference to a cell containing a numeric value, TO_DATE returns value without modification."
      }
    ]
  },
  {
    "type": "Parser",
    "name": "TO_DOLLARS",
    "syntax": "TO_DOLLARS(value)",
    "description": "Converts a provided number to a dollar value.",
    "link": "https://support.google.com/docs/answer/3094241",
    "notes": [
      "Because dates and percentages are backed by numbers, TO_DOLLARS will convert them successfully. However, these conversions are not typically meaningful.",
      "TO_DOLLARS is equivalent to applying Format -> Number -> Currency from the menu bar.",
      "TO_DOLLARS differs from the related function DOLLAR in that DOLLAR outputs text rather than applying a cell format to a number.",
      "TO_DOLLARS does not convert from other currencies into US Dollars. Please use the GoogleFinance function to convert currencies at current exchange rates."
    ],
    "sampleUsage": ["TO_DOLLARS(A2)", "TO_DOLLARS(40826.43)"],
    "related": [
      "TO_TEXT",
      "TO_PURE_NUMBER",
      "TO_PERCENT",
      "TO_DATE",
      "N",
      "GOOGLEFINANCE",
      "DOLLAR"
    ],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The argument or reference to a cell to be converted to a dollar value.\n\n    \n      \n        If value is not a number or a reference to a cell containing a numeric value, TO_DOLLARS returns value without modification."
      }
    ]
  },
  {
    "type": "Parser",
    "name": "TO_PERCENT",
    "syntax": "TO_PERCENT(value)",
    "description": "Converts a provided number to a percentage.",
    "link": "https://support.google.com/docs/answer/3094284",
    "notes": [
      "Because dates and percentages are both numbers, TO_PERCENT will convert dates to percentages successfully. However, these conversions are not typically meaningful.",
      "TO_PERCENT is equivalent to clicking Format  Number  Percent from the menu bar."
    ],
    "sampleUsage": ["TO_PERCENT(A2)", "TO_PERCENT(0.40826)"],
    "related": [
      "UNARY_PERCENT",
      "TO_TEXT",
      "TO_PURE_NUMBER",
      "TO_DOLLARS",
      "TO_DATE",
      "N"
    ],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The argument or reference to a cell to be converted to a percentage.\n\n    \n      \n        If value is a number or a reference to a cell containing a numeric value, TO_PERCENT returns value converted to a percentage, with the standard interpretation that 1 = 100%.\n      \n      \n        If value is not a number or a reference to a cell containing a numeric value, TO_PERCENT returns value without modification."
      }
    ]
  },
  {
    "type": "Parser",
    "name": "TO_PURE_NUMBER",
    "syntax": "TO_PURE_NUMBER(value)",
    "description": "Converts a provided date/time, percentage, currency or other formatted numeric value to a pure number without formatting.",
    "link": "https://support.google.com/docs/answer/3094243",
    "notes": [
      "TO_PURE_NUMBER is similar to applying Format -> Number -> Normal from the menu bar, except that the Normal format includes commas denoting thousands, millions, etc.",
      "TO_PURE_NUMBER is similar to N, except that N returns 0 for non-numeric values except for TRUE which returns 1, whereas TO_PURE_NUMBER returns the value passed without modification for all non-numeric types."
    ],
    "sampleUsage": ["TO_PURE_NUMBER(50%)", "TO_PURE_NUMBER(A2)"],
    "related": ["TO_TEXT", "TO_PERCENT", "TO_DOLLARS", "TO_DATE", "N"],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The argument or reference to a cell to be converted to a pure number.\n\n    \n      \n        If value is a number or a reference to a cell containing a numeric value, TO_PURE_NUMBER returns value with all formatting and interpretation removed.\n      \n      \n        If value is not a number or a reference to a cell containing a numeric value, TO_PERCENT returns value without modification."
      }
    ]
  },
  {
    "type": "Parser",
    "name": "TO_TEXT",
    "syntax": "TO_TEXT(value)",
    "description": "Converts a provided numeric value to a text value.",
    "link": "https://support.google.com/docs/answer/3094285",
    "notes": [
      "TO_TEXT is equivalent to prefixing a number with an apostrophe (')"
    ],
    "sampleUsage": ["TO_TEXT(24)", "TO_TEXT(A2)"],
    "related": ["TO_PERCENT", "TO_DOLLARS", "TO_DATE", "N"],
    "syntaxVariables": [
      {
        "name": "value",
        "description": "The argument or reference to a cell to be converted to text.\n\n    \n      \n        If value is a number or a reference to a cell containing a numeric value, TO_TEXT returns value as a string, with existing formatting retained. Currencies appear as currencies, decimals as decimals, percentages as percentages, and dates as dates.\n      \n      \n        If value is not a number or a reference to a cell containing a numeric value, TO_TEXT returns value without modification."
      }
    ]
  },
  {
    "type": "Array",
    "name": "ARRAY_CONSTRAIN",
    "syntax": "ARRAY_CONSTRAIN(input_range, num_rows, num_cols)",
    "description": "Constrains an array result to a specified size.",
    "link": "https://support.google.com/docs/answer/3267036",
    "notes": [
      "Generally used in combination with other functions that return an array result when a fewer number of rows or columns are desired."
    ],
    "sampleUsage": [
      "ARRAY_CONSTRAIN(A1:C10, 2, 3)",
      "ARRAY_CONSTRAIN(SORT(A1:F100, 1, TRUE), 10, 6)"
    ],
    "related": ["ARRAYFORMULA"],
    "syntaxVariables": [
      { "name": "input_range", "description": "The range to constrain." },
      {
        "name": "num_rows",
        "description": "The number of rows the result should contain."
      },
      {
        "name": "num_cols",
        "description": "The number of columns the result should contain"
      }
    ]
  },
  {
    "type": "Array",
    "name": "FREQUENCY",
    "syntax": "FREQUENCY(data, classes)",
    "description": "Calculates the frequency distribution of a one-column array into specified classes.",
    "link": "https://support.google.com/docs/answer/3094286",
    "notes": [
      "The output of FREQUENCY will be a vertical range of size one greater than classes as the final value is the number of elements in data greater than any of the class boundaries."
    ],
    "sampleUsage": ["FREQUENCY(A2:A40,B2:B5)"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "data",
        "description": "The array or range containing the values to be counted."
      },
      {
        "name": "classes",
        "description": "The array or range containing the set of classes.\n\n    \n      classes should be sorted for clarity, but FREQUENCY will sort the values specified internally if they are not and return correct results."
      }
    ]
  },
  {
    "type": "Array",
    "name": "GROWTH",
    "syntax": "GROWTH(known_data_y, [known_data_x], [new_data_x], [b])",
    "description": "Given partial data about an exponential growth trend, fits an ideal exponential growth trend and/or predicts further values.",
    "link": "https://support.google.com/docs/answer/3094287",
    "notes": [],
    "sampleUsage": ["GROWTH(B2:B10,A2:A10)", "GROWTH(B2:B10,A2:A10,A11:A13)"],
    "related": ["TREND", "LOGEST", "LINEST"],
    "syntaxVariables": [
      {
        "name": "known_data_y",
        "description": "The array or range containing dependent (y) values that are already known, used to curve fit an ideal exponential growth curve.\n\n    \n      \n        If known_data_y is a two-dimensional array or range, known_data_x must have the same dimensions or be omitted.\n      \n      \n        If known_data_y is a one-dimensional array or range, known_data_x may represent multiple independent variables in a two-dimensional array or range. I.e. if known_data_y is a single row, each row in known_data_x is interpreted as a separated independent value, and analogously if known_data_y is a single column."
      },
      {
        "name": "known_data_x",
        "description": "[ OPTIONAL - {1,2,3,...} with same length as known_data_y by default ] - The values of the independent variable(s) corresponding with known_data_y.\n\n    \n      If known_data_y is a one-dimensional array or range, known_data_x may represent multiple independent variables in a two-dimensional array or range. I.e. if known_data_y is a single row, each row in known_data_x is interpreted as a separated independent value, and analogously if known_data_y is a single column."
      },
      {
        "name": "new_data_x",
        "description": "[ OPTIONAL - same as known_data_x by default ] - The data points to return the y values for on the ideal curve fit.\n\n    \n      The default behavior is to return the ideal curve fit values for the same x inputs as the existing data for comparison of known y values and their corresponding curve fit estimates."
      },
      {
        "name": "b",
        "description": "[ OPTIONAL - TRUE by default ] - Given a general exponential form of y = b*m^x for a curve fit, calculates b if TRUE or forces b to be 1 and only calculates the m values if FALSE."
      }
    ]
  },
  {
    "type": "Array",
    "name": "LINEST",
    "syntax": "LINEST(known_data_y, [known_data_x], [calculate_b], [verbose])",
    "description": "Given partial data about a linear trend, calculates various parameters about the ideal linear trend using the least-squares method.",
    "link": "https://support.google.com/docs/answer/3094249",
    "notes": [],
    "sampleUsage": [
      "LINEST(B2:B10, A2:A10)",
      "LINEST(B2:B10, A2:A10, FALSE, TRUE)"
    ],
    "related": ["TREND", "LOGEST", "GROWTH"],
    "syntaxVariables": [
      {
        "name": "known_data_y",
        "description": "The array or range containing dependent (y) values that are already known, used to curve fit an ideal linear trend.\n\n    \n      \n        If known_data_y is a two-dimensional array or range, known_data_x must have the same dimensions or be omitted.\n      \n      \n        If known_data_y is a one-dimensional array or range, known_data_x may represent multiple independent variables in a two-dimensional array or range. I.e. if known_data_y is a single row, each row in known_data_x is interpreted as a separated independent value, and analogously if known_data_y is a single column."
      },
      {
        "name": "known_data_x",
        "description": "[ OPTIONAL - {1,2,3,...} with same length as known_data_y by default ] - The values of the independent variable(s) corresponding with known_data_y.\n\n    \n      If known_data_y is a one-dimensional array or range, known_data_x may represent multiple independent variables in a two-dimensional array or range. I.e. if known_data_y is a single row, each row in known_data_x is interpreted as a separated independent value, and analogously if known_data_y is a single column."
      },
      {
        "name": "calculate_b",
        "description": "[ OPTIONAL - TRUE by default ] - Given a linear form of y = m*x+b, calculates the y-intercept (b) if TRUE. Otherwise, forces b to be 0 and only calculates the m values if FALSE, i.e. forces the curve fit to pass through the origin."
      },
      {
        "name": "verbose",
        "description": "[ OPTIONAL - FALSE by default ] - A flag specifying whether to return additional regression statistics or only the linear coefficients and the y-intercept (default).\n\n    \n      \n        If verbose is TRUE, in addition to the set of linear coefficients for each independent variable and the y-intercept, LINEST returns\n\n        \n          \n            The standard error for each coefficient and the intercept,\n          \n          \n            The coefficient of determination (between 0 and 1, where 1 indicates perfect correlation),\n          \n          \n            Standard error for the dependent variable values,\n          \n          \n            The F statistic, or F-observed value indicating whether the observed relationship between dependent and independent variables is random rather than linear,\n          \n          \n            The degrees of freedom, useful in looking up F statistic values in a reference table to estimate a confidence level,\n          \n          \n            The regression sum of squares, and\n          \n          \n            The residual sum of squares."
      }
    ]
  },
  {
    "type": "Array",
    "name": "LOGEST",
    "syntax": "LOGEST(known_data_y, [known_data_x], [b], [verbose])",
    "description": "Given partial data about an exponential growth curve, calculates various parameters about the best fit ideal exponential growth curve.",
    "link": "https://support.google.com/docs/answer/3094251",
    "notes": [
      "The statistics calculated by LOGEST are similar to LINEST but use the linear model ln y = x1 ln m1 + ... + xn ln mn + ln b for each independent variable x1 ... xn. Therefore additional statistics such as the standard error must be compared to the natural logarithms of the m and b values rather than the values themselves."
    ],
    "sampleUsage": [
      "LOGEST(B2:B10,A2:A10)",
      "LOGEST(B2:B10, A2:A10, TRUE, TRUE)"
    ],
    "related": ["TREND", "LINEST", "GROWTH"],
    "syntaxVariables": [
      {
        "name": "known_data_y",
        "description": "The array or range containing dependent (y) values that are already known, used to curve fit an ideal exponential growth curve.\n\n    \n      \n        If known_data_y is a two-dimensional array or range, known_data_x must have the same dimensions or be omitted.\n      \n      \n        If known_data_y is a one-dimensional array or range, known_data_x may represent multiple independent variables in a two-dimensional array or range. I.e. if known_data_y is a single row, each row in known_data_x is interpreted as a separated independent value, and analogously if known_data_y is a single column."
      },
      {
        "name": "known_data_x",
        "description": "[ OPTIONAL - {1,2,3,...} with same length as known_data_y by default ] - The values of the independent variable(s) corresponding with known_data_y.\n\n    \n      If known_data_y is a one-dimensional array or range, known_data_x may represent multiple independent variables in a two-dimensional array or range. I.e. if known_data_y is a single row, each row in known_data_x is interpreted as a separated independent value, and analogously if known_data_y is a single column."
      },
      {
        "name": "b",
        "description": "[ OPTIONAL - TRUE by default ] - Given a general exponential form of y = b*m^x for a curve fit, calculates b if TRUE or forces b to be 1 and only calculates the m values if FALSE."
      },
      {
        "name": "verbose",
        "description": "[ OPTIONAL - FALSE by default ] - A flag specifying whether to return additional regression statistics or only the calculated coefficient and exponents.\n\n    \n      \n        If verbose is TRUE, in addition to the set of exponents for each independent variable and the coefficient b, LOGEST returns\n\n        \n          \n            The standard error for each exponent and the coefficient,\n          \n          \n            The coefficient of determination (between 0 and 1, where 1 indicates perfect correlation),\n          \n          \n            Standard error for the dependent variable values,\n          \n          \n            The F statistic, or F-observed value indicating whether the observed relationship between dependent and independent variables is random rather than exponential,\n          \n          \n            The degrees of freedom, useful in looking up F statistic values in a reference table to estimate a confidence level,\n          \n          \n            The regression sum of squares, and\n          \n          \n            The residual sum of squares."
      }
    ]
  },
  {
    "type": "Array",
    "name": "MDETERM",
    "syntax": "MDETERM(square_matrix)",
    "description": "Returns the matrix determinant of a square matrix specified as an array or range.",
    "link": "https://support.google.com/docs/answer/3094290",
    "notes": [],
    "sampleUsage": [
      "MDETERM(A1:D4)",
      "MDETERM({1,2,3,4;5,6,7,8;9,10,11,12;13,14,15,16})"
    ],
    "related": ["TRANSPOSE", "MMULT", "MINVERSE"],
    "syntaxVariables": [
      {
        "name": "square_matrix",
        "description": "An array or range with an equal number of rows and columns representing a matrix whose determinant will be calculated."
      }
    ]
  },
  {
    "type": "Array",
    "name": "MINVERSE",
    "syntax": "MINVERSE(square_matrix)",
    "description": "Returns the multiplicative inverse of a square matrix specified as an array or range.",
    "link": "https://support.google.com/docs/answer/3094253",
    "notes": [],
    "sampleUsage": [
      "MINVERSE(A1:D4)",
      "MINVERSE({1,0,0,0;0,0,4,0;0,1,1,0;0,0,0,1})"
    ],
    "related": ["TRANSPOSE", "MMULT", "MDETERM"],
    "syntaxVariables": [
      {
        "name": "square_matrix",
        "description": "An array or range with an equal number of rows and columns representing a matrix whose multiplicative inverse will be calculated."
      }
    ]
  },
  {
    "type": "Array",
    "name": "MMULT",
    "syntax": "MMULT(matrix1, matrix2)",
    "description": "Calculates the matrix product of two matrices specified as arrays or ranges.",
    "link": "https://support.google.com/docs/answer/3094292",
    "notes": [
      "As standard in matrix multiplication, the number of columns for matrix1 must equal the number of rows for matrix2"
    ],
    "sampleUsage": ["MMULT(A1:B3,C1:F2)", "MMULT({1,2,3;4,5,6},{7;8;9})"],
    "related": ["TRANSPOSE", "SUMPRODUCT", "MINVERSE", "MDETERM"],
    "syntaxVariables": [
      {
        "name": "matrix1",
        "description": "The first matrix in the matrix multiplication operation, represented as an array or range."
      },
      {
        "name": "matrix2",
        "description": "The second matrix in the matrix multiplication operation, represented as an array or range."
      }
    ]
  },
  {
    "type": "Array",
    "name": "SUMPRODUCT",
    "syntax": "SUMPRODUCT(array1, [array2, ...])",
    "description": "Calculates the sum of the products of corresponding entries in two equal-sized arrays or ranges.",
    "link": "https://support.google.com/docs/answer/3094294",
    "notes": [
      "Matrix multiplication, MMULT, can also be accomplished using a combination of TRANSPOSE and SUMPRODUCT functions."
    ],
    "sampleUsage": [
      "SUMPRODUCT(A2:C5,D2:F5)",
      "SUMPRODUCT({1,2,3,4},{5,6,7,8})"
    ],
    "related": ["TRANSPOSE", "MMULT"],
    "syntaxVariables": [
      {
        "name": "array1",
        "description": "The first array or range whose entries will be multiplied with corresponding entries in the second such array or range."
      },
      {
        "name": "array2, ...",
        "description": "  - [ OPTIONAL - {1,1,1,...} with same length as array1 by default ] - The second array or range whose entries will be multiplied with corresponding entries in the first such array or range."
      }
    ]
  },
  {
    "type": "Array",
    "name": "SUMX2MY2",
    "syntax": "SUMX2MY2(array_x, array_y)",
    "description": "Calculates the sum of the differences of the squares of values in two arrays.",
    "link": "https://support.google.com/docs/answer/3094257",
    "notes": [],
    "sampleUsage": ["SUMX2MY2({1,2,3},{4,5,6})", "SUMX2MY2(A2:A9,B2:B9)"],
    "related": ["SUMXMY2", "SUMX2PY2"],
    "syntaxVariables": [
      {
        "name": "array_x",
        "description": "The array or range of values whose squares will be reduced by the squares of corresponding entries in array_y and added together."
      },
      {
        "name": "array_y",
        "description": "The array or range of values whose squares will be subtracted from the squares of corresponding entries in array_x and added together."
      }
    ]
  },
  {
    "type": "Array",
    "name": "SUMX2PY2",
    "syntax": "SUMX2PY2(array_x, array_y)",
    "description": "Calculates the sum of the sums of the squares of values in two arrays.",
    "link": "https://support.google.com/docs/answer/3094260",
    "notes": [],
    "sampleUsage": ["SUMX2PY2({1,2,3},{4,5,6})", "SUMX2PY2(A2:A9,B2:B9)"],
    "related": ["SUMXMY2", "SUMX2MY2"],
    "syntaxVariables": [
      {
        "name": "array_x",
        "description": "The array or range of values whose squares will be added to the squares of corresponding entries in array_y and added together."
      },
      {
        "name": "array_y",
        "description": "The array or range of values whose squares will be added to the squares of corresponding entries in array_x and added together."
      }
    ]
  },
  {
    "type": "Array",
    "name": "SUMXMY2",
    "syntax": "SUMXMY2(array_x, array_y)",
    "description": "Calculates the sum of the squares of differences of values in two arrays.",
    "link": "https://support.google.com/docs/answer/3094298",
    "notes": [],
    "sampleUsage": ["SUMXMY2({1,2,3},{4,5,6})", "SUMXMY2(A2:A9,B2:B9)"],
    "related": ["SUMX2PY2", "SUMX2MY2"],
    "syntaxVariables": [
      {
        "name": "array_x",
        "description": "The array or range of values that will be reduced by corresponding entries in array_y, squared, and added together."
      },
      {
        "name": "array_y",
        "description": "The array or range of values that will be subtracted from corresponding entries in array_x, the result squared, and all such results added together."
      }
    ]
  },
  {
    "type": "Array",
    "name": "TRANSPOSE",
    "syntax": "TRANSPOSE(array_or_range)",
    "description": "Transposes the rows and columns of an array or range of cells.",
    "link": "https://support.google.com/docs/answer/3094262",
    "notes": [
      "Transposition operates such that the value in the nth row and mth column will become the value in the mth row and nth column. E.g. the value in the fourth row and second column will be put into the second row and fourth column. The result of a transposition on a range of size m rows by n columns is therefore n rows by m columns."
    ],
    "sampleUsage": ["TRANSPOSE({1,2;3,4;5,6})", "TRANSPOSE(A2:F9)"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "array_or_range",
        "description": "The array or range whose rows and columns will be swapped."
      }
    ]
  },
  {
    "type": "Array",
    "name": "TREND",
    "syntax": "TREND(known_data_y, [known_data_x], [new_data_x], [b])",
    "description": "Given partial data about a linear trend, fits an ideal linear trend using the least squares method and/or predicts further values.",
    "link": "https://support.google.com/docs/answer/3094263",
    "notes": [],
    "sampleUsage": [
      "TREND(B2:B10,A2:A10)",
      "TREND(B2:B10,A2:A10,A11:A13,TRUE)"
    ],
    "related": ["LOGEST", "LINEST", "GROWTH"],
    "syntaxVariables": [
      {
        "name": "known_data_y",
        "description": "The array or range containing dependent (y) values that are already known, used to curve fit an ideal linear trend.\n\n    \n      \n        If known_data_y is a two-dimensional array or range, known_data_x must have the same dimensions or be omitted.\n      \n      \n        If known_data_y is a one-dimensional array or range, known_data_x may represent multiple independent variables in a two-dimensional array or range. I.e. if known_data_y is a single row, each row in known_data_x is interpreted as a separated independent value, and analogously if known_data_y is a single column."
      },
      {
        "name": "known_data_x",
        "description": "[ OPTIONAL - {1,2,3,...} with same length as known_data_y by default ] - The values of the independent variable(s) corresponding with known_data_y.\n\n    \n      If known_data_y is a one-dimensional array or range, known_data_x may represent multiple independent variables in a two-dimensional array or range. I.e. if known_data_y is a single row, each row in known_data_x is interpreted as a separated independent value, and analogously if known_data_y is a single column."
      },
      {
        "name": "new_data_x",
        "description": "[ OPTIONAL - same as known_data_x by default ] - The data points to return the y values for on the ideal curve fit.\n\n    \n      The default behavior is to return the ideal curve fit values for the same x inputs as the existing data for comparison of known y values and their corresponding curve fit estimates."
      },
      {
        "name": "b",
        "description": "[ OPTIONAL - TRUE by default ] - Given a general exponential form of y = m*x+b for a curve fit, calculates b if TRUE or forces b to be 0 and only calculates the m values if FALSE, i.e. forces the curve fit to pass through the origin."
      }
    ]
  },
  {
    "type": "Web",
    "name": "ENCODEURL",
    "syntax": "ENCODEURL(text)",
    "description": "Encodes a string of text for the purpose of using in a URL query. Learn more.",
    "link": "https://support.google.com/docs/answer/9199778",
    "notes": [],
    "sampleUsage": ["ENCODEURL(text)", "ENCODEURL(“hello world!”)"],
    "related": [],
    "syntaxVariables": [
      {
        "name": "",
        "description": "IMPORTHTML:  Imports data from a table or list within an HTML page."
      },
      {
        "name": "",
        "description": "CLEAN:  Returns the text with the non-printable ASCII characters removed."
      },
      {
        "name": "",
        "description": "REPLACE:  Replaces part of a text string with a different text string."
      }
    ]
  },
  {
    "type": "Web",
    "name": "HYPERLINK",
    "syntax": "HYPERLINK(url, [link_label])",
    "description": "Creates a hyperlink inside a cell.",
    "link": "https://support.google.com/docs/answer/3093313",
    "notes": [
      "Failure to enclose url (or link_label, if provided) in quotation marks will cause an error.",
      "Google Sheets automatically converts most valid URL types when typed into a cell without the need to use this function."
    ],
    "sampleUsage": [
      "HYPERLINK(\"http://www.google.com/\",\"Google\")",
      "HYPERLINK(url, [link_label])"
    ],
    "related": [],
    "syntaxVariables": [
      {
        "name": "url",
        "description": "The full URL of the link location enclosed in quotation marks, or a reference to a cell containing such a URL.\n\n    \n      \n        Only certain link types are allowed. http://, https://, mailto:, aim:, ftp://, gopher://, telnet://, and news:// are permitted; others are explicitly forbidden. If another protocol is specified, link_label will be displayed in the cell, but will not be hyperlinked.\n      \n      \n        If no protocol is specified, http:// is assumed, and is prepended to url."
      },
      {
        "name": "link_label",
        "description": "[ OPTIONAL - url by default ] - The text to display in the cell as the link, enclosed in quotation marks, or a reference to a cell containing such a label.\n\n    \n      \n        If link_label is a reference to an empty cell, url will be displayed as a link if valid, or as plain text otherwise.\n      \n      \n        If link_label is the empty string literal (\"\"), the cell will appear empty, but the link is still accessible by clicking or moving to the cell."
      }
    ]
  },
  {
    "type": "Web",
    "name": "IMPORTDATA",
    "syntax": "IMPORTDATA(url)",
    "description": "Imports data at a given url in .csv (comma-separated value) or .tsv (tab-separated value) format.",
    "link": "https://support.google.com/docs/answer/3093335",
    "notes": [
      "A maximum of 50 IMPORTDATA calls are supported on a single spreadsheet."
    ],
    "sampleUsage": [
      "IMPORTDATA(\"http://www.census.gov/2010census/csv/pop_change.csv\")",
      "IMPORTDATA(A2)",
      "IMPORTDATA(url)"
    ],
    "related": ["IMPORTXML", "IMPORTRANGE", "IMPORTHTML", "IMPORTFEED"],
    "syntaxVariables": [
      {
        "name": "url",
        "description": "The url from which to fetch the .csv or .tsv-formatted data, including protocol (e.g. http://).\n\n    \n      The value for url must either be enclosed in quotation marks or be a reference to a cell containing the appropriate text."
      }
    ]
  },
  {
    "type": "Web",
    "name": "IMPORTFEED",
    "syntax": "IMPORTFEED(url, [query], [headers], [num_items])",
    "description": "Imports a RSS or ATOM feed.",
    "link": "https://support.google.com/docs/answer/3093337",
    "notes": [
      "IMPORTXML: Imports data from any of various structured data types including XML, HTML, CSV, TSV, and RSS and ATOM XML feeds.",
      "IMPORTRANGE: Imports a range of cells from a specified spreadsheet.",
      "IMPORTHTML: Imports data from a table or list within an HTML page.",
      "IMPORTDATA: Imports data at a given url in .csv (comma-separated value) or .tsv (tab-separated value) format."
    ],
    "sampleUsage": [
      "IMPORTFEED(\"http://news.google.com/?output=atom\")",
      "IMPORTFEED(A2,B2,C2,D2)"
    ],
    "related": ["IMPORTXML", "IMPORTRANGE", "IMPORTHTML", "IMPORTDATA"],
    "syntaxVariables": [
      {
        "name": "url",
        "description": "The URL of the RSS or ATOM feed, including protocol (e.g. http://).\n\n    \n      The value for url must either be enclosed in quotation marks or be a reference to a cell containing the appropriate text."
      },
      {
        "name": "query",
        "description": "[ OPTIONAL - \"items\" by default ] - Specifies what data to fetch from url.\n\n    \n      \n        \"feed\" returns a single row containing feed information including title, description, and url.\n      \n      \n        \"feed <type>\" returns a particular attribute of the feed, where <type> is title, description, author, or url.\n      \n      \n        \"items\" returns a full table containing items from the feed. If num_items is not specified, all items currently published on the feed are returned.\n      \n      \n        \"items <type>\" returns a particular attribute of the requested item(s), where <type> is title, summary (the item content, minus hyperlinks and images), url (the URL of the individual item), or created (the post date associated with the item)."
      },
      {
        "name": "headers",
        "description": "[ OPTIONAL - FALSE by default ] - Whether to include column headers as an extra row on top of the returned value."
      },
      {
        "name": "num_items",
        "description": "[ OPTIONAL ] - For queries of items, the number of items to return, starting from the most recent.\n\n    \n      If num_items is not specified, all items currently published on the feed are returned."
      }
    ]
  },
  {
    "type": "Web",
    "name": "IMPORTHTML",
    "syntax": "IMPORTHTML(url, query, index)",
    "description": "Imports data from a table or list within an HTML page.",
    "link": "https://support.google.com/docs/answer/3093339",
    "notes": [],
    "sampleUsage": [
      "IMPORTHTML(\"http://en.wikipedia.org/wiki/Demographics_of_India\",\"table\",4)",
      "IMPORTHTML(A2,B2,C2)"
    ],
    "related": ["IMPORTXML", "IMPORTRANGE", "IMPORTFEED", "IMPORTDATA"],
    "syntaxVariables": [
      {
        "name": "url",
        "description": "The URL of the page to examine, including protocol (e.g. http://).\n\n    \n      The value for url must either be enclosed in quotation marks or be a reference to a cell containing the appropriate text."
      },
      {
        "name": "query",
        "description": "Either \"list\" or \"table\" depending on what type of structure contains the desired data."
      },
      {
        "name": "index",
        "description": "The index, starting at 1, which identifies which table or list as defined in the HTML source should be returned.\n\n    \n      The indices for lists and tables are maintained separately, so there may be both a list and a table with index 1 if both types of elements exist on the HTML page."
      }
    ]
  },
  {
    "type": "Web",
    "name": "IMPORTRANGE",
    "syntax": "IMPORTRANGE(spreadsheet_url, range_string)",
    "description": "Imports a range of cells from a specified spreadsheet.",
    "link": "https://support.google.com/docs/answer/3093340",
    "notes": [
      "Spreadsheets must be explicitly granted permission to pull data from other spreadsheets using IMPORTRANGE. The first time the destination sheet pulls data from a new source sheet, the user will be prompted to grant permission. Once access is granted, any editor on the destination spreadsheet can use IMPORTRANGE to pull from any part of the source spreadsheet. The access remains in effect until the user who granted access is removed from the source.",
      "If the data you are trying to import is too large, you may get an error."
    ],
    "sampleUsage": [
      "IMPORTRANGE(\"",
      "https://docs.google.com/spreadsheets/d/abcd123abcd123",
      "\", \"sheet1!A1:C10\")",
      "IMPORTRANGE(A2,\"B2\")"
    ],
    "related": ["IMPORTXML", "IMPORTHTML", "IMPORTFEED", "IMPORTDATA"],
    "syntaxVariables": [
      {
        "name": "spreadsheet_url",
        "description": " - The URL of the spreadsheet from where data will be imported.\n\n    \n      The value for spreadsheet_url must either be enclosed in quotation marks or be a reference to a cell containing the URL of a spreadsheet."
      },
      {
        "name": "range_string",
        "description": "A string, of the format \"[sheet_name!]range\" (e.g. \"Sheet1!A2:B6\" or \"A2:B6\") specifying the range to import.\n\n    \n      \n        The sheet_name component of range_string is optional; by default IMPORTRANGE will import from the given range of the first sheet.\n      \n      \n        The value for range_string must either be enclosed in quotation marks or be a reference to a cell containing the appropriate text."
      }
    ]
  },
  {
    "type": "Web",
    "name": "IMPORTXML",
    "syntax": "IMPORTXML(url, xpath_query)",
    "description": "Imports data from any of various structured data types including XML, HTML, CSV, TSV, and RSS and ATOM XML feeds.",
    "link": "https://support.google.com/docs/answer/3093342",
    "notes": [],
    "sampleUsage": [
      "IMPORTXML(\"https://en.wikipedia.org/wiki/Moon_landing\", \"//a/@href\")",
      "IMPORTXML(A2,B2)"
    ],
    "related": ["IMPORTRANGE", "IMPORTHTML", "IMPORTFEED", "IMPORTDATA"],
    "syntaxVariables": [
      {
        "name": "url",
        "description": "The URL of the page to examine, including protocol (e.g. http://).\n\n    \n      The value for url must either be enclosed in quotation marks or be a reference to a cell containing the appropriate text."
      },
      {
        "name": "xpath_query",
        "description": "The XPath query to run on the structured data.\n\n    \n      For more information on XPath, see http://www.w3schools.com/xml/xpath_intro.asp."
      }
    ]
  },
  {
    "type": "Web",
    "name": "ISURL",
    "syntax": "ISURL(value)",
    "description": "Checks whether a value is a valid URL.",
    "link": "https://support.google.com/docs/answer/3256501",
    "notes": [
      "Google Sheets automatically links text entered into a cell if a valid URL is detected. ISURL will return TRUE in these cases.",
      "A fully qualified URL is not required. In other words, \"http\" and \"www\" are not needed in all cases.",
      "Valid protocols include ftp, http, https, gopher, mailto, news, telnet, and aim."
    ],
    "sampleUsage": [
      "ISURL(\"http://www.google.com\")",
      "ISURL(\"www.google.com\")",
      "ISURL(\"google.com\")"
    ],
    "related": ["ISEMAIL", "ISERROR", "ISTEXT", "ISBLANK", "HYPERLINK"],
    "syntaxVariables": [
      { "name": "value", "description": "The value to be verified as a URL." }
    ]
  }
]
